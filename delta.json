{
  "ignoreFormattingDiff": {
    "addedControlIDs": [
      "SV-265876"
    ],
    "removedControlIDs": [
      "SV-235171",
      "SV-235172"
    ],
    "renamedControlIDs": {},
    "changedControlIDs": [
      "SV-235095",
      "SV-235096",
      "SV-235097",
      "SV-235098",
      "SV-235099",
      "SV-235100",
      "SV-235101",
      "SV-235102",
      "SV-235103",
      "SV-235104",
      "SV-235105",
      "SV-235106",
      "SV-235107",
      "SV-235108",
      "SV-235109",
      "SV-235110",
      "SV-235111",
      "SV-235112",
      "SV-235113",
      "SV-235114",
      "SV-235115",
      "SV-235116",
      "SV-235117",
      "SV-235118",
      "SV-235119",
      "SV-235120",
      "SV-235121",
      "SV-235122",
      "SV-235123",
      "SV-235124",
      "SV-235125",
      "SV-235126",
      "SV-235127",
      "SV-235128",
      "SV-235129",
      "SV-235130",
      "SV-235131",
      "SV-235132",
      "SV-235133",
      "SV-235134",
      "SV-235135",
      "SV-235136",
      "SV-235137",
      "SV-235138",
      "SV-235139",
      "SV-235140",
      "SV-235141",
      "SV-235142",
      "SV-235143",
      "SV-235144",
      "SV-235145",
      "SV-235146",
      "SV-235147",
      "SV-235148",
      "SV-235149",
      "SV-235150",
      "SV-235151",
      "SV-235152",
      "SV-235153",
      "SV-235154",
      "SV-235155",
      "SV-235156",
      "SV-235157",
      "SV-235158",
      "SV-235159",
      "SV-235160",
      "SV-235161",
      "SV-235162",
      "SV-235163",
      "SV-235164",
      "SV-235165",
      "SV-235166",
      "SV-235167",
      "SV-235168",
      "SV-235169",
      "SV-235170",
      "SV-235173",
      "SV-235174",
      "SV-235175",
      "SV-235176",
      "SV-235177",
      "SV-235178",
      "SV-235179",
      "SV-235180",
      "SV-235181",
      "SV-235182",
      "SV-235183",
      "SV-235184",
      "SV-235185",
      "SV-235186",
      "SV-235187",
      "SV-235188",
      "SV-235189",
      "SV-235190",
      "SV-235191",
      "SV-235192",
      "SV-235193",
      "SV-235194",
      "SV-235195"
    ],
    "addedControls": {
      "SV-265876": {
        "tags": {
          "check_id": "C-69795r999532_chk",
          "severity": "high",
          "gid": "V-265876",
          "rid": "SV-265876r999534_rule",
          "stig_id": "MYS8-00-012600",
          "gtitle": "SRG-APP-000456-DB-000400",
          "fix_id": "F-69699r999533_fix",
          "documentable": false,
          "cci": [
            "CCI-003376"
          ],
          "nist": [
            "SA-22 a"
          ]
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "id": "SV-265876",
        "title": "MySQL database products must be a version supported by the vendor.",
        "desc": "Unsupported commercial and database systems should not be used because fixes to newly identified bugs will not be implemented by the vendor. The lack of support can result in potential vulnerabilities.\n\nSystems at unsupported servicing levels or releases will not receive security updates for new vulnerabilities, which leaves them subject to exploitation.\n\nWhen maintenance updates and patches are no longer available, the database software is no longer considered supported and should be upgraded or decommissioned.",
        "impact": 0.7,
        "descs": {
          "check": "Review the version and release information.\n\nTo check the version of the installed MySQL, run the following SQL statement:\n\nselect @@version;\n\nThe result will show the version. For example:\n8.0.22-commercial\n\nAccess the vendor website or use other means to verify the version is still supported.\nOracle lifetime support: \nhttps://www.oracle.com/us/assets/lifetime-support-technology-069183.pdf\nScroll down to Oracle MySQL Releases (approximately page 28).\n\nIf the Oracle MySQL version or any of the software components are not supported by the vendor, this is a finding.",
          "fix": "Remove or decommission all unsupported software products.\n\nUpgrade unsupported DBMS or unsupported components to a supported version of the product."
        }
      }
    },
    "changedControls": {
      "SV-235095": {
        "tags": {
          "check_id__added": "C-38314r623405_chk",
          "documentable__added": false,
          "rid": "SV-235095r960768_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "Determine if an organization-level authentication/access mechanism providing account management and automation for all users, groups, roles, and any other principals has been configured.\n\nTo determine if a MySQL Server has any external authentication plugins, connect as a mysql administrator (root) and run the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n       FROM INFORMATION_SCHEMA.PLUGINS\n       WHERE PLUGIN_NAME LIKE '%ldap%' OR PLUGIN_NAME LIKE '%pam%' OR PLUGIN_NAME LIKE '%authentication_windows %';\n\nOne or more of the following plugins must be installed and in the listed results:\nauthentication_ldap_simple\nauthentication_ldap_sasl\nauthentication_pam\nauthentication_windows\n\nIf at least one of the above plugins is not installed, then no organization-level authentication/access is in place, and this is a finding.\n\nDepending on the plugin in use, review its configuration.  \n\nFor a list of global variables, run the following query:\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables\nWHERE VARIABLE_NAME LIKE 'auth%' ;  \n\nIf the LDAP plugin is installed, check the ldap_host and mapping. \n\nFor the LDAP plugin, global variables showing the configuration for authentication to ldap hosts and binding to organizational users should look similar to the following:\nauthentication_ldap_simple_server_host=127.0.0.1\nauthentication_ldap_simple_bind_base_dn=\"dc=example,dc=com\"\nauthentication_ldap_sasl_server_host=127.0.0.1\nauthentication_ldap_sasl_bind_base_dn=\"dc=example,dc=com\"\n\nIf the ldap_host is not a valid authentication host or the mapping to the base_dn maps is not correct, this is a finding.\n\nDetermine the accounts (SQL Logins) managed by PAM. Run the statement: \nSELECT `user`.`Host`,\n    `user`.`user`,\n    `user`.`plugin`,\n    `user`.`authentication_string`\n    from mysql.user where plugin like 'authentication_pam';\n\nFor PAM, the string consists of a PAM service name, optionally followed by a PAM group mapping list consisting of one or more keyword/value pairs each specifying a PAM group name and a MySQL user name. \n\nIf not defined, this is a finding.\n\nIf the windows plugin is installed, the organization mapping details will be defined within the user \"authentication string\". \n\nDetermine the accounts (SQL logins) managed by Windows. Run the statement: \nReview the accounts\nSELECT `user`.`Host`,\n    `user`.`user`,\n    `user`.`plugin`,\n    `user`.`authentication_string`\n    from mysql.user where plugin like 'authentication_windows;\n\nVerify that the Windows user, group, and windows role in the authentication_string map to proper organizational users. If not, this is a finding.\n\nTo determine the accounts (MySQL accounts) actually managed by MySQL Server. Run the statement: \nSELECT `user`.`Host`,\n    `user`.`User`,\n    `user`.`plugin`,\n    `user`.`authentication_string`\n    from mysql.user where plugin not like 'auth%' and `user`.`User` not like 'mysql.%';\n\nIf any accounts listed by the query are not listed in the documentation and authorized, this is a finding."
        }
      },
      "SV-235096": {
        "tags": {
          "check_id__added": "C-38315r623408_chk",
          "documentable__added": false,
          "rid": "SV-235096r960735_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235097": {
        "tags": {
          "check_id__added": "C-38316r623411_chk",
          "documentable__added": false,
          "rid": "SV-235097r960891_rule",
          "nist": [
            "AU-3 a"
          ]
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "Verify, using vendor and system documentation if necessary, that the Database Management System (DBMS) is configured to use MySQL auditing features, or that a third-party product or custom code is deployed and configured to satisfy this requirement.\n\nCheck MySQL auditing to determine whether organization-defined auditable events are being audited by the system.\n\nSELECT PLUGIN_NAME, plugin_status FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit_log' ;\n\nIf the results are not 'audit_log' and plugin_status='ACTIVE' , this is a finding.\n\nNext, determine if the audit log is encrypted: \nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables\nWHERE VARIABLE_NAME LIKE 'audit_log_encryption' ;\n\nIf nothing is returned or the value for audit_log_encryption is not AES, this is a finding.\n\nReview the audit files in the file systems.\n\nRun the following command using the audit log location from above and review its output:\nls -l  <directory where audit log files are located>/audit*log*\n\nFor example, if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nls -l  /usr/local/mysql/data/audit.log\nExample output:\n-rw-r-----    1 _mysql  _mysql   3935888 Apr 25 12:34 audit.20190425T173437.log.enc\n-rw-r-----    1 _mysql  _mysql      2336 Apr 25 12:35 audit.20190425T173527.log.enc\n-rw-r-----    1 _mysql  _mysql  13763984 Apr 30 14:04 audit.log.enc\n\nNext, verify the log files have set permissions the log_destination:\nIf the user owner is not \"mysql\", this is a finding.\nIf the group owner is not \"mysql\", this is a finding.\nIf the file is more permissive than \"640\", this is a finding.\nCheck that the files end with the \".enc\" file extension.  If they do not, this means they are in plaintext, and this is a finding.\n\nRun following command to verify the directory permissions and review its output:\nls -l /usr/local/mysql/data\n\nExample output:\ndrwxr-x---   _mysql  _mysql    1760 Apr 26 09:55 data\n\nNext, verify the log files have set permissions for the log_destination:\nIf the user owner is not \"mysql\", this is a finding.\nIf the group owner is not \"mysql\", this is a finding.\nIf more permissive than \"750\", this is a finding.\n\nIf there are no audit log files, then organizational auditable events are not being audited, and this is a finding.\n\nTo confirm that MySQL audit is capturing sufficient information to establish the identity of the user/subject or process, perform a successful auditable action and an auditable action that results in an SQL error, and then view the results in the audit file, whichever is in use.\n\nIf no audit event is returned for the auditable actions just performed, this is a finding.",
          "fix": "Configure DBMS auditing to audit standard and organization-defined auditable events, with the audit record to include what type of event occurred. \n\nUse this process to ensure auditable events are captured:\n\nConfigure MySQL database server 8.0 for auditing and configure audit settings to include required events as part of the audit record.\n\nTo install MySQL Enterprise Audit:\nRun the audit_log_filter_linux_install.sql script located in the sharedirectory of your MySQL installation. This can be determined by running – select @@basedir;\nFor example if the basedir is /usr/local/mysql \nshell> bin/mysql -u root -p < /usr/local/mysql/share/audit_log_filter_linux_install.sql\n\nVerify the plugin installation by running:\nSELECT PLUGIN_NAME, PLUGIN_STATUS\n       FROM INFORMATION_SCHEMA.PLUGINS\n       WHERE PLUGIN_NAME LIKE 'audit%';\nThe value for audit_log should return ACTIVE.\n\nTo prevent the plugin from being removed at runtime, add the --audit-log option under the [mysqld] option group in the MySQL configuration file (/etc/my.cnf) with a setting of FORCE_PLUS_PERMANENT.\n\naudit-log=FORCE_PLUS_PERMANENT\n\nRestart the server to apply the configuration change.\n\nBy default, rule-based audit log filtering logs no auditable events for any users. To produce log-everything behavior with rule-based filtering, create a filter to enable logging of all events and assign it to the audit all accounts.\n\nRun the following statements to filter all activity for all users:\nSELECT audit_log_filter_set_filter('log_all', '{ \"filter\": { \"log\": true } }');\nSELECT audit_log_filter_set_user('%', 'log_all');\nSELECT audit_log_filter_set_user('%', 'log_all');"
        }
      },
      "SV-235098": {
        "tags": {
          "check_id__added": "C-38317r623414_chk",
          "documentable__added": false,
          "rid": "SV-235098r960909_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235099": {
        "tags": {
          "check_id__added": "C-38318r623417_chk",
          "documentable__added": false,
          "rid": "SV-235099r960930_rule",
          "nist": [
            "AU-9 a"
          ]
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235100": {
        "tags": {
          "check_id__added": "C-38319r623420_chk",
          "documentable__added": false,
          "rid": "SV-235100r960933_rule",
          "nist": [
            "AU-9 a"
          ]
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235101": {
        "tags": {
          "check_id__added": "C-38320r623423_chk",
          "documentable__added": false,
          "rid": "SV-235101r960936_rule",
          "nist": [
            "AU-9 a"
          ]
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235102": {
        "tags": {
          "check_id__added": "C-38321r623426_chk",
          "documentable__added": false,
          "rid": "SV-235102r960864_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235103": {
        "tags": {
          "check_id__added": "C-38322r623429_chk",
          "documentable__added": false,
          "rid": "SV-235103r960879_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "Check MySQL auditing to determine whether organization-defined auditable events are being audited by the system.\n\nSELECT PLUGIN_NAME, plugin_status FROM INFORMATION_SCHEMA.PLUGINS\n       WHERE PLUGIN_NAME LIKE 'audit_log' ;\n\nIf nothing is returned OR if the results are not \"audit_log\" and \"plugin_status='ACTIVE'\" , this is a finding.\n\nNext determine if the audit lot is encrypted. \nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables\nWHERE VARIABLE_NAME LIKE 'audit_log_encryption' ;\n\nIf nothing is returned OR the value for audit_log_encryption is not \"AES\", this is a finding."
        }
      },
      "SV-235104": {
        "tags": {
          "check_id__added": "C-38323r623432_chk",
          "documentable__added": false,
          "rid": "SV-235104r960882_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235105": {
        "tags": {
          "check_id__added": "C-38324r623435_chk",
          "documentable__added": false,
          "rid": "SV-235105r960885_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "Review the system documentation to determine if MySQL Server is required to audit the retrieval of privilege/permission/role membership information. \n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters that are in place are generating records when privileges/permissions are retrieved, run the following query:\nselect * from mysql.proxies_priv;\n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log|egrep proxies_prim\n\nFor example if the values returned by - \"select @@datadir, @@audit_log_file;\" are  /usr/local/mysql/data/,  audit.log\nls -l  /usr/local/mysql/data/audit.log\n\nThe audit data will look similar to the example below:\n{ \"timestamp\": \"2020-08-19 21:03:39\", \"id\": 13, \"class\": \"general\", \"event\": \"status\", \"connection_id\": 9, \"account\": { \"user\": \"root\", \"host\": \"localhost\" }, \"login\": { \"user\": \"root\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"general_data\": { \"command\": \"Query\", \"sql_command\": \"select\", \"query\": \"select * from mysql.proxies_priv\\nLIMIT 0, 1000\", \"status\": 0 } },\n\nIf the audit event is not present, this is a finding."
        }
      },
      "SV-235106": {
        "tags": {
          "check_id__added": "C-38325r623438_chk",
          "documentable__added": false,
          "rid": "SV-235106r960885_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "Review the system documentation to determine if MySQL Server is required to audit when unsuccessful attempts to retrieve privileges/permissions occur.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query:\nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin should be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters that are in place are generating records to audit when unsuccessful attempts to retrieve privileges/permissions occur, run the following query using a user that does not have privileges so that it fails:\nselect * from mysql.proxies_priv;\nERROR: 1142: SELECT command denied to user 'auditme'@'localhost' for table 'proxies_priv'\n\nReview the audit log by running the command:\nsudo cat  <directory where audit log files are located>/audit.log|egrep proxies_priv\nFor example if the values returned by \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep proxies_priv\n\nThe audit data will look similar to the example below:\n{ \"timestamp\": \"2020-08-19 21:10:39\", \"id\": 1, \"class\": \"general\", \"event\": \"status\", \"connection_id\": 13, \"account\": { \"user\": \"auditme\", \"host\": \"localhost\" }, \"login\": { \"user\": \"auditme\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"general_data\": { \"command\": \"Query\", \"sql_command\": \"select\", \"query\": \"select * from mysql.proxies_priv\", \"status\": 1142 } },\nNote status is 1142, like the error.\n\nIf the audit event is not present, this is a finding."
        }
      },
      "SV-235107": {
        "tags": {
          "check_id__added": "C-38326r623441_chk",
          "documentable__added": false,
          "rid": "SV-235107r961791_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "Review the system documentation to determine if MySQL Server is required to audit when security objects are accessed.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin should be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters in place are generating records to audit when security objects are accessed, run the following query:\nselect * from mysql.proxies_priv;\n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log|egrep proxies_prim\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep proxies_priv\n\nThe audit data will look similar to the example below:\n{ \"timestamp\": \"2020-08-19 21:03:39\", \"id\": 13, \"class\": \"general\", \"event\": \"status\", \"connection_id\": 9, \"account\": { \"user\": \"root\", \"host\": \"localhost\" }, \"login\": { \"user\": \"root\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"general_data\": { \"command\": \"Query\", \"sql_command\": \"select\", \"query\": \"select * from mysql.proxies_priv\\nLIMIT 0, 1000\", \"status\": 0 } },\n\nIf the audit event is not present, this is a finding."
        }
      },
      "SV-235108": {
        "tags": {
          "check_id__added": "C-38327r623444_chk",
          "documentable__added": false,
          "rid": "SV-235108r961791_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "Review the system documentation to determine if MySQL Server is required to audit when unsuccessful attempts to access security objects occur.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters in place are generating records when unsuccessful attempts to access security objects occur, run the following query with a user that does not have privileges so that it will fail:\nselect * from mysql.proxies_priv;\nERROR: 1142: SELECT command denied to user 'auditme'@'localhost' for table 'proxies_priv'\n\nReview the audit log by running the command:\nsudo cat  <directory where audit log files are located>/audit.log|egrep proxies_priv\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep proxies_priv\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep proxies_priv\n\nThe audit data will look similar to the example below:\n{ \"timestamp\": \"2020-08-19 21:10:39\", \"id\": 1, \"class\": \"general\", \"event\": \"status\", \"connection_id\": 13, \"account\": { \"user\": \"auditme\", \"host\": \"localhost\" }, \"login\": { \"user\": \"auditme\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"general_data\": { \"command\": \"Query\", \"sql_command\": \"select\", \"query\": \"select * from mysql.proxies_priv\", \"status\": 1142 } },\nNote status is 1142, like the error.\n\nIf the audit event is not present, this is a finding."
        }
      },
      "SV-235109": {
        "tags": {
          "check_id__added": "C-38328r623447_chk",
          "documentable__added": false,
          "rid": "SV-235109r961797_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "If classification levels/security levels labeling is not required, this is not a finding.\n\nReview the system documentation to determine if MySQL Server is required to audit records when unsuccessful attempts to delete categories of information (e.g., classification levels/security levels) occur.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nModify MySQL selects that check for changes to categories of information. Modify selects statements to audit when information categories are accessed using MySQL Audit by calling the audit_api_message_emit_udf() function and including the details related to the select. \n\n- An Example test -\n\nCREATE TABLE `test_trigger`.`info_cat_test` (\n  `id` INT NOT NULL,\n  `name` VARCHAR(20) NULL,\n  `desc` VARCHAR(20) NULL,\n  `sec_level` CHAR(1) NULL,\n  PRIMARY KEY (`id`));\n\nDELIMITER $$\n\n\nINSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) VALUES ('1', 'fred', 'engineer', 'H');\nINSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) VALUES ('2', 'jill', 'program manager', 'M');\nINSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) VALUES ('3', 'joe', 'maintenance', 'L');\n\nSELECT `info_cat_test`.`id`,\n    `info_cat_test`.`name`,\n    `info_cat_test`.`desc`,\n    `info_cat_test`.`sec_level`,\n    IF(`info_cat_test`.`sec_level`= 'H', \n    audit_api_message_emit_udf('sec_level_selected',\n                                         'audit_select_attempt',\n                                         ' H level sec data was accessed',\n                                         'FOR ', name\n                                         ), \n    'Not Audited')\nFROM `test_trigger`.`info_cat_test`;\n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log | egrep sec_level_selected\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep sec_level_priv\n\nThe audit data will look similar to the example below:\n{ \"timestamp\": \"2020-08-20 21:19:21\", \"id\": 1, \"class\": \"message\", \"event\": \"user\", \"connection_id\": 9, \"account\": { \"user\": \"root\", \"host\": \"localhost\" }, \"login\": { \"user\": \"root\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"message_data\": { \"component\": \"sec_level_selected\", \"producer\": \"audit_select_attempt\", \"message\": \" H level sec data was accessed\", \"map\": { \"FOR \": \"fred\" } } },\n\nIf the audit event is not present, this is a finding."
        }
      },
      "SV-235110": {
        "tags": {
          "check_id__added": "C-38329r623450_chk",
          "documentable__added": false,
          "rid": "SV-235110r961797_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "If classification levels/security levels labeling is not required, this is not a finding.\n\nReview the system documentation to determine if MySQL Server is required to audit records when unsuccessful attempts to access categories of information (e.g., classification levels/security levels) occur.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin should be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nModify MySQL selects that check for changes to categories of information. Modify selects statements to audit when information categories are access using MySQL Audit by calling the audit_api_message_emit_udf() function and including the details related to the select. \n\n- An Example test -\n\nCREATE TABLE `test_trigger`.`info_cat_test` (\n  `id` INT NOT NULL,\n  `name` VARCHAR(20) NULL,\n  `desc` VARCHAR(20) NULL,\n  `sec_level` CHAR(1) NULL,\n  PRIMARY KEY (`id`));\n\nDELIMITER $$\n\n\nINSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) VALUES ('1', 'fred', 'engineer', 'H');\nINSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) VALUES ('2', 'jill', 'program manager', 'M');\nINSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) VALUES ('3', 'joe', 'maintenance', 'L');\n\nCreate a view using the where clause similar to that shown in the select. If inappropriate access is attempted, in this case H level, the select statement will write to the Audit log using the emit function.\n\nSELECT `info_cat_test`.`id`,\n    `info_cat_test`.`name`,\n    `info_cat_test`.`desc`,\n    `info_cat_test`.`sec_level`\nFROM `test_trigger`.`info_cat_test` where IF(`info_cat_test`.`sec_level`= 'H', \n    CAST(audit_api_message_emit_udf('sec_level_H_ATTEMPTED_selected',\n                                         'audit_select_attempt',\n                                         ' H level sec data was accessed',\n                                         'FOR ', name\n                                         ) as CHAR), \n    'Not Audited') <> 'OK’;\nThe above test will write an audit event related to the selection of H sec_level data.\n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log | egrep sec_level_H_ATTEMPTED_selected\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep sec_level_H_ATTEMPTED_selected\n\nIf the audit event similar to the example below is not present, this is a finding. \n\nThe audit data will look similar to the example below:\nNot Audited') <> 'OK'\\nLIMIT 0, 1000\", \"sql_command\": \"select\" } },\n{ \"timestamp\": \"2020-08-21 14:04:53\", \"id\": 2, \"class\": \"message\", \"event\": \"user\", \"connection_id\": 9, \"account\": { \"user\": \"root\", \"host\": \"localhost\" }, \"login\": { \"user\": \"root\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"message_data\": { \"component\": \"sec_level_H_ATTEMPTED_selected\", \"producer\": \"audit_select_attempt\", \"message\": \" H level sec data was accessed\", \"map\": { \"FOR \": \"fred\" } } },"
        }
      },
      "SV-235111": {
        "tags": {
          "check_id__added": "C-38330r623453_chk",
          "documentable__added": false,
          "rid": "SV-235111r961800_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "Check that MySQL Server Audit is being used for the STIG compliant audit.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin should be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nDetermine if rules are in place to capture the following types of commands related to permissions by running the command:\nselect * from mysql.audit_log_filter;\n\nIf the template SQL filter was used, it will have the name log_stig.\n\nReview the filter value. It will show filters for events of the  type field general_sql_command.str for the following SQL statement types:\ngrant\ngrant_roles\nrevoke\nrevoke_all\nrevoke_roles\ndrop_role\nalter_user_default_role\ncreate_role\ndrop_role\ngrant_roles\nrevoke_roles\nset_role\ncreate_user\nalter_user\ndrop_user\nalter_user\nalter_user_default_role\ncreate_user\ndrop_user\nrename_user\nshow_create_user"
        }
      },
      "SV-235112": {
        "tags": {
          "check_id__added": "C-38331r623456_chk",
          "documentable__added": false,
          "rid": "SV-235112r961800_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "Check that MySQL Server Audit is being used for the STIG compliant audit.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nDetermine if rules are in place to capture the following types of commands related to permissions by running the command:\nselect * from mysql.audit_log_filter;\n\nIf the template SQL filter was used, it will have the name log_stig.\n\nReview the filter values. It will show filters for events of the type of field general_sql_command.str for the following SQL statement types:\ngrant\ngrant_roles\nrevoke\nrevoke_all\nrevoke_roles\ndrop_role\nalter_user_default_role\ncreate_role\ndrop_role\ngrant_roles\nrevoke_roles\nset_role\ncreate_user\nalter_user\ndrop_user\nalter_user\nalter_user_default_role\ncreate_user\ndrop_user\nrename_user\nshow_create_user"
        }
      },
      "SV-235113": {
        "tags": {
          "check_id__added": "C-38332r623459_chk",
          "documentable__added": false,
          "rid": "SV-235113r961800_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "Check that MySQL Server Audit is being used for the STIG compliant audit.  \n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nDetermine if rules are in place to capture the following types of commands related to permissions by running:\nselect * from mysql.audit_log_filter;\n\nIf the template SQL filter was used, it will have the name log_stig.\n\nReview the filter values it will show filters for events of the type of the field general_sql_command.str for the following SQL statement types:\ngrant\ngrant_roles\nrevoke\nrevoke_all\nrevoke_roles\ndrop_role\nalter_user_default_role\ncreate_role\ndrop_role\ngrant_roles\nrevoke_roles\nset_role\ncreate_user\nalter_user\ndrop_user\nalter_user\nalter_user_default_role\ncreate_user\ndrop_user\nrename_user\nshow_create_user"
        }
      },
      "SV-235114": {
        "tags": {
          "check_id__added": "C-38333r623462_chk",
          "documentable__added": false,
          "rid": "SV-235114r961800_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "Check that MySQL Server Audit is being used for the STIG compliant audit.  \n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nDetermine if rules are in place to capture the following types of commands related to permissions by running:\nselect * from mysql.audit_log_filter;\n\nIf the template SQL filter was used, it will have the name log_stig.\n\nReview the filter values. It will show filters for events of the type of the field general_sql_command.str for the following SQL statement types:\ngrant\ngrant_roles\nrevoke\nrevoke_all\nrevoke_roles\ndrop_role\nalter_user_default_role\ncreate_role\ndrop_role\ngrant_roles\nrevoke_roles\nset_role\ncreate_user\nalter_user\ndrop_user\nalter_user\nalter_user_default_role\ncreate_user\ndrop_user\nrename_user\nshow_create_user"
        }
      },
      "SV-235115": {
        "tags": {
          "check_id__added": "C-38334r623465_chk",
          "documentable__added": false,
          "rid": "SV-235115r961803_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "Review the system documentation to determine if MySQL Server is required to audit when security objects are modified.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters that are in place are generating records when security objects are modified, run the following, which will test auditing without destroying data:\nupdate mysql.global_grants set host='%' where PRIV='XXXX’;\n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log|egrep global_grants\nFor example if the values returned by \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep global_grants\nFor example if the values returned by \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep global_grants\n\nThe audit data will look similar to the example below:\n{ \"timestamp\": \"2020-08-19 21:32:27\", \"id\": 2, \"class\": \"general\", \"event\": \"status\", \"connection_id\": 9, \"account\": { \"user\": \"root\", \"host\": \"localhost\" }, \"login\": { \"user\": \"root\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"general_data\": { \"command\": \"Query\", \"sql_command\": \"update\", \"query\": \"update mysql.global_grants set host='%' where PRIV='XXXX'\", \"status\": 0 } }\n\nIf the audit event is not present, this is a finding."
        }
      },
      "SV-235116": {
        "tags": {
          "check_id__added": "C-38335r623468_chk",
          "documentable__added": false,
          "rid": "SV-235116r961803_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "Review the system documentation to determine if MySQL Server is required to audit when unsuccessful attempts to modify security objects occur.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters in place are generating records when unsuccessful attempts to modify security objects occur, run the following as a user without administrator-level privileges:\nupdate mysql.global_grants set host='%' where PRIV='XXXX’;\n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log|egrep global_grants\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep global_grants\n\nThe audit data will look similar to the example below and contain a non-zero status value:\n{ \"timestamp\": \"2020-08-19 21:32:27\", \"id\": 2, \"class\": \"general\", \"event\": \"status\", \"connection_id\": 9, \"account\": { \"user\": \"root\", \"host\": \"localhost\" }, \"login\": { \"user\": \"root\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"general_data\": { \"command\": \"Query\", \"sql_command\": \"update\", \"query\": \"update mysql.global_grants set host='%' where PRIV='XXXX'\", \"status\": 1421 } }\n\nIf the audit event is not present, this is a finding."
        }
      },
      "SV-235117": {
        "tags": {
          "check_id__added": "C-38336r623471_chk",
          "documentable__added": false,
          "rid": "SV-235117r961809_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "If classification levels/security levels labeling is not required, this is not a finding.\n\nReview the system documentation to determine if MySQL Server is required to audit records when deletion of categories of information (e.g., classification levels/security levels) occurs.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nCreate MySQL insert, update, and delete triggers that check for changes to categories of information. If the trigger before data indicates an attempt to delete such information, the trigger must be written to prevent the delete as well as optionally write to the MySQL Audit by calling the audit_api_message_emit_udf() function and including the details related to the attempt. Note: To call from a trigger requires a minimal stored procedure as well.\n\nOnce the trigger has been created, check if the audit filters in place are generating records when categories of information are deleted.\n\n- An Example test -\n\nCREATE TABLE `test_trigger`.`info_cat_test` (\n  `id` INT NOT NULL,\n  `name` VARCHAR(20) NULL,\n  `desc` VARCHAR(20) NULL,\n  `sec_level` CHAR(1) NULL,\n  PRIMARY KEY (`id`));\n\nuse test_trigger;\n\nDELIMITER $$\n\nCREATE TRIGGER test_trigger.audit_delete\n    BEFORE DELETE ON `test_trigger`.`info_cat_test`\n    FOR EACH ROW\nBEGIN\n    IF OLD.sec_level = 'H' THEN\n\t    CALL audit_api_message_emit_sp(OLD.name);\n    END IF;\nEND$$\nDELIMITER ;\n\nDELIMITER $$\n\nCREATE TRIGGER audit_insert\n    BEFORE INSERT ON `test_trigger`.`info_cat_test`\n    FOR EACH ROW\nBEGIN\n    IF NEW.sec_level = 'H' THEN\n\t    CALL audit_api_message_emit_sp(NEW.name);\n    END IF;\nEND$$\nDELIMITER ;\n\nDELIMITER $$\n\nCREATE TRIGGER audit_update\n    BEFORE UPDATE ON `test_trigger`.`info_cat_test`\n    FOR EACH ROW\nBEGIN\n    IF OLD.sec_level = 'H' THEN\n\t    CALL audit_api_message_emit_sp(OLD.name);\n    END IF;\n\tIF NEW.sec_level = 'H' THEN\n\t    CALL audit_api_message_emit_sp(NEW.name);\n    END IF;\nEND$$\nDELIMITER ;\n\nINSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) VALUES ('1', 'fred', 'engineer', 'H');\nINSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) VALUES ('2', 'jill', 'program manager', 'M');\nINSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) VALUES ('3', 'joe', 'maintenance', 'L');\n\ndelete from `test_trigger`.`info_cat_test` where id=1;\n// this fails as the trigger defines that sec_level of H can not be deleted.\n\nupdate`test_trigger`.`info_cat_test`  set sec_level=‘H’   where id=2;\ndelete from `test_trigger`.`info_cat_test` where id=3;\n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log | egrep audit_change_attempt\n\nIf the audit event is not present, this is a finding."
        }
      },
      "SV-235118": {
        "tags": {
          "check_id__added": "C-38337r623474_chk",
          "documentable__added": false,
          "rid": "SV-235118r961809_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "If classification levels/security levels labeling is not required, this is not a finding.\n\nReview the system documentation to determine if MySQL Server is required to audit records when unsuccessful attempts to modify categories of information (e.g., classification levels/security levels) occur.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin should be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nCreate MySQL insert, update, and delete triggers that check for changes to categories of information. If the trigger before data indicates an attempt to delete such information, the trigger should be written to prevent the delete as well as optionally write to the MySQL Audit by calling the audit_api_message_emit_udf() function and including the details related to the attempt. Note: To call from a trigger requires a minimal stored procedure as well.\n\nOnce the trigger has been created, check if the audit filters that are in place are generating records when categories of information are deleted.\n\n- An Example test -\n\nCREATE TABLE `test_trigger`.`info_cat_test` (\n  `id` INT NOT NULL,\n  `name` VARCHAR(20) NULL,\n  `desc` VARCHAR(20) NULL,\n  `sec_level` CHAR(1) NULL,\n  PRIMARY KEY (`id`));\n\nuse test_trigger;\n\nDELIMITER $$\n\nCREATE TRIGGER audit_delete\n    BEFORE DELETE ON `test_trigger`.`info_cat_test`\n    FOR EACH ROW\nBEGIN\n    IF OLD.sec_level = 'H' THEN\n\tCALL audit_api_message_emit_sp(OLD.name);\n        SIGNAL SQLSTATE '45000'\n            SET MESSAGE_TEXT = 'ERROR - THIS DATA IS LEVEL H can not delete’;    \n   END IF;\nEND$$\nDELIMITER ;\n\nDELIMITER $$\n\nCREATE TRIGGER audit_insert\n    BEFORE INSERT ON `test_trigger`.`info_cat_test`\n    FOR EACH ROW\nBEGIN\n    IF NEW.sec_level = 'H' THEN\n\tCALL audit_api_message_emit_sp(NEW.name);\n        SIGNAL SQLSTATE '45000'\n            SET MESSAGE_TEXT = 'ERROR - THIS DATA IS LEVEL H can not insert’;    \n    END IF;\nEND$$\nDELIMITER ;\n\nDELIMITER $$\n\nCREATE TRIGGER audit_update\n    BEFORE UPDATE ON `test_trigger`.`info_cat_test`\n    FOR EACH ROW\nBEGIN\n    IF OLD.sec_level = 'H' THEN\n\t    CALL audit_api_message_emit_sp(OLD.name);\n    END IF;\n    IF NEW.sec_level = 'H' THEN\n\t    CALL audit_api_message_emit_sp(NEW.name);\n    END IF;\n    SIGNAL SQLSTATE '45000'\n            SET MESSAGE_TEXT = 'ERROR - THIS DATA IS LEVEL H can not update';   \nEND$$\nDELIMITER ;\n\nINSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) VALUES ('1', 'fred', 'engineer', 'H');\nINSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) VALUES ('2', 'jill', 'program manager', 'M');\nINSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) VALUES ('3', 'joe', 'maintenance', 'L');\n\ndelete from `test_trigger`.`info_cat_test` where id=1;\n// this fails as the trigger defines that sec_level of H can not be deleted.\n\nupdate`test_trigger`.`info_cat_test`  set sec_level=‘H’   where id=2;\ndelete from `test_trigger`.`info_cat_test` where id=3;\n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log | egrep audit_change_attempt\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep audit_change_attempt\n\nIf the audit event is not present, this is a finding."
        }
      },
      "SV-235119": {
        "tags": {
          "check_id__added": "C-38338r623477_chk",
          "documentable__added": false,
          "rid": "SV-235119r961812_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "Review the system documentation to determine if MySQL Server is required to audit when privileges/permissions are deleted.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \n\nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters in place are generating records when privileges/permissions are deleted, run the following, which will test auditing without destroying data:\ndelete from mysql.procs_priv where 1=2; \n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log|egrep procs_priv\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep procs_priv\n\nThe audit data will look similar to the example below:\n{ \"timestamp\": \"2020-08-19 21:24:26\", \"id\": 2, \"class\": \"general\", \"event\": \"status\", \"connection_id\": 9, \"account\": { \"user\": \"root\", \"host\": \"localhost\" }, \"login\": { \"user\": \"root\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"general_data\": { \"command\": \"Query\", \"sql_command\": \"delete\", \"query\": \"delete from procs_priv\", \"status\": 0 } }\n\nIf the audit event is not present, this is a finding."
        }
      },
      "SV-235120": {
        "tags": {
          "check_id__added": "C-38339r623480_chk",
          "documentable__added": false,
          "rid": "SV-235120r961812_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "Review the system documentation to determine if MySQL Server is required to audit when unsuccessful attempts to delete privileges/permissions occur.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters in place are generating records when unsuccessful attempts to delete privileges/permissions occur, run the following, which will test auditing without destroying data but as a user without administrative privileges so that it fails:\ndelete from mysql.procs_priv where 1=2; \n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log|egrep procs_priv\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep procs_priv\n\nThe audit data will look similar to the  example below and contain a non-zero status value:\n{ \"timestamp\": \"2020-08-19 21:24:26\", \"id\": 2, \"class\": \"general\", \"event\": \"status\", \"connection_id\": 9, \"account\": { \"user\": \"root\", \"host\": \"localhost\" }, \"login\": { \"user\": \"root\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"general_data\": { \"command\": \"Query\", \"sql_command\": \"delete\", \"query\": \"delete from procs_priv\", \"status\": 1142 } }\n\nIf the audit event is not present, this is a finding."
        }
      },
      "SV-235121": {
        "tags": {
          "check_id__added": "C-38340r623483_chk",
          "documentable__added": false,
          "rid": "SV-235121r961818_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "Review the system documentation to determine if MySQL Server is required to audit when security objects are deleted.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters in place are generating records when security objects are deleted, run the following, which will test auditing. Note: This is destructive. Back up the database table prior to testing so it can be restored.\ndrop mysql.procs_priv; \n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log|egrep DROP\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep DROP\n\nThe audit data will look similar to the example below: \n{ \"timestamp\": \"2020-08-21 17:06:02\", \"id\": 1, \"class\": \"general\", \"event\": \"status\", \"connection_id\": 9, \"account\": { \"user\": \"root\", \"host\": \"localhost\" }, \"login\": { \"user\": \"root\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"general_data\": { \"command\": \"Query\", \"sql_command\": \"drop_table\", \"query\": \"DROP TABLE `mysql`.`proxies_priv`\", \"status\": 0 } },\n\nIf the audit event is not present, this is a finding."
        }
      },
      "SV-235122": {
        "tags": {
          "check_id__added": "C-38341r623486_chk",
          "documentable__added": false,
          "rid": "SV-235122r961818_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "Review the system documentation to determine if MySQL Server is required to audit when unsuccessful attempts to delete security objects occur.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters in place are generating records when security objects are deleted, run the following, which will test auditing as a user with administrator-level privileges:\ndrop table mysql.columns_priv;\nERROR: 1142: DROP command denied to user 'newuser'@'localhost' for table 'columns_priv'\n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log|egrep DROP\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep DROP\n\nThe audit data will look similar to the example below and contain a non-zero status value:\n{ \"timestamp\": \"2020-08-21 17:21:12\", \"id\": 0, \"class\": \"general\", \"event\": \"status\", \"connection_id\": 17, \"account\": { \"user\": \"newuser\", \"host\": \"localhost\" }, \"login\": { \"user\": \"newuser\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"general_data\": { \"command\": \"Query\", \"sql_command\": \"drop_table\", \"query\": \"drop table `mysql`.audit_log_user\", \"status\": 1142 } },\n\nIf the audit event is not present, this is a finding."
        }
      },
      "SV-235123": {
        "tags": {
          "check_id__added": "C-38342r623489_chk",
          "documentable__added": false,
          "rid": "SV-235123r961821_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235124": {
        "tags": {
          "check_id__added": "C-38343r623492_chk",
          "documentable__added": false,
          "rid": "SV-235124r961821_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "If classification levels/security levels labeling is not required, this is not a finding.\n\nReview the system documentation to determine if MySQL Server is required to audit records when unsuccessful attempts to delete categories of information (e.g., classification levels/security levels) occur.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nCreate MySQL Delete triggers that check for changes to categories of information. If the trigger before data indicates an attempt to delete such information, the trigger should be written to prevent the delete as well as optionally write to the MySQL Audit by calling the audit_api_message_emit_udf() function and including the details related to the attempt. Note: To call from a trigger requires a minimal stored procedure as well.\n\nOnce the trigger has been created, check if the audit filters that are in place are generating records when categories of information are deleted.\n\n- An Example test -\n\nCREATE TABLE `test_trigger`.`info_cat_test` (\n  `id` INT NOT NULL,\n  `name` VARCHAR(20) NULL,\n  `desc` VARCHAR(20) NULL,\n  `sec_level` CHAR(1) NULL,\n  PRIMARY KEY (`id`));\n\nDELIMITER $$\n\nCREATE TRIGGER test_trigger.audit_delete_attempt\n    BEFORE DELETE ON `test_trigger`.`info_cat_test`\n    FOR EACH ROW\nBEGIN\n    IF OLD.sec_level = 'H' THEN\n\t    CALL audit_api_message_emit_sp(OLD.name);\n        SIGNAL SQLSTATE '45000'\n            SET MESSAGE_TEXT = 'ERROR - THIS DATA IS LEVEL H';\n    END IF;\nEND$$\nDELIMITER ;\n\n\nINSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) VALUES ('1', 'fred', 'engineer', 'H');\nINSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) VALUES ('2', 'jill', 'program manager', 'M');\nINSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) VALUES ('3', 'joe', 'maintenance', 'L');\n\ndelete from `test_trigger`.`info_cat_test` where id=1;\n// this fails as the trigger defines that sec_level of H can not be deleted.\n\ndelete from `test_trigger`.`info_cat_test` where id=2;\ndelete from `test_trigger`.`info_cat_test` where id=3;\n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log | egrep sec_level_trigger\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep sec_level_trigger\n\nIf the audit event is not present, this is a finding."
        }
      },
      "SV-235125": {
        "tags": {
          "check_id__added": "C-38344r623495_chk",
          "documentable__added": false,
          "rid": "SV-235125r961824_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "Review the system documentation to determine if MySQL Server is required to audit when successful logons or connections occur.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters in place are generating records when successful logons or connections occur, log in to MySQL and then log out. Below is an example using MySQL Shell:\n% mysqlsh —sql\n MySQL  SQL > \\connect newuser@localhost\nCreating a session to 'newuser@localhost'\n MySQL  localhost:33060+ ssl  SQL > \\quit\nBye!\n\nReview the audit log by running the Linux command:\nNote, \"status\": 0 for each indicates successful.\n\nsudo cat  <directory where audit log files are located>/audit.log | egrep  \"\\\"event\\\": \\”connect\\\"\"\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep  \"\\\"event\\\": \\”connect\\\"\"\n\nThe audit data will look similar to the example below:\nLogging in - connecting\n\n{ \"timestamp\": \"2020-08-21 17:47:09\", \"id\": 0, \"class\": \"connection\", \"event\": \"connect\", \"connection_id\": 19, \"account\": { \"user\": \"newuser\", \"host\": \"localhost\" }, \"login\": { \"user\": \"newuser\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"connection_data\": { \"connection_type\": \"plugin\", \"status\": 0, \"db\": \"\" } },\n\nLogging out - disconnection\n\nsudo cat  <directory where audit log files are located>/audit.log | egrep  \"\\\"event\\\": \\\"disconnect\\”\"\n\nExample output:\n{ \"timestamp\": \"2020-08-21 17:47:11\", \"id\": 1, \"class\": \"connection\", \"event\": \"disconnect\", \"connection_id\": 19, \"account\": { \"user\": \"newuser\", \"host\": \"localhost\" }, \"login\": { \"user\": \"newuser\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"connection_data\": { \"connection_type\": \"plugin\" } },"
        }
      },
      "SV-235126": {
        "tags": {
          "check_id__added": "C-38345r623498_chk",
          "documentable__added": false,
          "rid": "SV-235126r961824_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "Review the system documentation to determine if MySQL Server is required to audit when unsuccessful logons or connection attempts occur.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters that are in place are generating records when unsuccessful logons or connection attempts occur:\n\nLog in to MySQL and then log out. For example, using MySQL Shell:\n% mysqlsh —sql\n MySQL  SQL > \\connect notauser@localhost\nCreating a session to 'notauser@localhost'\nPlease provide the password for 'notauser@localhost': \nMySQL Error 1045: Access denied for user 'notauser'@'localhost' (using password: YES)\n\nReview the audit log by running the Linux command:\nNote, \"status\": 1045  for each indicates failed attempt.\n\nsudo cat  <directory where audit log files are located>/audit.log | egrep notauser \nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep notauser\n\nThe audit data will look similar to the example below:\n{ \"timestamp\": \"2020-08-21 17:54:08\", \"id\": 0, \"class\": \"connection\", \"event\": \"connect\", \"connection_id\": 20, \"account\": { \"user\": \"\", \"host\": \"localhost\" }, \"login\": { \"user\": \"notauser\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"connection_data\": { \"connection_type\": \"plugin\", \"status\": 1045, \"db\": \"\" } },"
        }
      },
      "SV-235127": {
        "tags": {
          "check_id__added": "C-38346r623501_chk",
          "documentable__added": false,
          "rid": "SV-235127r961827_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "Review the system documentation to determine if MySQL Server is required to audit for all privileged activities or other system-level access.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nDetermine if rules are in place to capture the following types of commands related to permissions by running:\nselect * from mysql.audit_log_filter;\n\nIf the template SQL filter was used, it will have the name \"log_stig\".\n\nReview the filter values. It will show filters for events of the type of the field general_sql_command.str for the following SQL statement types:\ngrant\ngrant_roles\nrevoke\nrevoke_all\nrevoke_roles\ndrop_role\nalter_user_default_role\ncreate_role\ndrop_role\ngrant_roles\nrevoke_roles\nset_role\ncreate_user\nalter_user\ndrop_user\nalter_user\nalter_user_default_role\ncreate_user\ndrop_user\nrename_user\nshow_create_user"
        }
      },
      "SV-235128": {
        "tags": {
          "check_id__added": "C-38347r623504_chk",
          "documentable__added": false,
          "rid": "SV-235128r961827_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "Review the system documentation to determine if MySQL Server is required to audit for unsuccessful attempts to execute privileged activities or other system-level access.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nDetermine if rules are in place to capture the following types of commands related to permissions by running:\n\nselect * from mysql.audit_log_filter;\n\nIf the template SQL filter was used, it will have the name log_stig.\n\nReview the filter values it will show filters for events of type of the field general_sql_command.str for the following SQL statement types:\ngrant\ngrant_roles\nrevoke\nrevoke_all\nrevoke_roles\ndrop_role\nalter_user_default_role\ncreate_role\ndrop_role\ngrant_roles\nrevoke_roles\nset_role\ncreate_user\nalter_user\ndrop_user\nalter_user\nalter_user_default_role\ncreate_user\ndrop_user\nrename_user\nshow_create_user"
        }
      },
      "SV-235129": {
        "tags": {
          "check_id__added": "C-38348r623507_chk",
          "documentable__added": false,
          "rid": "SV-235129r961830_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "Check if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters that are in place are generating records when successful logons or connections occur, log in to MySQL and then log out. \n\nBelow is an example using MySQL Shell:\n% mysqlsh —sql\n MySQL  SQL > \\connect newuser@localhost\nCreating a session to 'newuser@localhost'\n MySQL  localhost:33060+ ssl  SQL > \\quit\nBye!\n\nReview the audit log by running the Linux command:\n\"status\": 0 for each indicates successful.\n\"connection_id\": 19 is the same as the connections process id and there will be matching disconnect event with the same connection_id number. This can be used to differentiate multiple connections using the same login.\nEach connect and disconnect has a timestamp tag with the time in Coordinated Universal Time (UTC).\n\nsudo cat  <directory where audit log files are located>/audit.log | egrep  \"\\\"event\\\": \\”connect\\\"\"\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep \"\\\"event\\\": \\”connect\\\"\"\n\nThe audit data will look similar to the example below:\nLogging in - connecting\n\n{ \"timestamp\": \"2020-08-21 17:47:09\", \"id\": 0, \"class\": \"connection\", \"event\": \"connect\", \"connection_id\": 19, \"account\": { \"user\": \"newuser\", \"host\": \"localhost\" }, \"login\": { \"user\": \"newuser\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"connection_data\": { \"connection_type\": \"plugin\", \"status\": 0, \"db\": \"\" } },\n\nLogging out - disconnection\n\nsudo cat  <directory where audit log files are located>/audit.log | egrep  \"\\\"event\\\": \\\"disconnect\\”\"\n\n{ \"timestamp\": \"2020-08-21 17:47:11\", \"id\": 1, \"class\": \"connection\", \"event\": \"disconnect\", \"connection_id\": 19, \"account\": { \"user\": \"newuser\", \"host\": \"localhost\" }, \"login\": { \"user\": \"newuser\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"connection_data\": { \"connection_type\": \"plugin\" } },"
        }
      },
      "SV-235130": {
        "tags": {
          "check_id__added": "C-38349r623510_chk",
          "documentable__added": false,
          "rid": "SV-235130r961833_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "Review the system documentation to determine if MySQL Server is required to audit the concurrent logons/connections by the same user from different workstations.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters that are in place are generating records when multiple connections occur:\n\nRun multiple connections from the same user without logging out and from different IP addresses.\n\nReview the audit log:\nsudo cat  <directory where audit log files are located>/audit.log | egrep <username>\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log and the user is fewconnects then\nsudo cat  /usr/local/mysql/data/audit.log |egrep fewconnects\n\n { \"connection_type\": \"ssl\", \"status\": 0, \"db\": \"\", \"connection_attributes\": { \"_pid\": \"9132\", \"_os\": \"macos10.14\", \"_platform\": \"x86_64\", \"_client_version\": \"8.0.20\", \"_client_name\": \"libmysql\", \"program_name\": \"mysqlsh\" } } },\n{ \"timestamp\": \"2020-08-31 18:03:41\", \"id\": 0, \"class\": \"connection\", \"event\": \"connect\", \"connection_id\": 28, \"account\": { \"user\": \"fewconnects\", \"host\": \"localhost\" }, \"login\": { \"user\": \"fewconnects\", \"os\": \"\", \"ip\": \"\", \"proxy\": \"\" }, \"connection_data\": { \"connection_type\": \"ssl\", \"status\": 0, \"db\": \"\", \"connection_attributes\": { \"_pid\": \"9132\", \"_os\": \"macos10.14\", \"_platform\": \"x86_64\", \"_client_version\": \"8.0.20\", \"_client_name\": \"libmysql\", \"program_name\": \"mysqlsh\" } } }\n{ \"timestamp\": \"2020-08-31 18:11:05\", \"id\": 12, \"class\": \"connection\", \"event\": \"connect\", \"connection_id\": 38, \"account\": { \"user\": \"fewconnects\", \"host\": \"localhost\" }, \"login\": { \"user\": \"fewconnects\", \"os\": \"\", \"ip\": \"93.122.141.147\", \"proxy\": \"\" }, \"connection_data\": { \"connection_type\": \"ssl\", \"status\": 0, \"db\": \"\", \"connection_attributes\": { \"_pid\": \"903\", \"_os\": \"macos10.15\", \"_platform\": \"x86_64\", \"_client_version\": \"8.0.20\", \"_client_name\": \"libmysql\", \"program_name\": \"MySQLWorkbench\" } } },\nNote that each connection has a different connection_id - indicating distinctly auditing multiple connections. Here there are connections from mysqlsh and MySQLWorkbench; the event type is \"event\": “connect” and the \"user\": \"fewconnects\", \"os\": \"\", \"ip\": “127.0.0.1” and \"login\": { \"user\": \"fewconnects\", \"os\": \"\", \"ip\": “93.122.141.147” - that is with different IPs from the different workstations.\n\nIf the audit events are not present, this is a finding.\n\nIf currently required, configure the MySQL Database Server to produce audit records when connections occur.\n\nSee the supplemental file \"MySQL80Audit.sql\"."
        }
      },
      "SV-235131": {
        "tags": {
          "check_id__added": "C-38350r623513_chk",
          "documentable__added": false,
          "rid": "SV-235131r961836_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "Review the system documentation to determine if MySQL Server is required to generate audit records when successful accesses to objects occur.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters in place are generating records to audit when certain objects are accessed:\n\nRun a query and other access types on that object.\nselect * from <schemaname>/<tablename>;\n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log|egrep <tablename>\nFor example if the values returned by \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log \nsudo cat  /usr/local/mysql/data/audit.log |egrep <tablename>\n\nIf the audit event is not present, this is a finding."
        }
      },
      "SV-235132": {
        "tags": {
          "check_id__added": "C-38351r623516_chk",
          "documentable__added": false,
          "rid": "SV-235132r961836_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "Review the system documentation to determine if MySQL Server is required to generate audit records when unsuccessful accesses to objects occur.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters in place are generating records to audit when certain objects access is unsuccessful:\n\nConnect a user without access to an object.\n\nRun a failed query or other failed access types on that object.\nselect * from <schemaname>/<tablename>;\n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log|egrep <tablename>\nFor example if the values returned by \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log \nsudo cat  /usr/local/mysql/data/audit.log |egrep <tablename>\n\nThe record will show the failed attempt which is note by a non-zero status value.\n\nIf the audit event is not present, this is a finding."
        }
      },
      "SV-235133": {
        "tags": {
          "check_id__added": "C-38352r623519_chk",
          "documentable__added": false,
          "rid": "SV-235133r961839_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "Review the system documentation to determine if MySQL Server is required to generate audit records for all direct access to the database(s).\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters in place are generating records to audit all direct access to the database(s):\n\nRun any access to the database.\n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log \nsudo cat  /usr/local/mysql/data/audit.log\n\nIf the audit events are not present, this is a finding."
        }
      },
      "SV-235134": {
        "tags": {
          "check_id__added": "C-38353r623522_chk",
          "documentable__added": false,
          "rid": "SV-235134r961038_rule",
          "nist": [
            "IA-5 (2) (b) (1)"
          ]
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "desc": "The DoD standard for authentication is DoD-approved PKI certificates.\n\nA certificate’s certification path is the path from the end entity certificate to a trusted root certification authority (CA). Certification path validation is necessary for a relying party to make an informed decision regarding acceptance of an end entity certificate. Certification path validation includes checks such as certificate issuer trust, time validity, and revocation status for each certificate in the certification path. Revocation status information for CA and subject certificates in a certification path is commonly provided via certificate revocation lists (CRLs) or online certificate status protocol (OCSP) responses.\n\nDatabase Management Systems that do not validate certificates by performing RFC 5280-compliant certification path validation are in danger of accepting certificates that are invalid and/or counterfeit. This could allow unauthorized access to the database.",
        "descs": {}
      },
      "SV-235135": {
        "tags": {
          "check_id__added": "C-38354r863347_chk",
          "documentable__added": false,
          "rid": "SV-235135r961041_rule",
          "nist": [
            "IA-5 (2) (a) (1)"
          ]
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "desc": "The DoD standard for authentication is DoD-approved PKI certificates. PKI certificate-based authentication is performed by requiring the certificate holder to cryptographically prove possession of the corresponding private key.\n\nIf the private key is stolen, an attacker can use it to impersonate the certificate holder. In cases where the Database Management System (DBMS)-stored private keys are used to authenticate the DBMS to the system’s clients, loss of the corresponding private keys would allow an attacker to successfully perform undetected man-in-the-middle attacks against the DBMS system and its clients.\n\nBoth the holder of a digital certificate, and the issuing authority, must take careful measures to protect the corresponding private key. Private keys must always be generated and protected in FIPS 140-2 or 140-3 validated cryptographic modules.  \n\nAll access to the private key(s) of the DBMS must be restricted to authorized and authenticated users. If unauthorized users have access to one or more of the DBMS's private keys, an attacker could gain access to the key(s) and use them to impersonate the database on the network or otherwise perform unauthorized actions.",
        "descs": {
          "check": "Review DBMS configuration to determine whether appropriate access controls exist to protect the DBMS’s private key. \n\nIf strong access controls do not exist to enforce authorized access to the private key, this is a finding.\n\nMySQL stores certificates in PEM formatted files.\n\nVerify User ownership, Group ownership, and permissions on the ssl_files.\n\nselect @@ssl_ca, @@ssl_capath, @@ssl_cert, @@ssl_cipher, @@ssl_crl, @@ssl_crlpath, @@ssl_fips_mode, @@ssl_key;\nIf ssl_path or ssl_crlpath are not defined the locations default to the datadir.  \nTo determine the datadir \nselect @@datadir;\n\nExample if path is  <directory where audit log files are located>/\n\nsudo sh -c 'ls -l  <directory where data files are located>/*.pem'\nFor example if the value returned by \"select @@datadir;' is  /usr/local/mysql/data/\nsudo sh -c 'ls -l   /usr/local/mysql/data/*.pem'\n\nPassword:\n-rw-------  1 _mysql  _mysql  1676 Feb 25 11:09  <directory where audit log files are located>/ca-key.pem\n-rw-r--r--  1 _mysql  _mysql  1112 Feb 25 11:09  <directory where audit log files are located>/ca.pem\n-rw-r--r--  1 _mysql  _mysql  1112 Feb 25 11:09  <directory where audit log files are located>/client-cert.pem\n-rw-------  1 _mysql  _mysql  1680 Feb 25 11:09  <directory where audit log files are located>/client-key.pem\n-rw-------  1 _mysql  _mysql  1676 Feb 25 11:09  <directory where audit log files are located>/private_key.pem\n-rw-r--r--  1 _mysql  _mysql   452 Feb 25 11:09  <directory where audit log files are located>/public_key.pem\n-rw-r--r--  1 _mysql  _mysql  1112 Feb 25 11:09  <directory where audit log files are located>/server-cert.pem\n-rw-------  1 _mysql  _mysql  1680 Feb 25 11:09  <directory where audit log files are located>/server-key.pem\n\nIf the User owner is not \"mysql\", this is a finding. \n\nIf the Group owner is not \"mysql\", this is a finding.\n\nFor public certs and keys, permissions should be \"rw\" for mysql and \"readonly\" for mysql group and world. These files by default are named \"ca.pem\", \"client-cert.pem\", \"public_key.pem\", and \"server-cert.pem\". If not, this is a finding.\n\nFor private certs and keys, permissions should be \"rw\" for mysql and \"no rights\" for mysql group or world. These files by default are named \"ca-key.pem\", \"client-key.pem\", \"private_key.pem\", and \"server-key.pem\". If not, this is a finding.\n\nReview system configuration to determine whether FIPS mode has been enabled. \n\nselect @@ssl_fips_mode;\n\n- OFF: Disable FIPS mode.\n- ON: Enable FIPS mode.\n- STRICT: Enable “strict” FIPS mode.\n\nIf FIPS mode is not \"ON\" or \"STRICT\", this is a finding.\n\nIf the server-key.pem has a password, verify when starting mysqld in a console there is prompt requiring the passphrase for the server-key."
        }
      },
      "SV-235136": {
        "tags": {
          "check_id__added": "C-38355r623528_chk",
          "documentable__added": false,
          "rid": "SV-235136r961044_rule",
          "nist": [
            "IA-5 (2) (a) (2)"
          ]
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235137": {
        "tags": {
          "check_id__added": "C-38356r998286_chk",
          "documentable__added": false,
          "rid": "SV-235137r998288_rule",
          "fix_id": "F-38319r998287_fix",
          "cci": [
            "CCI-004066"
          ],
          "nist": [
            "IA-5 (1) (h)"
          ]
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "title": "If Database Management System (DBMS) authentication using passwords is employed, the DBMS must enforce the DOD standards for password complexity and lifetime.",
        "desc": "OS/enterprise authentication and identification must be used (SRG-APP-000023-DB-000001). Native DBMS authentication may be used only when circumstances make it unavoidable; and must be documented and Authorizing Official (AO)-approved.\n\nThe DOD standard for authentication is DOD-approved PKI certificates. Authentication based on User ID and Password may be used only when it is not possible to employ a PKI certificate, and requires AO approval.\n\nIn such cases, the DOD standards for password complexity and lifetime must be implemented. DBMS products that can inherit the rules for these from the operating system or access control program (e.g., Microsoft Active Directory) must be configured to do so. For other DBMSs, the rules must be enforced using available configuration parameters or custom code.",
        "descs": {
          "check": "If DBMS authentication using passwords is not employed, this is not a finding.\n\nIf the DBMS is configured to inherit password complexity and lifetime rules from the operating system or access control program, this is not a finding.\n\nReview the MySQL Database Server 8.0 settings relating to password complexity. Determine whether the following rules are enforced. If any are not, this is a finding.\na. Minimum of 15 characters, including at least one of each of the following character sets:\n- Uppercase\n- Lowercase\n- Numeric\n- Special characters (e.g., ~ ! @ # $ % ^ & * ( ) _ + = - ' [ ] / ? > <)\nb. Minimum number of characters changed from previous password: 50 percent of the minimum password length; that is, eight.\n\nReview the DBMS settings relating to password lifetime. Determine whether the following rules are enforced. If any are not, this is a finding.\na. Password lifetime limits for interactive accounts: Minimum 24 hours, maximum 60 days.\nb. Password lifetime limits for non-interactive accounts: Minimum 24 hours, maximum 365 days.\nc. Number of password changes before an old one may be reused: Minimum of five.\n\nConnect as an admin. \n\nSELECT component_urn FROM mysql.component\nwhere component_urn='file://component_validate_password' group by component_urn;\n\nIf the \"validate password\" component is installed the result will be file://component_validate_password.\n\nIf \"validate password\" component is not installed, this is a finding.\n\nIf the \"component_validate_password\" is installed, review the password policies to ensure required password complexity is met. \n\nRun the following to review the password policy:\n\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables where VARIABLE_NAME like 'valid%password%' or VARIABLE_NAME like 'password_%'  ;\n\nFor example the results may look like the following:\n\n'validate_password.check_user_name',’ON’\n'validate_password.dictionary_file',''\n'validate_password.length','8'\n'validate_password.mixed_case_count','1'\n'validate_password.number_count','1'\n'validate_password.policy','MEDIUM'\n'validate_password.special_char_count','1'\n'password_reuse_interval','0'\n'password_require_current','OFF'\n'password_history','0'\n\nIf these results do not meet password complexity requirements listed above, this is a finding.",
          "fix": "If the use of passwords is not needed, configure the MySQL Database Server 8.0 to prevent their use if it is capable of this; if it is not, institute policies and procedures to prohibit their use.\n\nIf the MySQL Database Server 8.0 can inherit password complexity rules from the operating system or access control program, configure it to do so.\n\nOtherwise, use MySQL Database Server 8.0 configuration parameters and/or custom code to enforce the following rules for passwords:\n\na. Minimum of 15 characters, including at least one of each of the following character sets:\n- Uppercase\n- Lowercase\n- Numeric\n- Special characters (e.g., ~ ! @ # $ % ^ & * ( ) _ + = - ' [ ] / ? > <)\nb. Minimum number of characters changed from previous password: 50 percent of the minimum password length; that is, eight.\nc. Password lifetime limits for interactive accounts: Minimum 24 hours, maximum 60 days.\nd. Password lifetime limits for non-interactive accounts: Minimum 24 hours, maximum 365 days.\ne. Number of password changes before an old one may be reused: Minimum of five.\n\nAs the database admin:\n\nINSTALL COMPONENT 'file://component_validate_password';\n\n# Set Password Policies example:\nset persist validate_password.check_user_name='ON';\nset persist validate_password.dictionary_file='<FILENAME OF DICTIONARY FILE';\nset persist validate_password.length=15;\nset persist validate_password.mixed_case_count=1;\nset persist validate_password.special_char_count=2;\nset persist validate_password.number_count=2;\nset persist validate_password.policy='STRONG';\nset persist password_history = 5;\nset persist password_reuse_interval = 365;\nSET GLOBAL default_password_lifetime = 180;\n\nOptional\nset persist password_require_current=YES\n\nThis can also be set at the account level:\nALTER USER 'jeffrey'@'localhost'\n  PASSWORD HISTORY 5\n  PASSWORD REUSE INTERVAL 365 DAY;\nALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE INTERVAL 90 DAY;"
        }
      },
      "SV-235138": {
        "tags": {
          "check_id__added": "C-38357r998289_chk",
          "documentable__added": false,
          "rid": "SV-235138r998291_rule",
          "fix_id": "F-38320r998290_fix",
          "cci": [
            "CCI-004062"
          ],
          "nist": [
            "IA-5 (1) (d)"
          ]
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "desc": "The DOD standard for authentication is DOD-approved PKI certificates.\n\nAuthentication based on User ID and Password may be used only when it is not possible to employ a PKI certificate, and requires Authorizing Official (AO) approval.\n\nIn such cases, database passwords stored in clear text, using reversible encryption, or using unsalted hashes would be vulnerable to unauthorized disclosure. Database passwords must always be in the form of one-way, salted hashes when stored internally or externally to the Database Management System (DBMS).\n\nTo prevent the compromise of authentication information, such as passwords and PINs, during the authentication process, the feedback from the information system must not provide any information that would allow an unauthorized user to compromise the authentication mechanism.\n\nObfuscation of user-provided information when typed into the system is a method used in addressing this risk.\n\nFor example, displaying asterisks when a user types in a password or PIN, is an example of obscuring feedback of authentication information.\n\nThe password requirement is applicable when caching_sha2_password, sha2_password, native_mysql, or LDAP user/password authentication is enabled. When this is the case, password-authenticated accounts can be created in, and authenticated by, the MySQL Server. Other STIG requirements prohibit the use of password-based authentication except when justified and approved. This deals with the exceptions.\n\nThe mysql, mysqlsh, and other command line tools are part of most MySQL installations. These tools can accept a plain-text password, but do offer alternative techniques. Since the typical user of these tools is a Database Administrator (DBA), the consequences of password compromise are particularly serious. Therefore, the use of plain-text passwords must be prohibited as a matter of practice and procedure.",
        "descs": {
          "check": "MySQL stores and displays its user passwords in encrypted form. Nevertheless, this should be verified by reviewing the relevant system views, along with the other items to be checked here.\n\nAsk the database administrator (DBA) to review the list of DBMS database objects, database configuration files, associated scripts, and applications defined within, and external to, the DBMS that accesses the database. The list must also include files, tables, or settings used to configure the operational environment for the DBMS and for interactive DBMS user accounts.\n\nAsk the DBA and/or information system security officer (ISSO) to determine if any DBMS database objects, database configuration files, associated scripts, and applications defined within or external to the DBMS that access the database, and DBMS/user environment files/settings/tables, contain database passwords. If any do, confirm that DBMS passwords stored internally or externally to the DBMS are encoded or encrypted.\n\nIf any passwords are stored in clear text, this is a finding.\n\nAsk the DBA/System Administrator (SA)/Application Support staff if they have created an external password store for applications, batch jobs, and scripts to use. Verify that all passwords stored there are encrypted.\n\nIf a password store is used and any password is not encrypted, this is a finding.\n\nRun this query to determine which MySQL Server authentication methods are enabled:\nSELECT PLUGIN_NAME, PLUGIN_STATUS\n       FROM INFORMATION_SCHEMA.PLUGINS\n       WHERE PLUGIN_NAME LIKE '%ldap%' OR \n       PLUGIN_NAME LIKE '%ldap%' OR \n       PLUGIN_NAME LIKE '%pam%' OR \n       PLUGIN_NAME like '%password';\n\nIf the results return any of the following values:\n'mysql_native_password','ACTIVE'\n'sha256_password','ACTIVE'\n'caching_sha2_password’,’ACTIVE’\n\nNext, determine if any accounts have been created that use passwords.\nSELECT user, host,\n    `user`.`plugin`\nFROM `mysql`.`user` where \n(user.plugin like '%password') \nAND NOT\n(user like 'mysql.%' or user ='root');\n\nFor the mysql or mysqlsh command line tools, which can be configured to accept a plain-text password, and any other essential tool with the same limitation, verify that the system documentation explains the need for the tool, who uses it, and any relevant mitigations; and that AO approval has been obtained; if not, this is a finding.\n\nRequest evidence that all users of the tool are trained in the importance of not using the plain-text password option; how to keep the password hidden; and adherence to this practice. If they are not, this is a finding.",
          "fix": "Develop, document, and maintain a list of DBMS database objects, database configuration files, associated scripts, and applications defined within or external to the DBMS that access the database, and DBMS/user environment files/settings in the System Security Plan.\n\nRecord whether they do or do not contain DBMS passwords. If passwords are present, ensure they are encoded or encrypted and protected by host system security.\n\nWhere possible, alter the authentication mode to X509 or LDAP SASL/Kerberos:\nJust X509 certificate - for example\nALTER USER 'jeffrey'@'localhost' REQUIRE X509;\n\nSpecific X509 example:\nALTER USER 'jeffrey'@'localhost'\n  REQUIRE SUBJECT '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL demo client certificate/\n    CN=client/emailAddress=client@example.com'\n  AND ISSUER '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL/CN=CA/emailAddress=ca@example.com'\nAND CIPHER 'EDH-RSA-DES-CBC3-SHA’;\n\nLDAP SASL example:\nCREATE USER 'boris'@'localhost'\n  IDENTIFIED WITH authentication_ldap_sasl\n  AS 'uid=boris_ldap,ou=People,dc=example,dc=com';\n\nIf password authentication is necessary, then for mysql and mysqlsh command lines which cannot be configured not to accept a plain-text password when mixed-mode authentication is enabled, and any other essential tool with the same limitation:\n1) Document the need for it, who uses it, any relevant mitigations, and obtain AO approval.\n2) Train all users of the tool in the importance of not using the plain-text password option and in how to keep the password hidden."
        }
      },
      "SV-235139": {
        "tags": {
          "check_id__added": "C-38358r623537_chk",
          "documentable__added": false,
          "rid": "SV-235139r961029_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235140": {
        "tags": {
          "check_id__added": "C-38359r623540_chk",
          "documentable__added": false,
          "rid": "SV-235140r961047_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235141": {
        "tags": {
          "check_id__added": "C-38360r623543_chk",
          "documentable__added": false,
          "rid": "SV-235141r960792_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235142": {
        "tags": {
          "check_id__added": "C-38361r623546_chk",
          "documentable__added": false,
          "rid": "SV-235142r961863_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "fix": "Configure MySQL in accordance with security configuration settings by reviewing the Operation System and MySQL documentation and applying the necessary configuration parameters to meet the configurations required by the STIG, NSA configuration guidelines, CTOs, DTMs, and IAVMs."
        }
      },
      "SV-235143": {
        "tags": {
          "check_id__added": "C-38362r623549_chk",
          "documentable__added": false,
          "rid": "SV-235143r960963_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235144": {
        "tags": {
          "check_id__added": "C-38363r623552_chk",
          "documentable__added": false,
          "rid": "SV-235144r960963_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235145": {
        "tags": {
          "check_id__added": "C-38364r623555_chk",
          "documentable__added": false,
          "rid": "SV-235145r960963_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235146": {
        "tags": {
          "check_id__added": "C-38365r623558_chk",
          "documentable__added": false,
          "rid": "SV-235146r960966_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235147": {
        "tags": {
          "check_id__added": "C-38366r623561_chk",
          "documentable__added": false,
          "rid": "SV-235147r960969_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235148": {
        "tags": {
          "check_id__added": "C-38367r863349_chk",
          "documentable__added": false,
          "rid": "SV-235148r961050_rule",
          "fix_id": "F-38330r863350_fix"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "title": "The MySQL Database Server 8.0 must use NIST FIPS 140-2 or 140-3 validated cryptographic modules for cryptographic operations.",
        "desc": "Use of weak or not validated cryptographic algorithms undermines the purposes of utilizing encryption and digital signatures to protect data. Weak algorithms can be easily broken and not validated cryptographic modules may not implement algorithms correctly. Unapproved cryptographic modules or algorithms should not be relied on for authentication, confidentiality, or integrity. Weak cryptography could allow an attacker to gain access to and modify data stored in the database as well as the administration settings of the Database Management System (DBMS).\n\nApplications, including DBMSs, utilizing cryptography are required to use approved NIST FIPS 140-2 or 140-3 validated cryptographic modules that meet the requirements of applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance.  \n\nNSA Type-X (where X=1, 2, 3, 4) products are NSA-certified, hardware-based encryption modules.\n\nThe standard for validating cryptographic modules will transition to the NIST FIPS 140-3 publication.\n\nFIPS 140-2 modules can remain active for up to five years after validation or until September 21, 2026, when the FIPS 140-2 validations will be moved to the historical list. Even on the historical list, CMVP supports the purchase and use of these modules for existing systems. While Federal Agencies decide when they move to FIPS 140-3 only modules, purchasers are reminded that for several years there may be a limited selection of FIPS 140-3 modules from which to choose. CMVP recommends purchasers consider all modules that appear on the Validated Modules Search Page:\nhttps://csrc.nist.gov/projects/cryptographic-module-validation-program/validated-modules\n\nMore information on the FIPS 140-3 transition can be found here: \nhttps://csrc.nist.gov/Projects/fips-140-3-transition-effort/",
        "descs": {
          "check": "Review DBMS configuration to verify it is using NIST FIPS validated cryptographic modules for cryptographic operations.\n\nTo check for FIPS validated cryptographic modules for all operations, run this script in the database: \nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables where variable_name = 'ssl_fips_mode';\n\nThe result will be either \"ON\" or \"STRICT\". If not, then NIST FIPS validated modules are not being used, and this is a finding.",
          "fix": "Utilize NIST FIPS validated cryptographic modules for all cryptographic operations.\nSee Use MySQL Server OpenSSL FIPS mode. See https://dev.mysql.com/doc/refman/8.0/en/fips-mode.html\n\nTurn on MySQL FIPS mode and restart mysqld\nEdit my.cnf\n[mysqld]\nssl_fips_mode=ON\n\nor\n[mysqld]\nssl_fips_mode=STRICT\n\nON: Enable FIPS mode.\nSTRICT: Enable “strict” FIPS mode."
        }
      },
      "SV-235149": {
        "tags": {
          "check_id__added": "C-38368r623567_chk",
          "documentable__added": false,
          "rid": "SV-235149r961053_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235150": {
        "tags": {
          "check_id__added": "C-38369r623570_chk",
          "documentable__added": false,
          "rid": "SV-235150r961095_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235151": {
        "tags": {
          "check_id__added": "C-38370r623573_chk",
          "documentable__added": false,
          "rid": "SV-235151r961131_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235152": {
        "tags": {
          "check_id__added": "C-38371r623576_chk",
          "documentable__added": false,
          "rid": "SV-235152r961149_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235153": {
        "tags": {
          "check_id__added": "C-38372r623579_chk",
          "documentable__added": false,
          "rid": "SV-235153r961149_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235154": {
        "tags": {
          "check_id__added": "C-38373r623582_chk",
          "documentable__added": false,
          "rid": "SV-235154r961119_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "desc": "One class of man-in-the-middle, or session hijacking, attack involves the adversary guessing at valid session identifiers based on patterns in identifiers already known.\n\nThe preferred technique for thwarting guesses at Session IDs is the generation of unique session identifiers using a FIPS 140-2 or 140-3 approved random number generator.\n\nHowever, it is recognized that available DBMS products do not all implement the preferred technique yet may have other protections against session hijacking. Therefore, other techniques are acceptable, provided they are demonstrated to be effective.",
        "descs": {}
      },
      "SV-235155": {
        "tags": {
          "check_id__added": "C-38374r810830_chk",
          "documentable__added": false,
          "rid": "SV-235155r961128_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "If the application owner and Authorizing Official have determined that encryption of data at rest is NOT required, this is not a finding.\n\nReview settings to ensure appropriate controls are applied to protect the confidentiality and integrity of data at rest in the database.\n\nUsing SQL determine if all data-at-rest is encrypted.\n\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables where variable_name = 'audit_log_encryption';\n\nIf \"audit_log_encryption\" is not set to \"AES\", this is a finding.\n\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables where variable_name = 'binlog_encryption';\n\nIf \"binlog_encrypt\" is not set to \"ON\", this is a finding.\n\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables where variable_name = 'innodb_redo_log_encrypt';\n\nIf \"innodb_redo_log_encrypt\" is not set to \"ON\", this is a finding.\n\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables where variable_name = 'innodb_undo_log_encrypt';\n\nIf \"innodb_undo_log_encrypt\" is not set to \"ON\", this is a finding.\n\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables\nWHERE VARIABLE_NAME like 'general_log';\n\nIf \"general_log\"is not \"OFF\", this is a finding.\n\nFind encryption status for all mysql table and tablespaces.\nSELECT\n    `INNODB_TABLESPACES`.`NAME`,\n    `INNODB_TABLESPACES`.`ENCRYPTION`\nFROM `information_schema`.`INNODB_TABLESPACES`;\n\nIf any tablespace other than innodb_temporary does not have ENCRYPTION set to \"Y (yes)\", this is a finding.\n\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables where variable_name = 'table_encryption_privilege_check';\n\nIf \"innodb_redo_log_encrypt\" is not set to \"ON\", this is a finding."
        }
      },
      "SV-235156": {
        "tags": {
          "check_id__added": "C-38375r623588_chk",
          "documentable__added": false,
          "rid": "SV-235156r961158_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235157": {
        "tags": {
          "check_id__added": "C-38376r623591_chk",
          "documentable__added": false,
          "rid": "SV-235157r961158_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235158": {
        "tags": {
          "check_id__added": "C-38377r623594_chk",
          "documentable__added": false,
          "rid": "SV-235158r961158_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235159": {
        "tags": {
          "check_id__added": "C-38378r623597_chk",
          "documentable__added": false,
          "rid": "SV-235159r960888_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "Determine if an audit is configured and enabled. \n\nThe my.cnf file will set the variable audit_file.\n\nReview the my.cnf file for the following entries:\n[mysqld]\nplugin-load-add=audit_log.so\naudit-log=FORCE_PLUS_PERMANENT\n\nIf these entries are not present. This is a finding.\n\nExecute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n       FROM INFORMATION_SCHEMA.PLUGINS\n       WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the \"audit_log plugin\" must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n    `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n    `audit_log_user`.`HOST`,\n    `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding."
        }
      },
      "SV-235160": {
        "tags": {
          "check_id__added": "C-38379r623600_chk",
          "documentable__added": false,
          "rid": "SV-235160r960939_rule",
          "nist": [
            "AU-9 a"
          ]
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235161": {
        "tags": {
          "check_id__added": "C-38380r623603_chk",
          "documentable__added": false,
          "rid": "SV-235161r960942_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235162": {
        "tags": {
          "check_id__added": "C-38381r623606_chk",
          "documentable__added": false,
          "rid": "SV-235162r960945_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235163": {
        "tags": {
          "check_id__added": "C-38382r623609_chk",
          "documentable__added": false,
          "rid": "SV-235163r960960_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "Review Server documentation to determine the authorized owner and users or groups with modify rights for this SQL instance's binary files. Additionally check the owner and users or groups with modify rights for shared software library paths on disk. \n\nIf any unauthorized users are granted modify rights, this is a finding. \n\nA plugin located in a plugin library file can be loaded at runtime with the INSTALL PLUGIN statement. The statement also registers the plugin in the mysql.plugin table to cause the server to load it on subsequent restarts. For this reason, INSTALL PLUGIN requires the INSERT privilege for the mysql.plugin table, and UNINSTALL requires DELETE.\n\nRun the following statement to check for table specific privileges:\nSELECT * FROM information_schema.TABLE_PRIVILEGES where (table_schema='mysql' and table_name=`plugin`) or (table_schema='mysql' and table_name='component';)\n\nIf privilege_type is INSERT or DELETE for an unauthorized user, this is a finding.\n\nRun the following statement to check for global privileges:\nselect * from  information_schema.user_privileges where privilege_type='INSERT' or privilege_type='DELETE';\n\nIf privilege_type is INSERT or DELETE for an unauthorized user, this is a finding."
        }
      },
      "SV-235164": {
        "tags": {
          "check_id__added": "C-38383r623612_chk",
          "documentable__added": false,
          "rid": "SV-235164r960960_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235165": {
        "tags": {
          "check_id__added": "C-38384r623615_chk",
          "documentable__added": false,
          "rid": "SV-235165r960960_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235166": {
        "tags": {
          "check_id__added": "C-38385r623618_chk",
          "documentable__added": false,
          "rid": "SV-235166r960960_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235167": {
        "tags": {
          "check_id__added": "C-38386r623621_chk",
          "documentable__added": false,
          "rid": "SV-235167r961470_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235168": {
        "tags": {
          "check_id__added": "C-38387r998292_chk",
          "documentable__added": false,
          "rid": "SV-235168r998293_rule",
          "cci": [
            "CCI-003980"
          ]
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "MySQL requires users (other than root) to be explicitly granted the CREATE ROUTINE privilege in order to install logical modules.\n\nTo obtain a listing of users and roles who are authorized to create, alter, or replace stored procedures and functions from the server documentation.\n\nExecute the following query for server level permissions:\n\nSELECT `user`.`Host`,\n    `user`.`User`\nFROM `mysql`.`user`\n where     `Create_routine_priv`='Y' OR\n    `Alter_routine_priv` = 'Y';\n\nIf any users or role permissions returned are not authorized to modify the specified object or type, this is a finding. \n\nIf any user or role membership is not authorized, this is a finding.\n\nExecute the following query for database schema level permission (db is the schema name):\nSELECT `db`.`Host`,\n    `db`.`User`,\n    `db`.`Db`\nFROM `mysql`.`db` where     `db`.`Create_routine_priv`='Y' OR\n    `db`.`Alter_routine_priv` = 'Y';\n\nIf any users or role permissions returned are not authorized to modify the specified object or type, this is a finding. \n\nIf any user or role membership is not authorized, this is a finding."
        }
      },
      "SV-235169": {
        "tags": {
          "check_id__added": "C-38388r623627_chk",
          "documentable__added": false,
          "rid": "SV-235169r961461_rule",
          "nist": [
            "CM-5 (1) (a)"
          ]
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235170": {
        "tags": {
          "check_id__added": "C-38389r998294_chk",
          "documentable__added": false,
          "rid": "SV-235170r998296_rule",
          "fix_id": "F-38352r998295_fix",
          "cci": [
            "CCI-003938"
          ],
          "nist": [
            "CM-5 (1) (b)"
          ]
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "Determine if an audit is configured to capture denied actions.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \n\nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nConnect and run commands as a low-privilege user. For example attempt to change system variables, user name, or another user's password, all of which should fail:\nset persist wait_timeout=28000; \nrename user passme to cantchange;\nSET PASSWORD FOR passme = 'sfsdfsdf';\n\nReview the audit log and inspect event data containing identity and user subject details by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log\n\nFor example, if the values returned by \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log \nsudo cat  /usr/local/mysql/data/audit.log\n\n{ \"timestamp\": \"2020-08-31 20:10:21\", \"id\": 1, \"class\": \"general\", \"event\": \"status\", \"connection_id\": 38, \"account\": { \"user\": \"fewconnects\", \"host\": \"localhost\" }, \"login\": { \"user\": \"fewconnects\", \"os\": \"\", \"ip\": \"127.0.0.1\", \"proxy\": \"\" }, \"general_data\": { \"command\": \"Query\", \"sql_command\": \"set_option\", \"query\": \"set persist wait_timeout=28000\", \"status\": 1227 } },\n{ \"timestamp\": \"2020-08-31 20:10:48\", \"id\": 1, \"class\": \"general\", \"event\": \"status\", \"connection_id\": 38, \"account\": { \"user\": \"fewconnects\", \"host\": \"localhost\" }, \"login\": { \"user\": \"fewconnects\", \"os\": \"\", \"ip\": \"127.0.0.1\", \"proxy\": \"\" }, \"general_data\": { \"command\": \"Query\", \"sql_command\": \"rename_user\", \"query\": \"rename user passme to cantchange\", \"status\": 1227 } },\n, \"host\": \"localhost\" }, \"login\": { \"user\": \"fewconnects\", \"os\": \"\", \"ip\": \"127.0.0.1\", \"proxy\": \"\" }, \"general_data\": { \"command\": \"Query\", \"sql_command\": \"set_password\", \"query\": \"SET PASSWORD FOR `passme`@`%`=<secret>\", \"status\": 1044 } },\n\nNote each has a non-zero status, 1227, 1227, and 1044 respectively.\n\nIf the audit log does not contain records of its enforcement of access restrictions associated with changes to the configuration of the DBMS or database(s), this is a finding.",
          "fix": "If currently required, configure the MySQL Database Server to produce audit records when enforcement of access restrictions is associated with changes to the configuration of the DBMS or database(s).\n\nRefer to the supplemental file \"MySQL80Audit.sql\"."
        }
      },
      "SV-235173": {
        "tags": {
          "check_id__added": "C-38392r623639_chk",
          "documentable__added": false,
          "rid": "SV-235173r961392_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235174": {
        "tags": {
          "check_id__added": "C-38393r623642_chk",
          "documentable__added": false,
          "rid": "SV-235174r961860_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235175": {
        "tags": {
          "check_id__added": "C-38394r623645_chk",
          "documentable__added": false,
          "rid": "SV-235175r961398_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235176": {
        "tags": {
          "check_id__added": "C-38395r623648_chk",
          "documentable__added": false,
          "rid": "SV-235176r961401_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235177": {
        "tags": {
          "check_id__added": "C-38396r623651_chk",
          "documentable__added": false,
          "rid": "SV-235177r961521_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235178": {
        "tags": {
          "check_id__added": "C-38397r623654_chk",
          "documentable__added": false,
          "rid": "SV-235178r998297_rule",
          "cci": [
            "CCI-004895"
          ],
          "nist": [
            "SC-11 b"
          ]
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "desc": "The DOD standard for authentication of an interactive user is the presentation of a Common Access Card (CAC) or other physical token bearing a valid, current, DOD-issued Public Key Infrastructure (PKI) certificate, coupled with a Personal Identification Number (PIN) to be entered by the user at the beginning of each session and whenever reauthentication is required.\n\nWithout reauthentication, users may access resources or perform tasks for which they do not have authorization. \n\nWhen applications provide the capability to change security roles or escalate the functional capability of the application, it is critical the user reauthenticate.\n\nIn addition to the reauthentication requirements associated with session locks, organizations may require reauthentication of individuals and/or devices in other situations, including (but not limited to) the following circumstances:\n\n(i) When authenticators change; \n(ii) When roles change; \n(iii) When security categories of information systems change; \n(iv) When the execution of privileged functions occurs; \n(v) After a fixed period of time; or\n(vi) Periodically.\n\nWithin the DOD, the minimum circumstances requiring reauthentication are privilege escalation and role changes.",
        "descs": {}
      },
      "SV-235179": {
        "tags": {
          "check_id__added": "C-38398r623657_chk",
          "documentable__added": false,
          "rid": "SV-235179r961317_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235180": {
        "tags": {
          "check_id__added": "C-38399r623660_chk",
          "documentable__added": false,
          "rid": "SV-235180r961359_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235181": {
        "tags": {
          "check_id__added": "C-38400r623663_chk",
          "documentable__added": false,
          "rid": "SV-235181r961353_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235182": {
        "tags": {
          "check_id__added": "C-38401r623666_chk",
          "documentable__added": false,
          "rid": "SV-235182r961269_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235183": {
        "tags": {
          "check_id__added": "C-38402r623669_chk",
          "documentable__added": false,
          "rid": "SV-235183r961272_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235184": {
        "tags": {
          "check_id__added": "C-38403r623672_chk",
          "documentable__added": false,
          "rid": "SV-235184r961275_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235185": {
        "tags": {
          "check_id__added": "C-38404r623675_chk",
          "documentable__added": false,
          "rid": "SV-235185r961221_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235186": {
        "tags": {
          "check_id__added": "C-38405r623678_chk",
          "documentable__added": false,
          "rid": "SV-235186r961638_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235187": {
        "tags": {
          "check_id__added": "C-38406r863353_chk",
          "documentable__added": false,
          "rid": "SV-235187r962034_rule",
          "fix_id": "F-38369r917658_fix",
          "nist": [
            "SC-13 b"
          ]
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {
          "check": "Detailed information on the NIST Cryptographic Module Validation Program (CMVP) is available at the following website: http://csrc.nist.gov/groups/STM/cmvp/index.html.\n\nReview system documentation to determine whether cryptography for classified or sensitive information is required by the information owner.\n\nIf the system documentation does not specify the type of information hosted on MySQL: classified, sensitive, and/or unclassified, this is a finding.\n\nIf classified or sensitive information does not exist within MySQL Server, this is not a finding.\n\nVerify that the operating system provides the OpenSSL FIPS Object Module, and is configured to require the use of OpenSSL of FIPS compliant algorithms, available at MySQL runtime.\n\nIf the Security Setting for FIPS mode option is \"Disabled\" on the server's OS, this is a finding.\n\nIf cryptography is being used by MySQL, verify that the cryptography is NIST FIPS certified by running the following SQL query:\nDetermine if MySQL is running in FIPS mode.\nselect @@ssl_fips_mode;\n\nIf ssl_fips_mode is not \"ON\" or \"STRICT\", this is a finding.\n\nView the versions of TLS, then review the cipher suites in use for the versions returned by statement:\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables WHERE VARIABLE_NAME = 'tls_version';\n\nIf the results include less than version TLS 1.2, for example TLS 1.0 or 1.1, this is a finding. \n\nIf the results include TLS 1.2 view the supported ciphers on the MySQL Server, run\nselect * from performance_schema.global_status where variable_name= 'Ssl_cipher_list';\n\nIf the results include TLS 1.3 view the supported ciphers on the MySQL Server, run\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables WHERE VARIABLE_NAME = 'tls_ciphersuites';\n\nIf any results list show an uncertified NIST FIPS 140-2 algorithm type, this is a finding.\n\nCheck MySQL certificate PEM file(s) for compliance with DoD requirements by running this command: \nopenssl x509 -in server-cert.pem -text -noout\n\nIf any PEM file is not in compliance, this is a finding.",
          "fix": "Configure cryptographic functions to use NSA-approved cryptography-compliant algorithms.\n\nTurn on MySQL FIPS mode.\nEdit my.cnf\n[mysqld]\nssl_fips_mode=ON\n\nor\n[mysqld]\nssl_fips_mode=STRICT\n\nTo restrict TLS versions:\n\n[mysqld]\ntls_version='TLSv1.2,TLSv1.3'\n\nExample to define ciphers for TLSv1.2:\n\n[mysqld]\nssl_ciphers='ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:DHE-DSS-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305'\n\nIf TLSv1.3 is enabled, the \"tls_ciphersuites\" setting must contain all or a subset of the following ciphers based on certificates being used by server and client. Enabling FIPS mode will limit the OpenSSL library to operate within the FIPS object module.\n\nExample to define TLS ciphers for TLSv1.3:\n\n[mysqld]\ntls_ciphersuites='TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_CCM_SHA256:TLS_AES_128_CCM_8_SHA256'\n\nAfter adding any entries to the my.cnf file, restart mysqld.\n\nCreate and use DOD-approved certificates for asymmetric keys used by the database."
        }
      },
      "SV-235188": {
        "tags": {
          "check_id__added": "C-38407r623684_chk",
          "documentable__added": false,
          "rid": "SV-235188r961857_rule",
          "fix_id": "F-38370r863355_fix",
          "nist": [
            "SC-13 b"
          ]
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "title": "The MySQL Database Server 8.0 must implement NIST FIPS 140-2 or 140-3 validated cryptographic modules to provision digital signatures.",
        "desc": "Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.\n\nFor detailed information, refer to NIST FIPS Publication 140-2 or Publication 140-3, Security Requirements For Cryptographic Modules.  Note that the product's cryptographic modules must be validated and certified by NIST as FIPS-compliant.",
        "descs": {
          "fix": "Implement NIST FIPS validated cryptographic modules to provision digital signatures.\n\nTurn on MySQL FIPS mode and restart mysqld\nEdit my.cnf\n[mysqld]\nssl_fips_mode=ON\n\nor\n[mysqld]\nssl_fips_mode=STRICT\n\nIn general, STRICT imposes more restrictions than ON, but MySQL itself has no FIPS-specific code other than to specify to OpenSSL the FIPS mode value. The exact behavior of FIPS mode for ON or STRICT depends on the OpenSSL version."
        }
      },
      "SV-235189": {
        "tags": {
          "check_id__added": "C-38408r623687_chk",
          "documentable__added": false,
          "rid": "SV-235189r961857_rule",
          "fix_id": "F-38371r863357_fix",
          "nist": [
            "SC-13 b"
          ]
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "title": "The MySQL Database Server 8.0 must implement NIST FIPS 140-2 or 140-3 validated cryptographic modules to generate and validate cryptographic hashes.",
        "desc": "Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.\n \nFor detailed information, refer to NIST FIPS Publication 140-2 or Publication 140-3, Security Requirements For Cryptographic Modules. Note that the product's cryptographic modules must be validated and certified by NIST as FIPS-compliant.",
        "descs": {
          "fix": "Implement NIST FIPS validated cryptographic modules to provision digital signatures.\n\nTurn on MySQL FIPS mode and restart mysqld\nEdit my.cnf\n[mysqld]\nssl_fips_mode=ON\n\nor\n[mysqld]\nssl_fips_mode=STRICT\n\nIn general, STRICT imposes more restrictions than ON, but MySQL itself has no FIPS-specific code other than to specify to OpenSSL the FIPS mode value. The exact behavior of FIPS mode for ON or STRICT depends on the OpenSSL version."
        }
      },
      "SV-235190": {
        "tags": {
          "check_id__added": "C-38409r623690_chk",
          "documentable__added": false,
          "rid": "SV-235190r961857_rule",
          "fix_id": "F-38372r863359_fix",
          "nist": [
            "SC-13 b"
          ]
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "title": "The MySQL Database Server 8.0 must implement NIST FIPS 140-2 or 140-3 validated cryptographic modules to protect unclassified information requiring confidentiality and cryptographic protection, in accordance with the data owner's requirements.",
        "desc": "Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.\n\nIt is the responsibility of the data owner to assess the cryptography requirements in light of applicable federal laws, Executive Orders, directives, policies, regulations, and standards.\n\nFor detailed information, refer to NIST FIPS Publication 140-2 or Publication 140-3, Security Requirements For Cryptographic Modules. Note that the product's cryptographic modules must be validated and certified by NIST as FIPS-compliant.",
        "descs": {
          "fix": "Implement NIST FIPS validated cryptographic modules to provision digital signatures.\n\nTurn on MySQL FIPS mode and restart mysqld\nEdit my.cnf\n[mysqld]\nssl_fips_mode=ON\n\nor\n[mysqld]\nssl_fips_mode=STRICT\n\nIn general, STRICT imposes more restrictions than ON, but MySQL itself has no FIPS-specific code other than to specify to OpenSSL the FIPS mode value. The exact behavior of FIPS mode for ON or STRICT depends on the OpenSSL version."
        }
      },
      "SV-235191": {
        "tags": {
          "check_id__added": "C-38410r623693_chk",
          "documentable__added": false,
          "rid": "SV-235191r961596_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235192": {
        "tags": {
          "check_id__added": "C-38411r623696_chk",
          "documentable__added": false,
          "rid": "SV-235192r961599_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235193": {
        "tags": {
          "check_id__added": "C-38412r623699_chk",
          "documentable__added": false,
          "rid": "SV-235193r961602_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235194": {
        "tags": {
          "check_id__added": "C-38413r623702_chk",
          "documentable__added": false,
          "rid": "SV-235194r961683_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      },
      "SV-235195": {
        "tags": {
          "check_id__added": "C-38414r623705_chk",
          "documentable__added": false,
          "rid": "SV-235195r961656_rule"
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "descs": {}
      }
    }
  },
  "rawDiff": {
    "addedControlIDs": [
      "SV-265876"
    ],
    "removedControlIDs": [
      "SV-235171",
      "SV-235172"
    ],
    "renamedControlIDs": {},
    "changedControlIDs": [
      "SV-235095",
      "SV-235096",
      "SV-235097",
      "SV-235098",
      "SV-235099",
      "SV-235100",
      "SV-235101",
      "SV-235102",
      "SV-235103",
      "SV-235104",
      "SV-235105",
      "SV-235106",
      "SV-235107",
      "SV-235108",
      "SV-235109",
      "SV-235110",
      "SV-235111",
      "SV-235112",
      "SV-235113",
      "SV-235114",
      "SV-235115",
      "SV-235116",
      "SV-235117",
      "SV-235118",
      "SV-235119",
      "SV-235120",
      "SV-235121",
      "SV-235122",
      "SV-235123",
      "SV-235124",
      "SV-235125",
      "SV-235126",
      "SV-235127",
      "SV-235128",
      "SV-235129",
      "SV-235130",
      "SV-235131",
      "SV-235132",
      "SV-235133",
      "SV-235134",
      "SV-235135",
      "SV-235136",
      "SV-235137",
      "SV-235138",
      "SV-235139",
      "SV-235140",
      "SV-235141",
      "SV-235142",
      "SV-235143",
      "SV-235144",
      "SV-235145",
      "SV-235146",
      "SV-235147",
      "SV-235148",
      "SV-235149",
      "SV-235150",
      "SV-235151",
      "SV-235152",
      "SV-235153",
      "SV-235154",
      "SV-235155",
      "SV-235156",
      "SV-235157",
      "SV-235158",
      "SV-235159",
      "SV-235160",
      "SV-235161",
      "SV-235162",
      "SV-235163",
      "SV-235164",
      "SV-235165",
      "SV-235166",
      "SV-235167",
      "SV-235168",
      "SV-235169",
      "SV-235170",
      "SV-235173",
      "SV-235174",
      "SV-235175",
      "SV-235176",
      "SV-235177",
      "SV-235178",
      "SV-235179",
      "SV-235180",
      "SV-235181",
      "SV-235182",
      "SV-235183",
      "SV-235184",
      "SV-235185",
      "SV-235186",
      "SV-235187",
      "SV-235188",
      "SV-235189",
      "SV-235190",
      "SV-235191",
      "SV-235192",
      "SV-235193",
      "SV-235194",
      "SV-235195"
    ],
    "addedControls": {
      "SV-265876": {
        "tags": {
          "check_id": "C-69795r999532_chk",
          "severity": "high",
          "gid": "V-265876",
          "rid": "SV-265876r999534_rule",
          "stig_id": "MYS8-00-012600",
          "gtitle": "SRG-APP-000456-DB-000400",
          "fix_id": "F-69699r999533_fix",
          "documentable": false,
          "cci": [
            "CCI-003376"
          ],
          "nist": [
            "SA-22 a"
          ]
        },
        "refs": [
          "DPMS Target Oracle MySQL 8.0"
        ],
        "id": "SV-265876",
        "title": "MySQL database products must be a version supported by the vendor.",
        "desc": "Unsupported commercial and database systems should not be used because fixes to newly identified bugs will not be implemented by the vendor. The lack of support can result in potential vulnerabilities.\n\nSystems at unsupported servicing levels or releases will not receive security updates for new vulnerabilities, which leaves them subject to exploitation.\n\nWhen maintenance updates and patches are no longer available, the database software is no longer considered supported and should be upgraded or decommissioned.",
        "impact": 0.7,
        "descs": {
          "check": "Review the version and release information.\n\nTo check the version of the installed MySQL, run the following SQL statement:\n\nselect @@version;\n\nThe result will show the version. For example:\n8.0.22-commercial\n\nAccess the vendor website or use other means to verify the version is still supported.\nOracle lifetime support: \nhttps://www.oracle.com/us/assets/lifetime-support-technology-069183.pdf\nScroll down to Oracle MySQL Releases (approximately page 28).\n\nIf the Oracle MySQL version or any of the software components are not supported by the vendor, this is a finding.",
          "fix": "Remove or decommission all unsupported software products.\n\nUpgrade unsupported DBMS or unsupported components to a supported version of the product."
        }
      }
    },
    "changedControls": {
      "SV-235095": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  query_accounts = %(\n  SELECT\n     user\n  FROM\n     mysql.user \n  WHERE\n     user not in \n     (\n        'mysql.infoschema',\n        'mysql.session',\n        'mysql.sys'\n     );\n     )\n\n  auth_plugins = %(\n  SELECT\n     plugin_name,\n     plugin_status \n  FROM\n     information_schema.plugins \n  WHERE\n     plugin_name LIKE '%ldap%' \n     OR plugin_name LIKE '%pam%' \n     OR plugin_name LIKE '%authentication_windows %';\n  )\n\n  auth_variables = %(\n  SELECT\n     VARIABLE_NAME,\n     VARIABLE_VALUE \n  FROM\n     performance_schema.global_variables \n  WHERE\n     VARIABLE_NAME LIKE 'auth%' ;\n  )\n\n  auth_plugins_installed = !sql_session.query(auth_plugins).results.empty?\n\n  if auth_plugins_installed\n    describe \"Manually review authentication variables are configured as per guidance\\n#{sql_session.query(auth_variables).output}\" do\n      skip \"Manually review authentication variables are configured as per guidance\\n#{sql_session.query(auth_variables).output}\"\n    end\n  else\n    describe \"No external authentication plugins found, therefore if native accounts are required, perform a manual review of native mysql users #{ sql_session.query(query_accounts).results.column('user') } documenting the need and justification; describing the measures taken to ensure the use of MySQL Server authentication is kept to a minimum; describing the measures taken to safeguard passwords; and listing or describing the MySQL logins used.\" do\n      skip \"No external authentication plugins found, therefore if native accounts are required, perform a manual review of native mysql users #{ sql_session.query(query_accounts).results.column('user') } documenting the need and justification; describing the measures taken to ensure the use of MySQL Server authentication is kept to a minimum; describing the measures taken to safeguard passwords; and listing or describing the MySQL logins used.\"\n    end\n  end",
        "tags": {
          "check_id__added": "C-38314r623405_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235095r638812_rule",
            "__new": "SV-235095r960768_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "MySQL Database Server 8.0 must integrate with an organization-level\nauthentication/access mechanism providing account management and automation for\nall users, groups, roles, and any other principals.",
          "__new": "MySQL Database Server 8.0 must integrate with an organization-level authentication/access mechanism providing account management and automation for all users, groups, roles, and any other principals."
        },
        "desc": {
          "__old": "Enterprise environments make account management for applications and\ndatabases challenging and complex. A manual process for account management\nfunctions adds the risk of a potential oversight or other error. Managing\naccounts for the same person in multiple places is inefficient and prone to\nproblems with consistency and synchronization.\n\n    A comprehensive application account management process that includes\nautomation helps to ensure accounts designated as requiring attention are\nconsistently and promptly addressed.\n\n    Examples include, but are not limited to, using automation to take action\non multiple accounts designated as inactive, suspended, or terminated, or by\ndisabling accounts located in non-centralized account stores, such as multiple\nservers.  Account management functions can also include: assignment of group or\nrole membership; identifying account type; specifying user access\nauthorizations (i.e., privileges); account removal, update, or termination; and\nadministrative alerts. The use of automated mechanisms can include, for\nexample: using email or text messaging to notify account managers when users\nare terminated or transferred; using the information system to monitor account\nusage; and using automated telephone notification to report atypical system\naccount usage.\n\n    The DBMS must be configured to automatically utilize organization-level\naccount management functions, and these functions must immediately enforce the\norganization's current account policy.\n\n    Automation may be comprised of differing technologies that when placed\ntogether contain an overall mechanism supporting an organization's automated\naccount management requirements.",
          "__new": "Enterprise environments make account management for applications and databases challenging and complex. A manual process for account management functions adds the risk of a potential oversight or other error. Managing accounts for the same person in multiple places is inefficient and prone to problems with consistency and synchronization.\n\nA comprehensive application account management process that includes automation helps to ensure accounts designated as requiring attention are consistently and promptly addressed. \n\nExamples include, but are not limited to, using automation to take action on multiple accounts designated as inactive, suspended, or terminated, or by disabling accounts located in non-centralized account stores, such as multiple servers.  Account management functions can also include: assignment of group or role membership; identifying account type; specifying user access authorizations (i.e., privileges); account removal, update, or termination; and administrative alerts. The use of automated mechanisms can include, for example: using email or text messaging to notify account managers when users are terminated or transferred; using the information system to monitor account usage; and using automated telephone notification to report atypical system account usage.\n\nThe DBMS must be configured to automatically utilize organization-level account management functions, and these functions must immediately enforce the organization's current account policy. \n\nAutomation may be comprised of differing technologies that when placed together contain an overall mechanism supporting an organization's automated account management requirements."
        },
        "descs": {
          "default__deleted": "Enterprise environments make account management for applications and\ndatabases challenging and complex. A manual process for account management\nfunctions adds the risk of a potential oversight or other error. Managing\naccounts for the same person in multiple places is inefficient and prone to\nproblems with consistency and synchronization.\n\n    A comprehensive application account management process that includes\nautomation helps to ensure accounts designated as requiring attention are\nconsistently and promptly addressed.\n\n    Examples include, but are not limited to, using automation to take action\non multiple accounts designated as inactive, suspended, or terminated, or by\ndisabling accounts located in non-centralized account stores, such as multiple\nservers.  Account management functions can also include: assignment of group or\nrole membership; identifying account type; specifying user access\nauthorizations (i.e., privileges); account removal, update, or termination; and\nadministrative alerts. The use of automated mechanisms can include, for\nexample: using email or text messaging to notify account managers when users\nare terminated or transferred; using the information system to monitor account\nusage; and using automated telephone notification to report atypical system\naccount usage.\n\n    The DBMS must be configured to automatically utilize organization-level\naccount management functions, and these functions must immediately enforce the\norganization's current account policy.\n\n    Automation may be comprised of differing technologies that when placed\ntogether contain an overall mechanism supporting an organization's automated\naccount management requirements.",
          "rationale__deleted": "",
          "check": {
            "__old": "Determine if an organization-level authentication/access mechanism\nproviding account management and automation for all users, groups, roles, and\nany other principals has been configured.\n\n    To determine if a MySQL Server has any external authentication plugins,\nconnect as a mysql administrator (root) and run the following query:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE '%ldap%' OR PLUGIN_NAME LIKE '%pam%' OR\nPLUGIN_NAME LIKE '%authentication_windows %';\n\n    One or more of the following plugins must be installed and in the listed\nresults:\n    authentication_ldap_simple\n    authentication_ldap_sasl\n    authentication_pam\n    authentication_windows\n\n    If at least one of the above plugins is not installed, then no\norganization-level authentication/access is in place, and this is a finding.\n\n    Depending on the plugin in use, review its configuration.\n\n    For a list of global variables, run the following query:\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables\n    WHERE VARIABLE_NAME LIKE 'auth%' ;\n\n    If the LDAP plugin is installed, check the ldap_host and mapping.\n\n    For the LDAP plugin, global variables showing the configuration for\nauthentication to ldap hosts and binding to organizational users should look\nsimilar to the following:\n    authentication_ldap_simple_server_host=127.0.0.1\n    authentication_ldap_simple_bind_base_dn=\"dc=example,dc=com\"\n    authentication_ldap_sasl_server_host=127.0.0.1\n    authentication_ldap_sasl_bind_base_dn=\"dc=example,dc=com\"\n\n    If the ldap_host is not a valid authentication host or the mapping to the\nbase_dn maps is not correct, this is a finding.\n\n    Determine the accounts (SQL Logins) managed by PAM. Run the statement:\n    SELECT `user`.`Host`,\n        `user`.`user`,\n        `user`.`plugin`,\n        `user`.`authentication_string`\n        from mysql.user where plugin like 'authentication_pam';\n\n    For PAM, the string consists of a PAM service name, optionally followed by\na PAM group mapping list consisting of one or more keyword/value pairs each\nspecifying a PAM group name and a MySQL user name.\n\n    If not defined, this is a finding.\n\n    If the windows plugin is installed, the organization mapping details will\nbe defined within the user \"authentication string\".\n\n    Determine the accounts (SQL logins) managed by Windows. Run the statement:\n    Review the accounts\n    SELECT user.Host,\n        `user`.`user`,\n        `user`.`plugin`,\n        `user`.`authentication_string`\n        from mysql.user where plugin like 'authentication_windows;\n\n    Verify that the Windows user, group, and windows role in the\nauthentication_string map to proper organizational users. If not, this is a\nfinding.\n\n    To determine the accounts (MySQL accounts) actually managed by MySQL\nServer. Run the statement:\n    SELECT `user`.`Host`,\n        `user`.`User`,\n        `user`.`plugin`,\n        `user`.`authentication_string`\n        from mysql.user where plugin not like 'auth%' and `user`.`User` not\nlike 'mysql.%';\n\n    If any accounts listed by the query are not listed in the documentation and\nauthorized, this is a finding.",
            "__new": "Determine if an organization-level authentication/access mechanism providing account management and automation for all users, groups, roles, and any other principals has been configured.\n\nTo determine if a MySQL Server has any external authentication plugins, connect as a mysql administrator (root) and run the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n       FROM INFORMATION_SCHEMA.PLUGINS\n       WHERE PLUGIN_NAME LIKE '%ldap%' OR PLUGIN_NAME LIKE '%pam%' OR PLUGIN_NAME LIKE '%authentication_windows %';\n\nOne or more of the following plugins must be installed and in the listed results:\nauthentication_ldap_simple\nauthentication_ldap_sasl\nauthentication_pam\nauthentication_windows\n\nIf at least one of the above plugins is not installed, then no organization-level authentication/access is in place, and this is a finding.\n\nDepending on the plugin in use, review its configuration.  \n\nFor a list of global variables, run the following query:\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables\nWHERE VARIABLE_NAME LIKE 'auth%' ;  \n\nIf the LDAP plugin is installed, check the ldap_host and mapping. \n\nFor the LDAP plugin, global variables showing the configuration for authentication to ldap hosts and binding to organizational users should look similar to the following:\nauthentication_ldap_simple_server_host=127.0.0.1\nauthentication_ldap_simple_bind_base_dn=\"dc=example,dc=com\"\nauthentication_ldap_sasl_server_host=127.0.0.1\nauthentication_ldap_sasl_bind_base_dn=\"dc=example,dc=com\"\n\nIf the ldap_host is not a valid authentication host or the mapping to the base_dn maps is not correct, this is a finding.\n\nDetermine the accounts (SQL Logins) managed by PAM. Run the statement: \nSELECT `user`.`Host`,\n    `user`.`user`,\n    `user`.`plugin`,\n    `user`.`authentication_string`\n    from mysql.user where plugin like 'authentication_pam';\n\nFor PAM, the string consists of a PAM service name, optionally followed by a PAM group mapping list consisting of one or more keyword/value pairs each specifying a PAM group name and a MySQL user name. \n\nIf not defined, this is a finding.\n\nIf the windows plugin is installed, the organization mapping details will be defined within the user \"authentication string\". \n\nDetermine the accounts (SQL logins) managed by Windows. Run the statement: \nReview the accounts\nSELECT `user`.`Host`,\n    `user`.`user`,\n    `user`.`plugin`,\n    `user`.`authentication_string`\n    from mysql.user where plugin like 'authentication_windows;\n\nVerify that the Windows user, group, and windows role in the authentication_string map to proper organizational users. If not, this is a finding.\n\nTo determine the accounts (MySQL accounts) actually managed by MySQL Server. Run the statement: \nSELECT `user`.`Host`,\n    `user`.`User`,\n    `user`.`plugin`,\n    `user`.`authentication_string`\n    from mysql.user where plugin not like 'auth%' and `user`.`User` not like 'mysql.%';\n\nIf any accounts listed by the query are not listed in the documentation and authorized, this is a finding."
          },
          "fix": {
            "__old": "Integrate MySQL database server 8.0 security with an organization-level\nauthentication/access mechanism using MySQL external authentication for\nMicrosoft AD or LDAP, or Linux PAMs thus providing account management for all\nusers, groups, roles, and any other principals.\n\n    If native mysql users are required, document the need and justification;\ndescribe the measures taken to ensure the use of MySQL Server authentication is\nkept to a minimum; describe the measures taken to safeguard passwords; list or\ndescribe the MySQL logins used.\n\n    For each MySQL database server 8.0 managed account that is not documented\nand approved, either transfer it to management by the external mechanism, or\ndocument the need for it and obtain approval, as appropriate.\n\n    Install appropriate external authentication plugin, for example to install\nLDAP.\n    INSTALL PLUGIN authentication_ldap_sasl\n      SONAME 'authentication_ldap_sasl.so';\n    INSTALL PLUGIN authentication_ldap_simple\n      SONAME 'authentication_ldap_simple.so';\n\n    Configure the plugin, for example:\n    SET PERSIST authentication_ldap_sasl_server_host='127.0.0.1';\n    SET PERSIST authentication_ldap_sasl_bind_base_dn='dc=example,dc=com';\n    SET PERSIST authentication_ldap_simple_server_host='127.0.0.1';\n    SET PERSIST authentication_ldap_simple_bind_base_dn='dc=example,dc=com';\n\n    Create users with proper organizational mapping, for example:\n    CREATE USER 'betsy'@'localhost'\n      IDENTIFIED WITH authentication_ldap_simple\n      BY 'uid=betsy_ldap,ou=People,dc=example,dc=com';\n\n    Assign appropriate permissions via grants on objects or to roles, etc. See\nhttps://dev.mysql.com/doc/refman/8.0/en/grant.html.\n    For example:\n    GRANT ALL ON db1.* TO 'betsy'@'localhost';\n    GRANT 'role1', 'role2' TO 'user1'@'localhost', 'user2'@'localhost';\n    GRANT SELECT ON world.* TO 'role3';\n\n    For accounts not required in the MySQL Server:\n    DROP USER <user_name>;",
            "__new": "Integrate MySQL database server 8.0 security with an organization-level authentication/access mechanism using MySQL external authentication for Microsoft AD or LDAP, or Linux PAMs thus providing account management for all users, groups, roles, and any other principals.\n\nIf native mysql users are required, document the need and justification; describe the measures taken to ensure the use of MySQL Server authentication is kept to a minimum; describe the measures taken to safeguard passwords; list or describe the MySQL logins used.\n\nFor each MySQL database server 8.0 managed account that is not documented and approved, either transfer it to management by the external mechanism, or document the need for it and obtain approval, as appropriate. \n\nInstall appropriate external authentication plugin, for example to install LDAP.     \nINSTALL PLUGIN authentication_ldap_sasl\n  SONAME 'authentication_ldap_sasl.so';\nINSTALL PLUGIN authentication_ldap_simple\n  SONAME 'authentication_ldap_simple.so';\n\nConfigure the plugin, for example:\nSET PERSIST authentication_ldap_sasl_server_host='127.0.0.1';\nSET PERSIST authentication_ldap_sasl_bind_base_dn='dc=example,dc=com';\nSET PERSIST authentication_ldap_simple_server_host='127.0.0.1';\nSET PERSIST authentication_ldap_simple_bind_base_dn='dc=example,dc=com';\n\nCreate users with proper organizational mapping, for example:\nCREATE USER 'betsy'@'localhost'\n  IDENTIFIED WITH authentication_ldap_simple\n  BY 'uid=betsy_ldap,ou=People,dc=example,dc=com';\n\nAssign appropriate permissions via grants on objects or to roles, etc. See  https://dev.mysql.com/doc/refman/8.0/en/grant.html.\nFor example:\nGRANT ALL ON db1.* TO 'betsy'@'localhost';\nGRANT 'role1', 'role2' TO 'user1'@'localhost', 'user2'@'localhost';\nGRANT SELECT ON world.* TO 'role3';\n\nFor accounts not required in the MySQL Server:\nDROP USER <user_name>;"
          }
        }
      },
      "SV-235096": {
        "describe__deleted": "  max_user_connections = input('max_user_connections')\n\n  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  global_concurrent_sessions = %(\n  SELECT\n     VARIABLE_NAME,\n     VARIABLE_VALUE \n  FROM\n     performance_schema.global_variables \n  WHERE\n     VARIABLE_NAME LIKE 'max_user_connections' ;\n  )\n\n  user_concurrent_sessions = %(\n  SELECT\n     user,\n     host,\n     max_user_connections \n  FROM\n     mysql.user \n  WHERE\n     user not like 'mysql.%' \n     and user not like 'root';\n  )\n\n  describe \"Global value of max_user_connections\" do\n    subject { sql_session.query(global_concurrent_sessions).results.column('variable_value') }\n    it { should_not cmp 0 }\n    it { should cmp <= max_user_connections }\n  end\n\n  if !input('aws_rds')\n    mysql_administrative_users = input('mysql_administrative_users')\n  else\n    mysql_administrative_users = input('mysql_administrative_users') + ['rdsadmin']\n  end\n\n  sql_session.query(user_concurrent_sessions).results.rows.each do |row|\n    unless mysql_administrative_users.include? row['user']\n      describe \"User value of max_user_connections for user:#{row['user']} host:#{row['host']}\" do\n        subject { row['max_user_connections'] }\n        it { should_not cmp 0 }\n        it { should cmp <= max_user_connections }\n      end\n    end\n  end",
        "tags": {
          "check_id__added": "C-38315r623408_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235096r638812_rule",
            "__new": "SV-235096r960735_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "MySQL Database Server 8.0  must limit the number of concurrent\nsessions to an organization-defined number per user for all accounts and/or\naccount types.",
          "__new": "MySQL Database Server 8.0  must limit the number of concurrent sessions to an organization-defined number per user for all accounts and/or account types."
        },
        "desc": {
          "__old": "Database management includes the ability to control the number of\nusers and user sessions utilizing a Database Management System (DBMS).\nUnlimited concurrent connections to the DBMS could allow a successful Denial of\nService (DoS) attack by exhausting connection resources; and a system can also\nfail or be degraded by an overload of legitimate users. Limiting the number of\nconcurrent sessions per user is helpful in reducing these risks.\n\n    This requirement addresses concurrent session control for a single account.\nIt does not address concurrent sessions by a single user via multiple system\naccounts; and it does not deal with the total number of sessions across all\naccounts.\n\n    The capability to limit the number of concurrent sessions per user must be\nconfigured in or added to the DBMS (for example, by use of a logon trigger),\nwhen this is technically feasible. Note that it is not sufficient to limit\nsessions via a web server or application server alone, because legitimate users\nand adversaries can potentially connect to the DBMS by other means.\n\n    The organization will need to define the maximum number of concurrent\nsessions by account type, by account, or a combination thereof.  In deciding on\nthe appropriate number, it is important to consider the work requirements of\nthe various types of users. For example, 2 might be an acceptable limit for\ngeneral users accessing the database via an application; but 10 might be too\nfew for a database administrator using a database management GUI tool, where\neach query tab and navigation pane may count as a separate session.\n\n    (Sessions may also be referred to as connections or logons, which for the\npurposes of this requirement, are synonyms.)",
          "__new": "Database management includes the ability to control the number of users and user sessions utilizing a Database Management System (DBMS). Unlimited concurrent connections to the DBMS could allow a successful Denial of Service (DoS) attack by exhausting connection resources; and a system can also fail or be degraded by an overload of legitimate users. Limiting the number of concurrent sessions per user is helpful in reducing these risks.\n\nThis requirement addresses concurrent session control for a single account. It does not address concurrent sessions by a single user via multiple system accounts; and it does not deal with the total number of sessions across all accounts.\n\nThe capability to limit the number of concurrent sessions per user must be configured in or added to the DBMS (for example, by use of a logon trigger), when this is technically feasible. Note that it is not sufficient to limit sessions via a web server or application server alone, because legitimate users and adversaries can potentially connect to the DBMS by other means.\n\nThe organization will need to define the maximum number of concurrent sessions by account type, by account, or a combination thereof.  In deciding on the appropriate number, it is important to consider the work requirements of the various types of users. For example, 2 might be an acceptable limit for general users accessing the database via an application; but 10 might be too few for a database administrator using a database management GUI tool, where each query tab and navigation pane may count as a separate session.\n\n(Sessions may also be referred to as connections or logons, which for the purposes of this requirement, are synonyms.)"
        },
        "descs": {
          "default__deleted": "Database management includes the ability to control the number of\nusers and user sessions utilizing a Database Management System (DBMS).\nUnlimited concurrent connections to the DBMS could allow a successful Denial of\nService (DoS) attack by exhausting connection resources; and a system can also\nfail or be degraded by an overload of legitimate users. Limiting the number of\nconcurrent sessions per user is helpful in reducing these risks.\n\n    This requirement addresses concurrent session control for a single account.\nIt does not address concurrent sessions by a single user via multiple system\naccounts; and it does not deal with the total number of sessions across all\naccounts.\n\n    The capability to limit the number of concurrent sessions per user must be\nconfigured in or added to the DBMS (for example, by use of a logon trigger),\nwhen this is technically feasible. Note that it is not sufficient to limit\nsessions via a web server or application server alone, because legitimate users\nand adversaries can potentially connect to the DBMS by other means.\n\n    The organization will need to define the maximum number of concurrent\nsessions by account type, by account, or a combination thereof.  In deciding on\nthe appropriate number, it is important to consider the work requirements of\nthe various types of users. For example, 2 might be an acceptable limit for\ngeneral users accessing the database via an application; but 10 might be too\nfew for a database administrator using a database management GUI tool, where\neach query tab and navigation pane may count as a separate session.\n\n    (Sessions may also be referred to as connections or logons, which for the\npurposes of this requirement, are synonyms.)",
          "rationale__deleted": "",
          "check": {
            "__old": "Determine whether the system documentation specifies limits on the number\nof concurrent MySQL database server 8.0 sessions.\n\n    Review the concurrent-sessions settings in the MySQL database server and/or\nthe applications using it, and/or the system software supporting it.\n\n    MySQL global variable max_user_connections  limits the number of\nsimultaneous connections that can be made by any given account.\n\n    To check global (default) concurrent-sessions settings in the MySQL\ndatabase server, run the following query:\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables\n    WHERE VARIABLE_NAME LIKE 'max_user_connections' ;\n\n    If the value of MAX_USER_CONNECTIONS is 0 (unlimited) or greater than the\nsite-specific maximum number of sessions, this is a finding.\n\n    Retrieve the settings for concurrent sessions for each user with the query:\n    SELECT user, host, max_user_connections\n    FROM mysql.user\n    WHERE user not like 'mysql.%' and user not like 'root';\n\n    If the user account has a nonzero MAX_USER_CONNECTIONS resource limit, the\nsession MAX_USER_CONNECTIONS value is set to that limit. Otherwise, the session\nmax_user_connections value is set to the global value.\n\n    If the DBMS settings for concurrent sessions for each user is greater than\nthe site-specific maximum number of sessions and nonzero, this is a finding.",
            "__new": "Determine whether the system documentation specifies limits on the number of concurrent MySQL database server 8.0 sessions.\n\nReview the concurrent-sessions settings in the MySQL database server and/or the applications using it, and/or the system software supporting it. \n\nMySQL global variable max_user_connections  limits the number of simultaneous connections that can be made by any given account.\n\nTo check global (default) concurrent-sessions settings in the MySQL database server, run the following query:\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables\nWHERE VARIABLE_NAME LIKE 'max_user_connections' ;\n\nIf the value of MAX_USER_CONNECTIONS is 0 (unlimited) or greater than the site-specific maximum number of sessions, this is a finding.\n \nRetrieve the settings for concurrent sessions for each user with the query: \nSELECT user, host, max_user_connections \nFROM mysql.user \nWHERE user not like 'mysql.%' and user not like 'root';\n\nIf the user account has a nonzero MAX_USER_CONNECTIONS resource limit, the session MAX_USER_CONNECTIONS value is set to that limit. Otherwise, the session max_user_connections value is set to the global value.\n\nIf the DBMS settings for concurrent sessions for each user is greater than the site-specific maximum number of sessions and nonzero, this is a finding."
          },
          "fix": {
            "__old": "The MySQL Database Server 8.0 is capable of enforcing this restriction. If\nnot configured to do so, configure it to do so.\n\n    Connect to the MySQL Database as an administrator.\n    To set the global default to 50:\n    SET PERSIST max_user_connections=50;\n\n    Additionally, max user connections can be set per user as well as for a\ngiven period of time.\n    GRANT ALL ON customer.* TO 'francis'@'localhost'\n    WITH MAX_CONNECTIONS_PER_HOUR 5;\n    MAX_USER_CONNECTIONS 2;",
            "__new": "The MySQL Database Server 8.0 is capable of enforcing this restriction. If not configured to do so, configure it to do so.\n\nConnect to the MySQL Database as an administrator.\nTo set the global default to 50: \nSET PERSIST max_user_connections=50;\n\nAdditionally, max user connections can be set per user as well as for a given period of time.\nGRANT ALL ON customer.* TO 'francis'@'localhost'\nWITH MAX_CONNECTIONS_PER_HOUR 5;\nMAX_USER_CONNECTIONS 2;"
          }
        }
      },
      "SV-235097": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  audit_log_path = input('audit_log_path')\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n  \n  audit_log_encryption = %(\n  SELECT\n     VARIABLE_NAME,\n     VARIABLE_VALUE \n  FROM\n     performance_schema.global_variables \n  WHERE\n     VARIABLE_NAME LIKE 'audit_log_encryption' ;\n  )\n\n  datadir = %(\n    SELECT\n       VARIABLE_NAME,\n       VARIABLE_VALUE \n    FROM\n       performance_schema.global_variables \n    WHERE\n       VARIABLE_NAME LIKE 'datadir';\n  )\n\n  describe \"Audit Log Plugin status\" do\n    subject { sql_session.query(audit_log_plugin).results.column('plugin_status') }\n    it { should cmp 'ACTIVE' }\n  end\n  \n  if !input('aws_rds')\n\n  describe \"audit_log_encryption config\" do\n    subject { sql_session.query(audit_log_encryption).results.column('variable_value') }\n    it { should cmp 'AES' }\n  end\n\n\n    audit_log_files = command(\"ls -d #{audit_log_path}\").stdout.split\n\n    describe \"List of audit_log files\" do\n      subject { audit_log_files }\n      it { should_not be_empty }\n    end\n\n    audit_log_files.each do |log_file|\n      describe file(log_file) do\n        its('path') { should match /.*[.]enc$/ }\n        its('owner') { should match /^[_]?mysql$/ }\n        its('group') { should match /^[_]?mysql$/ }\n        it { should_not be_more_permissive_than('0750') }\n      end\n    end\n\n    datadir_path = sql_session.query(datadir).results.column('variable_value').join\n\n    describe \"Data Directory: #{datadir_path}\" do\n      subject { directory(datadir_path) }\n      its('owner') { should match /^[_]?mysql$/ }\n      its('group') { should match /^[_]?mysql$/ }\n      it { should_not be_more_permissive_than('0750') }\n    end\n\n  end",
        "tags": {
          "check_id__added": "C-38316r623411_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235097r638812_rule",
            "__new": "SV-235097r960891_rule"
          },
          "nist": [
            [
              "-",
              "AU-3"
            ],
            [
              "+",
              "AU-3 a"
            ]
          ]
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "MySQL Database Server 8.0  must produce audit records containing\nsufficient information to establish what type of events occurred.",
          "__new": "MySQL Database Server 8.0  must produce audit records containing sufficient information to establish what type of events occurred."
        },
        "desc": {
          "__old": "Information system auditing capability is critical for accurate\nforensic analysis. Without establishing what type of event occurred, it would\nbe difficult to establish, correlate, and investigate the events relating to an\nincident or identify those responsible for one.\n\n    Audit record content that may be necessary to satisfy the requirement of\nthis policy includes, for example, time stamps, user/process identifiers, event\ndescriptions, success/fail indications, filenames involved, and access control\nor flow control rules invoked.\n\n    Associating event types with detected events in the application and audit\nlogs provides a means of investigating an attack; recognizing resource\nutilization or capacity thresholds; or identifying an improperly configured\napplication.\n\n    Database software is capable of a range of actions on data stored within\nthe database. It is important, for accurate forensic analysis, to know exactly\nwhat actions were performed. This requires specific information regarding the\nevent type to which an audit record refers. If event type information is not\nrecorded and stored with the audit record, the record itself is of very limited\nuse.\n\n    MySQL provides auditing using the MySQL Enterprise Audit Log Plugin. When\ninstalled, the audit plugin enables MySQL Server to produce a log file\ncontaining an audit record of server activity. The log contents include when\nclients connect and disconnect, and what actions they perform while connected,\nsuch as which databases and tables they access.",
          "__new": "Information system auditing capability is critical for accurate forensic analysis. Without establishing what type of event occurred, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nAudit record content that may be necessary to satisfy the requirement of this policy includes, for example, time stamps, user/process identifiers, event descriptions, success/fail indications, filenames involved, and access control or flow control rules invoked.\n\nAssociating event types with detected events in the application and audit logs provides a means of investigating an attack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application. \n\nDatabase software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type to which an audit record refers. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.\n\nMySQL provides auditing using the MySQL Enterprise Audit Log Plugin. When installed, the audit plugin enables MySQL Server to produce a log file containing an audit record of server activity. The log contents include when clients connect and disconnect, and what actions they perform while connected, such as which databases and tables they access."
        },
        "descs": {
          "default__deleted": "Information system auditing capability is critical for accurate\nforensic analysis. Without establishing what type of event occurred, it would\nbe difficult to establish, correlate, and investigate the events relating to an\nincident or identify those responsible for one.\n\n    Audit record content that may be necessary to satisfy the requirement of\nthis policy includes, for example, time stamps, user/process identifiers, event\ndescriptions, success/fail indications, filenames involved, and access control\nor flow control rules invoked.\n\n    Associating event types with detected events in the application and audit\nlogs provides a means of investigating an attack; recognizing resource\nutilization or capacity thresholds; or identifying an improperly configured\napplication.\n\n    Database software is capable of a range of actions on data stored within\nthe database. It is important, for accurate forensic analysis, to know exactly\nwhat actions were performed. This requires specific information regarding the\nevent type to which an audit record refers. If event type information is not\nrecorded and stored with the audit record, the record itself is of very limited\nuse.\n\n    MySQL provides auditing using the MySQL Enterprise Audit Log Plugin. When\ninstalled, the audit plugin enables MySQL Server to produce a log file\ncontaining an audit record of server activity. The log contents include when\nclients connect and disconnect, and what actions they perform while connected,\nsuch as which databases and tables they access.",
          "rationale__deleted": "",
          "check": {
            "__old": "Verify, using vendor and system documentation if necessary, that the\nDatabase Management System (DBMS) is configured to use MySQL auditing features,\nor that a third-party product or custom code is deployed and configured to\nsatisfy this requirement.\n\n    Check MySQL auditing to determine whether organization-defined auditable\nevents are being audited by the system.\n\n    SELECT PLUGIN_NAME, plugin_status FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'audit_log' ;\n          \n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:    \n    SELECT PLUGIN_NAME, plugin_status FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'SERVER_AUDIT' ;]\n          \n    If the results are not 'audit_log' and plugin_status='ACTIVE' , this is a\nfinding.\n\n    Next, determine if the audit log is encrypted:\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables\n    WHERE VARIABLE_NAME LIKE 'audit_log_encryption' ;\n\n    If nothing is returned or the value for audit_log_encryption is not AES,\nthis is a finding.\n[NOTE: Community Server using MariaDB audit plugin does not support the audit_log_encryption parameter]\n\n    Review the audit files in the file systems.\n\n    Run the following command using the audit log location from above and\nreview its output:\n    ls -l  <directory where audit log files are located>/audit*log*\n\n    For example, if the values returned by - \"select @@datadir,\n@@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\n    ls -l  /usr/local/mysql/data/audit.log\n    Example output:\n    -rw-r-----    1 _mysql  _mysql   3935888 Apr 25 12:34\naudit.20190425T173437.log.enc\n    -rw-r-----    1 _mysql  _mysql      2336 Apr 25 12:35\naudit.20190425T173527.log.enc\n    -rw-r-----    1 _mysql  _mysql  13763984 Apr 30 14:04 audit.log.enc\n\n    Next, verify the log files have set permissions the log_destination:\n    If the user owner is not \"mysql\", this is a finding.\n    If the group owner is not \"mysql\", this is a finding.\n    If the file is more permissive than \"640\", this is a finding.\n    Check that the files end with the \".enc\" file extension.  If they do not,\nthis means they are in plaintext, and this is a finding.\n\n    Run following command to verify the directory permissions and review its\noutput:\n    ls -l /usr/local/mysql/data\n\n    Example output:\n    drwxr-x---   _mysql  _mysql    1760 Apr 26 09:55 data\n\n    Next, verify the log files have set permissions for the log_destination:\n    If the user owner is not \"mysql\", this is a finding.\n    If the group owner is not \"mysql\", this is a finding.\n    If more permissive than \"750\", this is a finding.\n\n    If there are no audit log files, then organizational auditable events are\nnot being audited, and this is a finding.\n\n    To confirm that MySQL audit is capturing sufficient information to\nestablish the identity of the user/subject or process, perform a successful\nauditable action and an auditable action that results in an SQL error, and then\nview the results in the audit file, whichever is in use.\n\n    If no audit event is returned for the auditable actions just performed,\nthis is a finding.",
            "__new": "Verify, using vendor and system documentation if necessary, that the Database Management System (DBMS) is configured to use MySQL auditing features, or that a third-party product or custom code is deployed and configured to satisfy this requirement.\n\nCheck MySQL auditing to determine whether organization-defined auditable events are being audited by the system.\n\nSELECT PLUGIN_NAME, plugin_status FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit_log' ;\n\nIf the results are not 'audit_log' and plugin_status='ACTIVE' , this is a finding.\n\nNext, determine if the audit log is encrypted: \nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables\nWHERE VARIABLE_NAME LIKE 'audit_log_encryption' ;\n\nIf nothing is returned or the value for audit_log_encryption is not AES, this is a finding.\n\nReview the audit files in the file systems.\n\nRun the following command using the audit log location from above and review its output:\nls -l  <directory where audit log files are located>/audit*log*\n\nFor example, if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nls -l  /usr/local/mysql/data/audit.log\nExample output:\n-rw-r-----    1 _mysql  _mysql   3935888 Apr 25 12:34 audit.20190425T173437.log.enc\n-rw-r-----    1 _mysql  _mysql      2336 Apr 25 12:35 audit.20190425T173527.log.enc\n-rw-r-----    1 _mysql  _mysql  13763984 Apr 30 14:04 audit.log.enc\n\nNext, verify the log files have set permissions the log_destination:\nIf the user owner is not \"mysql\", this is a finding.\nIf the group owner is not \"mysql\", this is a finding.\nIf the file is more permissive than \"640\", this is a finding.\nCheck that the files end with the \".enc\" file extension.  If they do not, this means they are in plaintext, and this is a finding.\n\nRun following command to verify the directory permissions and review its output:\nls -l /usr/local/mysql/data\n\nExample output:\ndrwxr-x---   _mysql  _mysql    1760 Apr 26 09:55 data\n\nNext, verify the log files have set permissions for the log_destination:\nIf the user owner is not \"mysql\", this is a finding.\nIf the group owner is not \"mysql\", this is a finding.\nIf more permissive than \"750\", this is a finding.\n\nIf there are no audit log files, then organizational auditable events are not being audited, and this is a finding.\n\nTo confirm that MySQL audit is capturing sufficient information to establish the identity of the user/subject or process, perform a successful auditable action and an auditable action that results in an SQL error, and then view the results in the audit file, whichever is in use.\n\nIf no audit event is returned for the auditable actions just performed, this is a finding."
          },
          "fix": {
            "__old": "Configure DBMS auditing to audit standard and organization-defined\nauditable events, with the audit record to include what type of event occurred.\n\n    Use this process to ensure auditable events are captured:\n\n    Configure MySQL database server 8.0 for auditing and configure audit\nsettings to include required events as part of the audit record.\n\n    To install MySQL Enterprise Audit:\n    Run the audit_log_filter_linux_install.sql script located in the\nsharedirectory of your MySQL installation. This can be determined by running –\nselect @@basedir;\n    For example if the basedir is /usr/local/mysql\n    shell> bin/mysql -u root -p <\n/usr/local/mysql/share/audit_log_filter_linux_install.sql\n\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'audit%';\n    The value for audit_log should return ACTIVE.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for audit_log should return ACTIVE.]\n\n    To prevent the plugin from being removed at runtime, add the --audit-log\noption under the [mysqld] option group in the MySQL configuration file\n(/etc/my.cnf) with a setting of FORCE_PLUS_PERMANENT.\n\n    audit-log=FORCE_PLUS_PERMANENT\n\n    Restart the server to apply the configuration change.\n\n    By default, rule-based audit log filtering logs no auditable events for any\nusers. To produce log-everything behavior with rule-based filtering, create a\nfilter to enable logging of all events and assign it to the audit all accounts.\n\n    Run the following statements to filter all activity for all users:\n    SELECT audit_log_filter_set_filter('log_all', '{ \"filter\": { \"log\":\ntrue } }');\n    SELECT audit_log_filter_set_user('%', 'log_all');\n    SELECT audit_log_filter_set_user('%', 'log_all');",
            "__new": "Configure DBMS auditing to audit standard and organization-defined auditable events, with the audit record to include what type of event occurred. \n\nUse this process to ensure auditable events are captured:\n\nConfigure MySQL database server 8.0 for auditing and configure audit settings to include required events as part of the audit record.\n\nTo install MySQL Enterprise Audit:\nRun the audit_log_filter_linux_install.sql script located in the sharedirectory of your MySQL installation. This can be determined by running – select @@basedir;\nFor example if the basedir is /usr/local/mysql \nshell> bin/mysql -u root -p < /usr/local/mysql/share/audit_log_filter_linux_install.sql\n\nVerify the plugin installation by running:\nSELECT PLUGIN_NAME, PLUGIN_STATUS\n       FROM INFORMATION_SCHEMA.PLUGINS\n       WHERE PLUGIN_NAME LIKE 'audit%';\nThe value for audit_log should return ACTIVE.\n\nTo prevent the plugin from being removed at runtime, add the --audit-log option under the [mysqld] option group in the MySQL configuration file (/etc/my.cnf) with a setting of FORCE_PLUS_PERMANENT.\n\naudit-log=FORCE_PLUS_PERMANENT\n\nRestart the server to apply the configuration change.\n\nBy default, rule-based audit log filtering logs no auditable events for any users. To produce log-everything behavior with rule-based filtering, create a filter to enable logging of all events and assign it to the audit all accounts.\n\nRun the following statements to filter all activity for all users:\nSELECT audit_log_filter_set_filter('log_all', '{ \"filter\": { \"log\": true } }');\nSELECT audit_log_filter_set_user('%', 'log_all');\nSELECT audit_log_filter_set_user('%', 'log_all');"
          }
        }
      },
      "SV-235098": {
        "describe__deleted": "  describe 'Manually validate that documented audit requirements are satisfied.' do\n    skip 'Manually validate that documented audit requirements are satisfied.'\n  \n  end",
        "tags": {
          "check_id__added": "C-38317r623414_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235098r638812_rule",
            "__new": "SV-235098r960909_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must include additional, more detailed,\norganizationally defined information in the audit records for audit events\nidentified by type, location, or subject.",
          "__new": "The MySQL Database Server 8.0 must include additional, more detailed, organizationally defined information in the audit records for audit events identified by type, location, or subject."
        },
        "desc": {
          "__old": "Information system auditing capability is critical for accurate\nforensic analysis. Reconstruction of harmful events or forensic analysis is not\npossible if audit records do not contain enough information. To support\nanalysis, some types of events will need information to be logged that exceeds\nthe basic requirements of event type, time stamps, location, source, outcome,\nand user identity. If additional information is not available, it could\nnegatively impact forensic investigations into user actions or other malicious\nevents.\n\n    The organization must determine what additional information is required for\ncomplete analysis of the audited events. The additional information required is\ndependent on the type of information (e.g., sensitivity of the data and the\nenvironment within which it resides). At a minimum, the organization must\nemploy either full-text recording of privileged commands or the individual\nidentities of group users, or both. The organization must maintain audit trails\nin sufficient detail to reconstruct events to determine the cause and impact of\ncompromise.\n\n    Examples of detailed information the organization may require in audit\nrecords are full-text recording of privileged commands or the individual\nidentities of group account users.",
          "__new": "Information system auditing capability is critical for accurate forensic analysis. Reconstruction of harmful events or forensic analysis is not possible if audit records do not contain enough information. To support analysis, some types of events will need information to be logged that exceeds the basic requirements of event type, time stamps, location, source, outcome, and user identity. If additional information is not available, it could negatively impact forensic investigations into user actions or other malicious events.\n\nThe organization must determine what additional information is required for complete analysis of the audited events. The additional information required is dependent on the type of information (e.g., sensitivity of the data and the environment within which it resides). At a minimum, the organization must employ either full-text recording of privileged commands or the individual identities of group users, or both. The organization must maintain audit trails in sufficient detail to reconstruct events to determine the cause and impact of compromise. \n\nExamples of detailed information the organization may require in audit records are full-text recording of privileged commands or the individual identities of group account users."
        },
        "descs": {
          "default__deleted": "Information system auditing capability is critical for accurate\nforensic analysis. Reconstruction of harmful events or forensic analysis is not\npossible if audit records do not contain enough information. To support\nanalysis, some types of events will need information to be logged that exceeds\nthe basic requirements of event type, time stamps, location, source, outcome,\nand user identity. If additional information is not available, it could\nnegatively impact forensic investigations into user actions or other malicious\nevents.\n\n    The organization must determine what additional information is required for\ncomplete analysis of the audited events. The additional information required is\ndependent on the type of information (e.g., sensitivity of the data and the\nenvironment within which it resides). At a minimum, the organization must\nemploy either full-text recording of privileged commands or the individual\nidentities of group users, or both. The organization must maintain audit trails\nin sufficient detail to reconstruct events to determine the cause and impact of\ncompromise.\n\n    Examples of detailed information the organization may require in audit\nrecords are full-text recording of privileged commands or the individual\nidentities of group account users.",
          "rationale__deleted": "",
          "check": {
            "__old": "If a MySQL Server Audit is not in use for audit purposes, this is a finding\nunless a third-party product is being used that can perform detailed auditing\nfor MySQL Server.\n\n    Review system documentation to determine whether MySQL Server is required\nto audit any events and any fields, in addition to those in the standard audit.\n\n    If there are none specified, this is not a finding.\n\n    If MySQL Server Audit is in use, compare the audit specification(s) with\nthe documented requirements.\n\n    If any such requirement is not satisfied by the audit specification(s) (or\nby supplemental, locally-deployed mechanisms), this is a finding.",
            "__new": "If a MySQL Server Audit is not in use for audit purposes, this is a finding unless a third-party product is being used that can perform detailed auditing for MySQL Server. \n\nReview system documentation to determine whether MySQL Server is required to audit any events and any fields, in addition to those in the standard audit. \n\nIf there are none specified, this is not a finding. \n\nIf MySQL Server Audit is in use, compare the audit specification(s) with the documented requirements. \n\nIf any such requirement is not satisfied by the audit specification(s) (or by supplemental, locally-deployed mechanisms), this is a finding."
          },
          "fix": {
            "__old": "Design and deploy an audit configuration that captures all auditable events\nand data items.\n\n    Create rule\n    SELECT audit_log_filter_set_filter('log_all', '{ \"filter\": { \"log\":\ntrue } }');\n    SELECT audit_log_filter_set_user('%', 'log_all');\n\n    If a third-party tool is used for auditing, it must contain all the\nrequired information including, but not limited to, events, type, location,\nsubject, date and time and by whom the change occurred.\n\n    Implement additional custom audits to capture the additional\norganizationally required information.",
            "__new": "Design and deploy an audit configuration that captures all auditable events and data items. \n\nCreate rule\nSELECT audit_log_filter_set_filter('log_all', '{ \"filter\": { \"log\": true } }');\nSELECT audit_log_filter_set_user('%', 'log_all');\n\nIf a third-party tool is used for auditing, it must contain all the required information including, but not limited to, events, type, location, subject, date and time and by whom the change occurred. \n\nImplement additional custom audits to capture the additional organizationally required information."
          }
        }
      },
      "SV-235099": {
        "describe__deleted": "  if !input('aws_rds')\n\n  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  audit_log_path = input('audit_log_path')\n\n  datadir = %(\n    SELECT\n       VARIABLE_NAME,\n       VARIABLE_VALUE \n    FROM\n       performance_schema.global_variables \n    WHERE\n       VARIABLE_NAME LIKE 'datadir';\n  )\n\n    audit_log_files = command(\"ls -d #{audit_log_path}\").stdout.split\n\n    describe \"List of audit_log files\" do\n      subject { audit_log_files }\n      it { should_not be_empty }\n    end\n\n    audit_log_files.each do |log_file|\n      describe file(log_file) do\n        its('owner') { should match /^[_]?mysql$/ }\n        its('group') { should match /^[_]?mysql$/ }\n        it { should_not be_more_permissive_than('0750') }\n      end\n    end\n\n    datadir_path = sql_session.query(datadir).results.column('variable_value').join\n\n    describe \"Data Directory: #{datadir_path}\" do\n      subject { directory(datadir_path) }\n      its('owner') { should match /^[_]?mysql$/ }\n      its('group') { should match /^[_]?mysql$/ }\n      it { should_not be_more_permissive_than('0750') }\n    end\n\n  else\n    impact 0.0\n    describe 'Not applicable since these requirements are handled within AWS RDS' do\n      skip 'Not applicable since these requirements are handled within AWS RDS'\n    end\n  end",
        "tags": {
          "check_id__added": "C-38318r623417_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235099r638812_rule",
            "__new": "SV-235099r960930_rule"
          },
          "nist": [
            [
              "-",
              "AU-9"
            ],
            [
              "+",
              "AU-9 a"
            ]
          ]
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The audit information produced by the MySQL Database Server 8.0 must\nbe protected from unauthorized read access.",
          "__new": "The audit information produced by the MySQL Database Server 8.0 must be protected from unauthorized read access."
        },
        "desc": {
          "__old": "If audit data were to become compromised, then competent forensic\nanalysis and discovery of the true source of potentially malicious system\nactivity is difficult, if not impossible, to achieve. In addition, access to\naudit records provides information an attacker could potentially use to their\nadvantage.\n\n    To ensure the veracity of audit data, the information system and/or the\napplication must protect audit information from any and all unauthorized\naccess. This includes read, write, copy, etc.\n\n    This requirement can be achieved through multiple methods, which will\ndepend upon system architecture and design. Some commonly employed methods\ninclude ensuring log files enjoy the proper file system permissions utilizing\nfile system protections and limiting log data location.\n\n    Additionally, applications with user interfaces to audit records should not\nallow for the unfettered manipulation of or access to those records via the\napplication. If the application provides access to the audit data, the\napplication becomes accountable for ensuring that audit information is\nprotected from unauthorized access.\n\n    Audit information includes all information (e.g., audit records, audit\nsettings, and audit reports) needed to successfully audit information system\nactivity.\n\n    If the value of audit_log_file is a relative path name, the plugin\ninterprets it relative to the data directory. If the value is a full path name,\nthe plugin uses the value as is. A full path name may be useful if it is\ndesirable to locate audit files on a separate file system or directory. For\nsecurity reasons, write the audit log file to a directory accessible only to\nthe MySQL server and to users with a legitimate reason to view the log.",
          "__new": "If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult, if not impossible, to achieve. In addition, access to audit records provides information an attacker could potentially use to their advantage.\n\nTo ensure the veracity of audit data, the information system and/or the application must protect audit information from any and all unauthorized access. This includes read, write, copy, etc.\n\nThis requirement can be achieved through multiple methods, which will depend upon system architecture and design. Some commonly employed methods include ensuring log files enjoy the proper file system permissions utilizing file system protections and limiting log data location. \n\nAdditionally, applications with user interfaces to audit records should not allow for the unfettered manipulation of or access to those records via the application. If the application provides access to the audit data, the application becomes accountable for ensuring that audit information is protected from unauthorized access.\n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.\n\nIf the value of audit_log_file is a relative path name, the plugin interprets it relative to the data directory. If the value is a full path name, the plugin uses the value as is. A full path name may be useful if it is desirable to locate audit files on a separate file system or directory. For security reasons, write the audit log file to a directory accessible only to the MySQL server and to users with a legitimate reason to view the log."
        },
        "descs": {
          "default__deleted": "If audit data were to become compromised, then competent forensic\nanalysis and discovery of the true source of potentially malicious system\nactivity is difficult, if not impossible, to achieve. In addition, access to\naudit records provides information an attacker could potentially use to their\nadvantage.\n\n    To ensure the veracity of audit data, the information system and/or the\napplication must protect audit information from any and all unauthorized\naccess. This includes read, write, copy, etc.\n\n    This requirement can be achieved through multiple methods, which will\ndepend upon system architecture and design. Some commonly employed methods\ninclude ensuring log files enjoy the proper file system permissions utilizing\nfile system protections and limiting log data location.\n\n    Additionally, applications with user interfaces to audit records should not\nallow for the unfettered manipulation of or access to those records via the\napplication. If the application provides access to the audit data, the\napplication becomes accountable for ensuring that audit information is\nprotected from unauthorized access.\n\n    Audit information includes all information (e.g., audit records, audit\nsettings, and audit reports) needed to successfully audit information system\nactivity.\n\n    If the value of audit_log_file is a relative path name, the plugin\ninterprets it relative to the data directory. If the value is a full path name,\nthe plugin uses the value as is. A full path name may be useful if it is\ndesirable to locate audit files on a separate file system or directory. For\nsecurity reasons, write the audit log file to a directory accessible only to\nthe MySQL server and to users with a legitimate reason to view the log.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review locations of audit logs, both internal to the database and database\naudit logs located at the operating system level.\n\n    Verify there are appropriate controls and permissions to protect the audit\ninformation from unauthorized access.\n\n    Run this script in the database to find the path and file name:\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables\n    WHERE VARIABLE_NAME LIKE 'audit_log_file';\n\n    If there is no path for audit_log_file, then the audit files are located in\nthe datadir. Run the this script to find the data directory:\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables\n    WHERE VARIABLE_NAME LIKE 'datadir';\n\n    From the OS command line, run:\n    ls -l <directory where audit log files are located>\n    ls -l <directory where audit log files are located> | grep -i\n<audit_file_name>\n    For example if the values returned by - \"select @@datadir,\n@@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\n    ls -l  /usr/local/mysql/data/\n\n    See below for an example:\n    Note: .enc file extension means the files are encrypted.\n\n    ls -l  <directory where audit log files are located>/ | grep -i audit\n    -rw-r-----    1 _mysql  _mysql  10083871 Apr 16 15:38\naudit.20190416T203832.log\n    -rw-r-----    1 _mysql  _mysql    398709 Apr 18 10:34\naudit.20190418T153446.log\n    -rw-r-----    1 _mysql  _mysql     15237 Apr 18 10:44\naudit.20190418T154402.log\n    -rw-r-----    1 _mysql  _mysql    876206 Apr 24 14:00\naudit.20190424T190008.log\n    -rw-r-----    1 _mysql  _mysql     30208 Apr 24 14:10\naudit.20190424T191044.log.enc\n\n    If the owner and group are not \"mysql\" or \"_mysql\", this is a finding.\n\n    If the directory or file permissions are more permissive than owner having\nRead/Write (RW) and group having Read (R) access to the audit files, aka\n\"750\", this is a finding.",
            "__new": "Review locations of audit logs, both internal to the database and database audit logs located at the operating system level.\n\nVerify there are appropriate controls and permissions to protect the audit information from unauthorized access.\n\nRun this script in the database to find the path and file name:\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables\nWHERE VARIABLE_NAME LIKE 'audit_log_file';\n\nIf there is no path for audit_log_file, then the audit files are located in the datadir. Run the this script to find the data directory:\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables\nWHERE VARIABLE_NAME LIKE 'datadir';\n\nFrom the OS command line, run: \nls -l <directory where audit log files are located>\nls -l <directory where audit log files are located> | grep -i <audit_file_name>\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nls -l  /usr/local/mysql/data/\n\nSee below for an example:\nNote: .enc file extension means the files are encrypted.\n\nls -l  <directory where audit log files are located>/ | grep -i audit\n-rw-r-----    1 _mysql  _mysql  10083871 Apr 16 15:38 audit.20190416T203832.log\n-rw-r-----    1 _mysql  _mysql    398709 Apr 18 10:34 audit.20190418T153446.log\n-rw-r-----    1 _mysql  _mysql     15237 Apr 18 10:44 audit.20190418T154402.log\n-rw-r-----    1 _mysql  _mysql    876206 Apr 24 14:00 audit.20190424T190008.log\n-rw-r-----    1 _mysql  _mysql     30208 Apr 24 14:10 audit.20190424T191044.log.enc\n\nIf the owner and group are not \"mysql\" or \"_mysql\", this is a finding.\n\nIf the directory or file permissions are more permissive than owner having Read/Write (RW) and group having Read (R) access to the audit files, aka \"750\", this is a finding."
          },
          "fix": {
            "__old": "Apply controls and modify permissions to protect database audit log data\nfrom unauthorized access, whether stored in the database itself or at the OS\nlevel.\n\n    sudo vi /etc/my.cnf\n    [mysqld]\n    audit-log=FORCE_PLUS_PERMANENT\n    audit-log-format=JSON\n    audit-log-encryption=AES\n\n    After changing the my.cnf, restart the server.\n\n    If not performed already, set the audit log password.\n    SELECT audit_log_encryption_password_set(password);\n\n    Set appropriate permissions on the directory and audit files.\n    sudo chown mysql <audit directory path>\n    sudo chgrp mysql <audit directory path>\n    Change permissions\n    chmod 750 <directory path>",
            "__new": "Apply controls and modify permissions to protect database audit log data from unauthorized access, whether stored in the database itself or at the OS level.\n\nsudo vi /etc/my.cnf\n[mysqld]\naudit-log=FORCE_PLUS_PERMANENT\naudit-log-format=JSON\naudit-log-encryption=AES\n\nAfter changing the my.cnf, restart the server.\n\nIf not performed already, set the audit log password.\nSELECT audit_log_encryption_password_set(password);\n\nSet appropriate permissions on the directory and audit files.\nsudo chown mysql <audit directory path>\nsudo chgrp mysql <audit directory path>\nChange permissions \nchmod 750 <directory path>"
          }
        }
      },
      "SV-235100": {
        "describe__deleted": "  if !input('aws_rds')\n\n  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  audit_log_path = input('audit_log_path')\n\n  datadir = %(\n    SELECT\n       VARIABLE_NAME,\n       VARIABLE_VALUE \n    FROM\n       performance_schema.global_variables \n    WHERE\n       VARIABLE_NAME LIKE 'datadir';\n  )\n\n    audit_log_files = command(\"ls -d #{audit_log_path}\").stdout.split\n\n    describe \"List of audit_log files\" do\n      subject { audit_log_files }\n      it { should_not be_empty }\n    end\n\n    audit_log_files.each do |log_file|\n      describe file(log_file) do\n        its('owner') { should match /^[_]?mysql$/ }\n        its('group') { should match /^[_]?mysql$/ }\n        it { should_not be_more_permissive_than('0750') }\n      end\n    end\n\n    datadir_path = sql_session.query(datadir).results.column('variable_value').join\n\n    describe \"Data Directory: #{datadir_path}\" do\n      subject { directory(datadir_path) }\n      its('owner') { should match /^[_]?mysql$/ }\n      its('group') { should match /^[_]?mysql$/ }\n      it { should_not be_more_permissive_than('0750') }\n    end\n  else\n    impact 0.0\n    describe 'Not applicable since these requirements are handled within AWS RDS' do\n      skip 'Not applicable since these requirements are handled within AWS RDS'\n    end\n  end",
        "tags": {
          "check_id__added": "C-38319r623420_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235100r638812_rule",
            "__new": "SV-235100r960933_rule"
          },
          "nist": [
            [
              "-",
              "AU-9"
            ],
            [
              "+",
              "AU-9 a"
            ]
          ]
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The audit information produced by the MySQL Database Server 8.0 must\nbe protected from unauthorized modification.",
          "__new": "The audit information produced by the MySQL Database Server 8.0 must be protected from unauthorized modification."
        },
        "desc": {
          "__old": "If audit data were to become compromised, then competent forensic\nanalysis and discovery of the true source of potentially malicious system\nactivity is impossible to achieve.\n\n    To ensure the veracity of audit data the information system and/or the\napplication must protect audit information from unauthorized modification.\n\n    This requirement can be achieved through multiple methods that will depend\nupon system architecture and design. Some commonly employed methods include\nensuring log files enjoy the proper file system permissions and limiting log\ndata locations.\n\n    Applications providing a user interface to audit data will leverage user\npermissions and roles identifying the user accessing the data and the\ncorresponding rights the user enjoys to make access decisions regarding the\nmodification of audit data.\n\n    Audit information includes all information (e.g., audit records, audit\nsettings, and audit reports) needed to successfully audit information system\nactivity.\n\n    Modification of database audit data could mask the theft of, or the\nunauthorized modification of, sensitive data stored in the database.",
          "__new": "If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve. \n\nTo ensure the veracity of audit data the information system and/or the application must protect audit information from unauthorized modification.  \n\nThis requirement can be achieved through multiple methods that will depend upon system architecture and design. Some commonly employed methods include ensuring log files enjoy the proper file system permissions and limiting log data locations.  \n\nApplications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights the user enjoys to make access decisions regarding the modification of audit data.\n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity. \n\nModification of database audit data could mask the theft of, or the unauthorized modification of, sensitive data stored in the database."
        },
        "descs": {
          "default__deleted": "If audit data were to become compromised, then competent forensic\nanalysis and discovery of the true source of potentially malicious system\nactivity is impossible to achieve.\n\n    To ensure the veracity of audit data the information system and/or the\napplication must protect audit information from unauthorized modification.\n\n    This requirement can be achieved through multiple methods that will depend\nupon system architecture and design. Some commonly employed methods include\nensuring log files enjoy the proper file system permissions and limiting log\ndata locations.\n\n    Applications providing a user interface to audit data will leverage user\npermissions and roles identifying the user accessing the data and the\ncorresponding rights the user enjoys to make access decisions regarding the\nmodification of audit data.\n\n    Audit information includes all information (e.g., audit records, audit\nsettings, and audit reports) needed to successfully audit information system\nactivity.\n\n    Modification of database audit data could mask the theft of, or the\nunauthorized modification of, sensitive data stored in the database.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review locations of audit logs, both internal to the database and database\naudit logs located at the operating system level.\n\n    Verify there are appropriate controls and permissions to protect the audit\ninformation from unauthorized access.\n\n    Run this script in the database to find the path and file name:\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables\n    WHERE VARIABLE_NAME LIKE 'audit_log_file';\n\n    If there is no path for audit_log_file then the audit files are located in\nthe datadir. Run the this script to find the data directory:\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables\n    WHERE VARIABLE_NAME LIKE 'datadir';\n\n    From the OS command line, run:\n    ls -l <directory where audit log files are located>\n    ls -l <directory where audit log files are located> | grep -i\n<audit_file_name>\n    For example if the values returned by - \"select @@datadir,\n@@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\n    ls -l  /usr/local/mysql/data/audit\n\n    See below for an example:\n    Note: .enc file extension means the files are encrypted.\n\n    ls -l  <directory where audit log files are located>/ | grep -i audit\n    -rw-r-----    1 _mysql  _mysql  10083871 Apr 16 15:38\naudit.20190416T203832.log\n    -rw-r-----    1 _mysql  _mysql    398709 Apr 18 10:34\naudit.20190418T153446.log\n    -rw-r-----    1 _mysql  _mysql     15237 Apr 18 10:44\naudit.20190418T154402.log\n    -rw-r-----    1 _mysql  _mysql    876206 Apr 24 14:00\naudit.20190424T190008.log\n    -rw-r-----    1 _mysql  _mysql     30208 Apr 24 14:10\naudit.20190424T191044.log.enc\n\n    If the owner and group are not \"mysql\" or\" _mysql\", this is a finding.\n\n    If the directory or file permissions are more permissive than owner having\nRead/Write (RW) and group having Read (R) access to the audit files, aka\n\"750\", this is a finding.",
            "__new": "Review locations of audit logs, both internal to the database and database audit logs located at the operating system level.\n\nVerify there are appropriate controls and permissions to protect the audit information from unauthorized access.\n\nRun this script in the database to find the path and file name:\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables\nWHERE VARIABLE_NAME LIKE 'audit_log_file';\n\nIf there is no path for audit_log_file then the audit files are located in the datadir. Run the this script to find the data directory:\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables\nWHERE VARIABLE_NAME LIKE 'datadir';\n\nFrom the OS command line, run: \nls -l <directory where audit log files are located>\nls -l <directory where audit log files are located> | grep -i <audit_file_name>\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nls -l  /usr/local/mysql/data/audit\n\nSee below for an example:\nNote: .enc file extension means the files are encrypted.\n\nls -l  <directory where audit log files are located>/ | grep -i audit\n-rw-r-----    1 _mysql  _mysql  10083871 Apr 16 15:38 audit.20190416T203832.log\n-rw-r-----    1 _mysql  _mysql    398709 Apr 18 10:34 audit.20190418T153446.log\n-rw-r-----    1 _mysql  _mysql     15237 Apr 18 10:44 audit.20190418T154402.log\n-rw-r-----    1 _mysql  _mysql    876206 Apr 24 14:00 audit.20190424T190008.log\n-rw-r-----    1 _mysql  _mysql     30208 Apr 24 14:10 audit.20190424T191044.log.enc\n\nIf the owner and group are not \"mysql\" or\" _mysql\", this is a finding.\n\nIf the directory or file permissions are more permissive than owner having Read/Write (RW) and group having Read (R) access to the audit files, aka \"750\", this is a finding."
          },
          "fix": {
            "__old": "Apply controls and modify permissions to protect database audit log data\nfrom unauthorized access, whether stored in the database itself or at the OS\nlevel.\n\n    sudo vi /etc/my.cnf\n    [mysqld]\n    audit-log=FORCE_PLUS_PERMANENT\n    audit-log-format=JSON\n    audit-log-encryption=AES\n\n    After changing the my.cnf restart the server.\n\n    If not performed already, set the audit log password.\n    SELECT audit_log_encryption_password_set(password);\n\n    Set appropriate permissions on the directory and audit files.\n    sudo chown mysql <audit directory path>\n    sudo chgrp mysql <audit directory path>\n    Change permissions\n    chmod 750 <directory path>",
            "__new": "Apply controls and modify permissions to protect database audit log data from unauthorized access, whether stored in the database itself or at the OS level.\n\nsudo vi /etc/my.cnf\n[mysqld]\naudit-log=FORCE_PLUS_PERMANENT\naudit-log-format=JSON\naudit-log-encryption=AES\n\nAfter changing the my.cnf restart the server.\n\nIf not performed already, set the audit log password.\nSELECT audit_log_encryption_password_set(password);\n\nSet appropriate permissions on the directory and audit files.\nsudo chown mysql <audit directory path>\nsudo chgrp mysql <audit directory path>\nChange permissions \nchmod 750 <directory path>"
          }
        }
      },
      "SV-235101": {
        "describe__deleted": "  if !input('aws_rds')\n  \n  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  audit_log_path = input('audit_log_path')\n\n  datadir = %(\n    SELECT\n       VARIABLE_NAME,\n       VARIABLE_VALUE \n    FROM\n       performance_schema.global_variables \n    WHERE\n       VARIABLE_NAME LIKE 'datadir';\n  )\n\n    audit_log_files = command(\"ls -d #{audit_log_path}\").stdout.split\n\n    describe \"List of audit_log files\" do\n      subject { audit_log_files }\n      it { should_not be_empty }\n    end\n\n    audit_log_files.each do |log_file|\n      describe file(log_file) do\n        its('owner') { should match /^[_]?mysql$/ }\n        its('group') { should match /^[_]?mysql$/ }\n        it { should_not be_more_permissive_than('0750') }\n      end\n    end\n\n    datadir_path = sql_session.query(datadir).results.column('variable_value').join\n\n    describe \"Data Directory: #{datadir_path}\" do\n      subject { directory(datadir_path) }\n      its('owner') { should match /^[_]?mysql$/ }\n      its('group') { should match /^[_]?mysql$/ }\n      it { should_not be_more_permissive_than('0750') }\n    end\n  else\n    impact 0.0\n    describe 'Not applicable since these requirements are handled within AWS RDS' do\n      skip 'Not applicable since these requirements are handled within AWS RDS'\n    end\n  end",
        "tags": {
          "check_id__added": "C-38320r623423_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235101r638812_rule",
            "__new": "SV-235101r960936_rule"
          },
          "nist": [
            [
              "-",
              "AU-9"
            ],
            [
              "+",
              "AU-9 a"
            ]
          ]
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The audit information produced by the MySQL Database Server 8.0 must\nbe protected from unauthorized deletion.",
          "__new": "The audit information produced by the MySQL Database Server 8.0 must be protected from unauthorized deletion."
        },
        "desc": {
          "__old": "If audit data were to become compromised, then competent forensic\nanalysis and discovery of the true source of potentially malicious system\nactivity is impossible to achieve.\n\n    To ensure the veracity of audit data, the information system and/or the\napplication must protect audit information from unauthorized deletion. This\nrequirement can be achieved through multiple methods, which will depend upon\nsystem architecture and design.\n\n    Some commonly employed methods include ensuring log files enjoy the proper\nfile system permissions utilizing file system protections; restricting access;\nand backing up log data to ensure log data is retained.\n\n    Applications providing a user interface to audit data will leverage user\npermissions and roles identifying the user accessing the data and the\ncorresponding rights the user enjoys in order make access decisions regarding\nthe deletion of audit data.\n\n    Audit information includes all information (e.g., audit records, audit\nsettings, and audit reports) needed to successfully audit information system\nactivity.\n\n    Deletion of database audit data could mask the theft of, or the\nunauthorized modification of, sensitive data stored in the database.",
          "__new": "If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve. \n\nTo ensure the veracity of audit data, the information system and/or the application must protect audit information from unauthorized deletion. This requirement can be achieved through multiple methods, which will depend upon system architecture and design.  \n\nSome commonly employed methods include ensuring log files enjoy the proper file system permissions utilizing file system protections; restricting access; and backing up log data to ensure log data is retained.  \n\nApplications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights the user enjoys in order make access decisions regarding the deletion of audit data.\n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity. \n\nDeletion of database audit data could mask the theft of, or the unauthorized modification of, sensitive data stored in the database."
        },
        "descs": {
          "default__deleted": "If audit data were to become compromised, then competent forensic\nanalysis and discovery of the true source of potentially malicious system\nactivity is impossible to achieve.\n\n    To ensure the veracity of audit data, the information system and/or the\napplication must protect audit information from unauthorized deletion. This\nrequirement can be achieved through multiple methods, which will depend upon\nsystem architecture and design.\n\n    Some commonly employed methods include ensuring log files enjoy the proper\nfile system permissions utilizing file system protections; restricting access;\nand backing up log data to ensure log data is retained.\n\n    Applications providing a user interface to audit data will leverage user\npermissions and roles identifying the user accessing the data and the\ncorresponding rights the user enjoys in order make access decisions regarding\nthe deletion of audit data.\n\n    Audit information includes all information (e.g., audit records, audit\nsettings, and audit reports) needed to successfully audit information system\nactivity.\n\n    Deletion of database audit data could mask the theft of, or the\nunauthorized modification of, sensitive data stored in the database.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review locations of audit logs, both internal to the database and database\naudit logs located at the operating system level.\n\n    Verify there are appropriate controls and permissions to protect the audit\ninformation from unauthorized access.\n\n    Run this script in the database to find the path and file name:\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables\n    WHERE VARIABLE_NAME LIKE 'audit_log_file';\n\n    If there is no path for audit_log_file then the audit files are located in\nthe datadir. Run the this script to find the data directory:\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables\n    WHERE VARIABLE_NAME LIKE 'datadir';\n\n    From the OS command line, run:\n    ls -l <directory where audit log files are located>\n    ls -l <directory where audit log files are located> | grep -i\n<audit_file_name>\n    For example if the values returned by - \"select @@datadir,\n@@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\n    ls -l  /usr/local/mysql/data/\n\n    See below for an example:\n    Note: .enc file extension means the files are encrypted.\n\n    ls -l  <directory where audit log files are located>/ | grep -i audit\n    -rw-r-----    1 _mysql  _mysql  10083871 Apr 16 15:38\naudit.20190416T203832.log\n    -rw-r-----    1 _mysql  _mysql    398709 Apr 18 10:34\naudit.20190418T153446.log\n    -rw-r-----    1 _mysql  _mysql     15237 Apr 18 10:44\naudit.20190418T154402.log\n    -rw-r-----    1 _mysql  _mysql    876206 Apr 24 14:00\naudit.20190424T190008.log\n    -rw-r-----    1 _mysql  _mysql     30208 Apr 24 14:10\naudit.20190424T191044.log.enc\n\n    If the owner and group are not \"mysql\" or \"_mysql\", this is a finding.\n\n    If the directory or file permissions are more permissive than owner having\nRead/Write (RW) and group having Read (R) access to the audit files, aka\n\"750\", this is a finding.",
            "__new": "Review locations of audit logs, both internal to the database and database audit logs located at the operating system level.\n\nVerify there are appropriate controls and permissions to protect the audit information from unauthorized access.\n\nRun this script in the database to find the path and file name:\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables\nWHERE VARIABLE_NAME LIKE 'audit_log_file';\n\nIf there is no path for audit_log_file then the audit files are located in the datadir. Run the this script to find the data directory:\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables\nWHERE VARIABLE_NAME LIKE 'datadir';\n\nFrom the OS command line, run: \nls -l <directory where audit log files are located>\nls -l <directory where audit log files are located> | grep -i <audit_file_name>\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nls -l  /usr/local/mysql/data/\n\nSee below for an example:\nNote: .enc file extension means the files are encrypted.\n\nls -l  <directory where audit log files are located>/ | grep -i audit\n-rw-r-----    1 _mysql  _mysql  10083871 Apr 16 15:38 audit.20190416T203832.log\n-rw-r-----    1 _mysql  _mysql    398709 Apr 18 10:34 audit.20190418T153446.log\n-rw-r-----    1 _mysql  _mysql     15237 Apr 18 10:44 audit.20190418T154402.log\n-rw-r-----    1 _mysql  _mysql    876206 Apr 24 14:00 audit.20190424T190008.log\n-rw-r-----    1 _mysql  _mysql     30208 Apr 24 14:10 audit.20190424T191044.log.enc\n\nIf the owner and group are not \"mysql\" or \"_mysql\", this is a finding.\n\nIf the directory or file permissions are more permissive than owner having Read/Write (RW) and group having Read (R) access to the audit files, aka \"750\", this is a finding."
          },
          "fix": {
            "__old": "Apply controls and modify permissions to protect database audit log data\nfrom unauthorized access, whether stored in the database itself or at the OS\nlevel.\n\n    sudo vi /etc/my.cnf\n    [mysqld]\n    audit-log=FORCE_PLUS_PERMANENT\n    audit-log-format=JSON\n    audit-log-encryption=AES\n\n    After changing the my.cnf, restart the server.\n\n    If not performed already, set the audit log password.\n    SELECT audit_log_encryption_password_set(password);\n\n    Set appropriate permissions on the directory and audit files.\n    sudo chown mysql <audit directory path>\n    sudo chgrp mysql <audit directory path>\n    Change permissions\n    chmod 750 <directory path>",
            "__new": "Apply controls and modify permissions to protect database audit log data from unauthorized access, whether stored in the database itself or at the OS level.\n\nsudo vi /etc/my.cnf\n[mysqld]\naudit-log=FORCE_PLUS_PERMANENT\naudit-log-format=JSON\naudit-log-encryption=AES\n\nAfter changing the my.cnf, restart the server.\n\nIf not performed already, set the audit log password.\nSELECT audit_log_encryption_password_set(password);\n\nSet appropriate permissions on the directory and audit files.\nsudo chown mysql <audit directory path>\nsudo chgrp mysql <audit directory path>\nChange permissions \nchmod 750 <directory path>"
          }
        }
      },
      "SV-235102": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  query_accounts = %(\n    SELECT\n       User,\n       Host \n    FROM\n       mysql.user;\n  )\n\n  accounts = sql_session.query(query_accounts).output\n\n  describe \"Manually review MySQL accounts and determine if any are shared accounts and \n  that they are compliant with the specified requirements.\\n#{accounts}\" do\n    skip \"Manually review MySQL accounts and determine if any are shared accounts and \n    that they are compliant with the specified requirements.\\n#{accounts}\" \n  end",
        "tags": {
          "check_id__added": "C-38321r623426_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235102r638812_rule",
            "__new": "SV-235102r960864_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must protect against a user falsely\nrepudiating having performed organization-defined actions.",
          "__new": "The MySQL Database Server 8.0 must protect against a user falsely repudiating having performed organization-defined actions."
        },
        "desc": {
          "__old": "Non-repudiation of actions taken is required to maintain data\nintegrity. Examples of particular actions taken by individuals include creating\ninformation, sending a message, approving information (e.g., indicating\nconcurrence or signing a contract), and receiving a message.\n\n    Non-repudiation protects against later claims by a user of not having\ncreated, modified, or deleted a particular data item or collection of data in\nthe database.\n\n    In designing a database, the organization must define the types of data and\nthe user actions that must be protected from repudiation. The implementation\nmust then include building audit features into the application data tables, and\nconfiguring DBMS audit tools to capture the necessary audit trail. Design and\nimplementation also must ensure that applications pass individual user\nidentification to the DBMS, even where the application connects to the DBMS\nwith a standard, group account.",
          "__new": "Non-repudiation of actions taken is required to maintain data integrity. Examples of particular actions taken by individuals include creating information, sending a message, approving information (e.g., indicating concurrence or signing a contract), and receiving a message. \n\nNon-repudiation protects against later claims by a user of not having created, modified, or deleted a particular data item or collection of data in the database.\n\nIn designing a database, the organization must define the types of data and the user actions that must be protected from repudiation. The implementation must then include building audit features into the application data tables, and configuring DBMS audit tools to capture the necessary audit trail. Design and implementation also must ensure that applications pass individual user identification to the DBMS, even where the application connects to the DBMS with a standard, group account."
        },
        "descs": {
          "default__deleted": "Non-repudiation of actions taken is required to maintain data\nintegrity. Examples of particular actions taken by individuals include creating\ninformation, sending a message, approving information (e.g., indicating\nconcurrence or signing a contract), and receiving a message.\n\n    Non-repudiation protects against later claims by a user of not having\ncreated, modified, or deleted a particular data item or collection of data in\nthe database.\n\n    In designing a database, the organization must define the types of data and\nthe user actions that must be protected from repudiation. The implementation\nmust then include building audit features into the application data tables, and\nconfiguring DBMS audit tools to capture the necessary audit trail. Design and\nimplementation also must ensure that applications pass individual user\nidentification to the DBMS, even where the application connects to the DBMS\nwith a standard, group account.",
          "rationale__deleted": "",
          "check": {
            "__old": "Obtain the list of authorized MySQL Server accounts in the system\ndocumentation.\n\n    Determine if any accounts are shared. A shared account is defined as a\nusername, hostname, and password that are used by multiple individuals to log\nin to SQL Server. An example of a shared account is the MySQL Server root\naccount – root@localhost.\n\n    If accounts are determined to be shared, determine if individuals are first\nindividually authenticated.\n\n    If individuals are not individually authenticated before using the shared\naccount (e.g., by the operating system or possibly by an application making\ncalls to the database), this is a finding.\n\n    The key is individual accountability. If this can be traced, this is not a\nfinding.\n\n    If accounts are determined to be shared, determine if they are directly\naccessible to end users. If so, this is a finding.\n\n    Review contents of audit logs, traces, and data tables to confirm the\nidentity of the individual user performing the action is captured.\n\n    If shared identifiers are found, and not accompanied by individual\nidentifiers, this is a finding.\n\n    Note: Privileged installation accounts like root@localhost may be required\nto be accessed by the DBA or other administrators for system maintenance. In\nthese cases, each use of the account must be logged in some manner to assign\naccountability for any actions taken during the use of the account.",
            "__new": "Obtain the list of authorized MySQL Server accounts in the system documentation.  \n\nDetermine if any accounts are shared. A shared account is defined as a username, hostname, and password that are used by multiple individuals to log in to SQL Server. An example of a shared account is the MySQL Server root account – root@localhost.\n\nIf accounts are determined to be shared, determine if individuals are first individually authenticated.  \n\nIf individuals are not individually authenticated before using the shared account (e.g., by the operating system or possibly by an application making calls to the database), this is a finding.  \n\nThe key is individual accountability. If this can be traced, this is not a finding.\n\nIf accounts are determined to be shared, determine if they are directly accessible to end users. If so, this is a finding.\n\nReview contents of audit logs, traces, and data tables to confirm the identity of the individual user performing the action is captured.\n\nIf shared identifiers are found, and not accompanied by individual identifiers, this is a finding.\n\nNote: Privileged installation accounts like root@localhost may be required to be accessed by the DBA or other administrators for system maintenance. In these cases, each use of the account must be logged in some manner to assign accountability for any actions taken during the use of the account."
          },
          "fix": {
            "__old": "Remove user-accessible shared accounts and use individual user IDs.\n\n    Build/configure applications to ensure successful individual authentication\nprior to shared account access.\n\n    Ensure each user's identity is received and used in audit data in all\nrelevant circumstances.\n\n    Design, develop, and implement a method to log use of any account to which\nmore than one person has access. Restrict interactive access to shared accounts\nto the fewest persons possible.",
            "__new": "Remove user-accessible shared accounts and use individual user IDs.\n\nBuild/configure applications to ensure successful individual authentication prior to shared account access.\n\nEnsure each user's identity is received and used in audit data in all relevant circumstances.\n\nDesign, develop, and implement a method to log use of any account to which more than one person has access. Restrict interactive access to shared accounts to the fewest persons possible."
          }
        }
      },
      "SV-235103": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n  \n  audit_log_encryption = %(\n  SELECT\n     VARIABLE_NAME,\n     VARIABLE_VALUE \n  FROM\n     performance_schema.global_variables \n  WHERE\n     VARIABLE_NAME LIKE 'audit_log_encryption' ;\n  )\n\n    describe \"Audit Log Plugin status\" do\n      subject { sql_session.query(audit_log_plugin).results.column('plugin_status') }\n      it { should cmp 'ACTIVE' }\n    end\n  \n  if !input('aws_rds')\n\n    describe \"audit_log_encryption config\" do\n      subject { sql_session.query(audit_log_encryption).results.column('variable_value') }\n      it { should cmp 'AES' }\n    end\n    \n  end",
        "tags": {
          "check_id__added": "C-38322r623429_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235103r638812_rule",
            "__new": "SV-235103r960879_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must be configured to provide audit\nrecord generation capability for DoD-defined auditable events within all\ndatabase components.",
          "__new": "The MySQL Database Server 8.0 must be configured to provide audit record generation capability for DoD-defined auditable events within all database components."
        },
        "desc": {
          "__old": "Without the capability to generate audit records, it would be\ndifficult to establish, correlate, and investigate the events relating to an\nincident or identify those responsible for one.\n\n    Audit records can be generated from various components within the Database\nManagement System (DBMS) (e.g., process, module). Certain specific application\nfunctionalities may be audited as well. The list of audited events is the set\nof events for which audits are to be generated. This set of events is typically\na subset of the list of all events for which the system is capable of\ngenerating audit records.\n\n    DoD has defined the list of events for which the DBMS will provide an audit\nrecord generation capability as the following:\n\n    (i) Successful and unsuccessful attempts to access, modify, or delete\nprivileges, security objects, security levels, or categories of information\n(e.g., classification levels);\n\n    (ii) Access actions, such as successful and unsuccessful logon attempts,\nprivileged activities, or other system-level access, starting and ending time\nfor user access to the system, concurrent logons from different workstations,\nsuccessful and unsuccessful accesses to objects, all program initiations, and\nall direct access to the information system; and\n\n    (iii) All account creation, modification, disabling, and termination\nactions.\n\n    Organizations may define additional events requiring continuous or ad hoc\nauditing.",
          "__new": "Without the capability to generate audit records, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nAudit records can be generated from various components within the Database Management System (DBMS) (e.g., process, module). Certain specific application functionalities may be audited as well. The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.\n\nDoD has defined the list of events for which the DBMS will provide an audit record generation capability as the following: \n\n(i) Successful and unsuccessful attempts to access, modify, or delete privileges, security objects, security levels, or categories of information (e.g., classification levels);\n\n(ii) Access actions, such as successful and unsuccessful logon attempts, privileged activities, or other system-level access, starting and ending time for user access to the system, concurrent logons from different workstations, successful and unsuccessful accesses to objects, all program initiations, and all direct access to the information system; and\n\n(iii) All account creation, modification, disabling, and termination actions.\n\nOrganizations may define additional events requiring continuous or ad hoc auditing."
        },
        "descs": {
          "default__deleted": "Without the capability to generate audit records, it would be\ndifficult to establish, correlate, and investigate the events relating to an\nincident or identify those responsible for one.\n\n    Audit records can be generated from various components within the Database\nManagement System (DBMS) (e.g., process, module). Certain specific application\nfunctionalities may be audited as well. The list of audited events is the set\nof events for which audits are to be generated. This set of events is typically\na subset of the list of all events for which the system is capable of\ngenerating audit records.\n\n    DoD has defined the list of events for which the DBMS will provide an audit\nrecord generation capability as the following:\n\n    (i) Successful and unsuccessful attempts to access, modify, or delete\nprivileges, security objects, security levels, or categories of information\n(e.g., classification levels);\n\n    (ii) Access actions, such as successful and unsuccessful logon attempts,\nprivileged activities, or other system-level access, starting and ending time\nfor user access to the system, concurrent logons from different workstations,\nsuccessful and unsuccessful accesses to objects, all program initiations, and\nall direct access to the information system; and\n\n    (iii) All account creation, modification, disabling, and termination\nactions.\n\n    Organizations may define additional events requiring continuous or ad hoc\nauditing.",
          "rationale__deleted": "",
          "check": {
            "__old": "Check MySQL auditing to determine whether organization-defined auditable\nevents are being audited by the system.\n\n    SELECT PLUGIN_NAME, plugin_status FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'audit_log' ;\n          \n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:    \n    SELECT PLUGIN_NAME, plugin_status FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'SERVER_AUDIT' ;]\n\n    If nothing is returned OR if the results are not \"audit_log\" and\n\"plugin_status='ACTIVE'\" , this is a finding.\n\n    Next determine if the audit lot is encrypted.\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables\n    WHERE VARIABLE_NAME LIKE 'audit_log_encryption' ;\n\n    If nothing is returned OR the value for audit_log_encryption is not\n\"AES\", this is a finding.\n[NOTE: Community Server using MariaDB audit plugin does not support the audit_log_encryption parameter]",
            "__new": "Check MySQL auditing to determine whether organization-defined auditable events are being audited by the system.\n\nSELECT PLUGIN_NAME, plugin_status FROM INFORMATION_SCHEMA.PLUGINS\n       WHERE PLUGIN_NAME LIKE 'audit_log' ;\n\nIf nothing is returned OR if the results are not \"audit_log\" and \"plugin_status='ACTIVE'\" , this is a finding.\n\nNext determine if the audit lot is encrypted. \nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables\nWHERE VARIABLE_NAME LIKE 'audit_log_encryption' ;\n\nIf nothing is returned OR the value for audit_log_encryption is not \"AES\", this is a finding."
          },
          "fix": {
            "__old": "Deploy a MySQL Database Server 8.0 that supports the DoD minimum set of\nauditable events.\n\n    Configure the MySQL Database Server 8.0 to generate audit records for at\nleast the DoD minimum set of events.\n\n    sudo vi /etc/my.cnf\n    [mysqld]\n    audit-log=FORCE_PLUS_PERMANENT\n    audit-log-format=JSON\n    audit-log-encryption=AES\n\n    After changing the my.cnf, restart the server.\n\n    SELECT audit_log_encryption_password_set(password);\n\n    Create auditing rules - for example:\n    Connect to MySQL and Use functions to define audit rules and audited users\naudit_log_filter_set,audit_log_filter_set_user\n\n    To log all auditable events:\n    SELECT audit_log_filter_set_filter('log_all', '{ \"filter\": { \"log\":\ntrue } }');\n\n    And to apply this log_all filter to all users:\n    SELECT audit_log_filter_set_user('%', 'log_all');",
            "__new": "Deploy a MySQL Database Server 8.0 that supports the DoD minimum set of auditable events.\n\nConfigure the MySQL Database Server 8.0 to generate audit records for at least the DoD minimum set of events.\n\nsudo vi /etc/my.cnf\n[mysqld]\naudit-log=FORCE_PLUS_PERMANENT\naudit-log-format=JSON\naudit-log-encryption=AES\n\nAfter changing the my.cnf, restart the server.\n\nSELECT audit_log_encryption_password_set(password);\n\nCreate auditing rules - for example:\nConnect to MySQL and Use functions to define audit rules and audited users  audit_log_filter_set,audit_log_filter_set_user\n\nTo log all auditable events:\nSELECT audit_log_filter_set_filter('log_all', '{ \"filter\": { \"log\": true } }');\n\nAnd to apply this log_all filter to all users:\nSELECT audit_log_filter_set_user('%', 'log_all');"
          }
        }
      },
      "SV-235104": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_admins = input('audit_admins')\n  else\n    audit_admins = input('audit_admins') + [\"'rdsadmin'@'localhost'\"]\n  end\n\n  query_audit_admins = %(\n    SELECT\n     * \n  FROM\n     INFORMATION_SCHEMA.USER_PRIVILEGES \n  where\n     PRIVILEGE_TYPE in \n     (\n        'AUDIT_ADMIN',\n        'SUPER'\n     );\n  )\n\n  describe \"List of configured audit admins\" do\n    subject { sql_session.query(query_audit_admins).results.column('grantee') }\n    it { should be_in audit_admins }\n  end",
        "tags": {
          "check_id__added": "C-38323r623432_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235104r638812_rule",
            "__new": "SV-235104r960882_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must allow only the Information System\nSecurity Manager (ISSM) (or individuals or roles appointed by the ISSM) to\nselect which auditable events are to be audited.",
          "__new": "The MySQL Database Server 8.0 must allow only the Information System Security Manager (ISSM) (or individuals or roles appointed by the ISSM) to select which auditable events are to be audited."
        },
        "desc": {
          "__old": "Without the capability to restrict which roles and individuals can\nselect which events are audited, unauthorized personnel may be able to prevent\nor interfere with the auditing of critical events.\n\n    Suppression of auditing could permit an adversary to evade detection.\n\n    Misconfigured audits can degrade the system's performance by overwhelming\nthe audit log. Misconfigured audits may also make it more difficult to\nestablish, correlate, and investigate the events relating to an incident or\nidentify those responsible for one.\n\n    AUDIT_ADMIN enables audit log configuration. This privilege is defined by\nthe audit_log plugin when it is installed.\n    SUPER is a powerful and far-reaching privilege and should not be granted\nlightly.",
          "__new": "Without the capability to restrict which roles and individuals can select which events are audited, unauthorized personnel may be able to prevent or interfere with the auditing of critical events. \n\nSuppression of auditing could permit an adversary to evade detection.\n\nMisconfigured audits can degrade the system's performance by overwhelming the audit log. Misconfigured audits may also make it more difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one.\n\nAUDIT_ADMIN enables audit log configuration. This privilege is defined by the audit_log plugin when it is installed.\nSUPER is a powerful and far-reaching privilege and should not be granted lightly."
        },
        "descs": {
          "default__deleted": "Without the capability to restrict which roles and individuals can\nselect which events are audited, unauthorized personnel may be able to prevent\nor interfere with the auditing of critical events.\n\n    Suppression of auditing could permit an adversary to evade detection.\n\n    Misconfigured audits can degrade the system's performance by overwhelming\nthe audit log. Misconfigured audits may also make it more difficult to\nestablish, correlate, and investigate the events relating to an incident or\nidentify those responsible for one.\n\n    AUDIT_ADMIN enables audit log configuration. This privilege is defined by\nthe audit_log plugin when it is installed.\n    SUPER is a powerful and far-reaching privilege and should not be granted\nlightly.",
          "rationale__deleted": "",
          "check": {
            "__old": "Check MySQL settings and documentation to determine whether designated\npersonnel are able to select which auditable events are being audited.\n\n    To list out users who have rights to administrative access for auditing,\nrun this query:\n    SELECT * FROM INFORMATION_SCHEMA.USER_PRIVILEGES where PRIVILEGE_TYPE in\n('AUDIT_ADMIN', 'SUPER');\n\n    If any of the roles or users returned have permissions that are not\ndocumented, or the documented audit maintainers do not have permissions, this\nis a finding.",
            "__new": "Check MySQL settings and documentation to determine whether designated personnel are able to select which auditable events are being audited.\n  \nTo list out users who have rights to administrative access for auditing, run this query:\nSELECT * FROM INFORMATION_SCHEMA.USER_PRIVILEGES where PRIVILEGE_TYPE in ('AUDIT_ADMIN', 'SUPER');\n\nIf any of the roles or users returned have permissions that are not documented, or the documented audit maintainers do not have permissions, this is a finding."
          },
          "fix": {
            "__old": "Configure the MySQL Database Server 8.0 settings to allow designated\npersonnel to select which auditable events are audited.\n\n    Grant permissions to users who need rights to create auditing rules.\n\n    GRANT AUDIT_ADMIN\n    ON *.* TO '<auditusername>'@'<host_specification>';\n\n    For example:\n    GRANT AUDIT_ADMIN\n    ON *.* TO 'auditusername'@'%';",
            "__new": "Configure the MySQL Database Server 8.0 settings to allow designated personnel to select which auditable events are audited.\n\nGrant permissions to users who need rights to create auditing rules.\n\nGRANT AUDIT_ADMIN\nON *.* TO '<auditusername>'@'<host_specification>';\n\nFor example:\nGRANT AUDIT_ADMIN\nON *.* TO 'auditusername'@'%';"
          }
        }
      },
      "SV-235105": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n  \n  audit_log_plugin_status = sql_session.query(audit_log_plugin)\n\n  query_audit_log_filter = %(\n  SELECT\n     audit_log_filter.NAME,\n     audit_log_filter.FILTER\n  FROM\n     mysql.audit_log_filter;\n  )\n\n  audit_log_filter_entries = sql_session.query(query_audit_log_filter)\n\n  query_audit_log_user = %(\n  SELECT\n     audit_log_user.USER,\n     audit_log_user.HOST,\n     audit_log_user.FILTERNAME\n  FROM\n     mysql.audit_log_user;\n  )\n\n  audit_log_user_entries = sql_session.query(query_audit_log_user)\n\n  query_server_audit_events = %(SHOW variables LIKE 'server_audit_events';)\n\n  server_audit_events_setting = sql_session.query(query_server_audit_events)\n\n\n  if !input('aws_rds')\n  \n    # Following code design will allow for adaptive tests in this partially automatable control\n    # If ANY of the automatable tests FAIL, the control will report automated statues\n    # If ALL automatable tests PASS, MANUAL review statuses are reported to ensure full compliance\n\n\n    if !audit_log_plugin_status.results.column('plugin_status').join.eql?('ACTIVE') or\n       audit_log_filter_entries.results.empty? or\n       audit_log_user_entries.results.empty?\n\n      describe 'Audit Log Plugin status' do\n        subject { audit_log_plugin_status.results.column('plugin_status') }\n        it { should cmp 'ACTIVE' }\n      end\n\n      describe 'List of entries in Table: audit_log_filter' do\n        subject { audit_log_filter_entries.results }\n        it { should_not be_empty }\n      end\n\n      describe 'List of entries in Table: audit_log_user' do\n        subject { audit_log_user_entries.results }\n        it { should_not be_empty }\n      end\n    end\n\n    describe \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" do\n      skip \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\"\n    end\n    describe \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\" do\n      skip \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\"\n    end\n    describe \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" do\n      skip \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\"\n    end\n    describe \"Manually validate that required audit logs are generated when the following query is executed:\\nselect * from mysql.proxies_priv;\" do\n      skip \"Manually validate that required audit logs are generated when the following query is executed:\\nselect * from mysql.proxies_priv;\"\n    end\n    \n  else\n    \n    describe 'Audit Log Plugin status' do\n      subject { audit_log_plugin_status.results.column('plugin_status') }\n      it { should cmp 'ACTIVE' }\n    end\n\n    describe 'Community Server server_audit_events settings' do\n      subject { Set[server_audit_events_setting.results.column('value')[0].split(',')] }\n      it { should cmp Set['CONNECT,QUERY'.split(',')] }\n    end\n    \n  end\n    ",
        "tags": {
          "check_id__added": "C-38324r623435_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235105r638812_rule",
            "__new": "SV-235105r960885_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must be able to generate audit records\nwhen privileges/permissions are retrieved.",
          "__new": "The MySQL Database Server 8.0 must be able to generate audit records when privileges/permissions are retrieved."
        },
        "desc": {
          "__old": "Under some circumstances, it may be useful to monitor who/what is\nreading privilege/permission/role information. Therefore, it must be possible\nto configure auditing to do this. Database Management Systems (DBMSs) typically\nmake such information available through views or functions.\n\n    This requirement addresses explicit requests for privilege/permission/role\nmembership information. It does not refer to the implicit retrieval of\nprivileges/permissions/role memberships that the DBMS continually performs to\ndetermine if any and every action on the database is permitted.",
          "__new": "Under some circumstances, it may be useful to monitor who/what is reading privilege/permission/role information. Therefore, it must be possible to configure auditing to do this. Database Management Systems (DBMSs) typically make such information available through views or functions.\n\nThis requirement addresses explicit requests for privilege/permission/role membership information. It does not refer to the implicit retrieval of privileges/permissions/role memberships that the DBMS continually performs to determine if any and every action on the database is permitted."
        },
        "descs": {
          "default__deleted": "Under some circumstances, it may be useful to monitor who/what is\nreading privilege/permission/role information. Therefore, it must be possible\nto configure auditing to do this. Database Management Systems (DBMSs) typically\nmake such information available through views or functions.\n\n    This requirement addresses explicit requests for privilege/permission/role\nmembership information. It does not refer to the implicit retrieval of\nprivileges/permissions/role memberships that the DBMS continually performs to\ndetermine if any and every action on the database is permitted.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the system documentation to determine if MySQL Server is required to\naudit the retrieval of privilege/permission/role membership information.\n\n    Check if MySQL audit is configured and enabled. The my.cnf file will set\nthe variable audit_file.\n\n    To further check, execute the following query:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n          FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'audit%';\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for SERVER_AUDIT should return ACTIVE.]\n\n    The status of the audit_log plugin must be \"active\". If it is not\n\"active\", this is a finding.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used and configured to \naudit all CONNECT and QUERY events.\nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the CONNECT and QUERY events are enabled:\n    SHOW variables LIKE 'server_audit_events';\n    +---------------------+---------------+\n    | Variable_name       | Value         |\n    +---------------------+---------------+\n    | server_audit_events | CONNECT,QUERY |\n    +---------------------+---------------+\n  \t1 row in set (0.00 sec)    \n  \tThe value for server_audit_events should return CONNECT,QUERY.]\n  \n \n    Review audit filters and associated users by running the following queries:\n    SELECT `audit_log_filter`.`NAME`,\n       `audit_log_filter`.`FILTER`\n    FROM `mysql`.`audit_log_filter`;\n\n    SELECT `audit_log_user`.`USER`,\n       `audit_log_user`.`HOST`,\n       `audit_log_user`.`FILTERNAME`\n    FROM `mysql`.`audit_log_user`;\n\n\n    All currently defined audits for the MySQL server instance will be listed.\nIf no audits are returned, this is a finding.\n\n    To check if the audit filters that are in place are generating records when\nprivileges/permissions are retrieved, run the following query:\n    select * from mysql.proxies_priv;\n\n    Review the audit log by running the Linux command:\n    sudo cat  <directory where audit log files are located>/audit.log|egrep\nproxies_prim\n\n    For example if the values returned by - \"select @@datadir,\n@@audit_log_file;\" are  /usr/local/mysql/data/,  audit.log\n    ls -l  /usr/local/mysql/data/audit.log\n\n    The audit data will look similar to the example below:\n    { \"timestamp\": \"2020-08-19 21:03:39\", \"id\": 13, \"class\":\n\"general\", \"event\": \"status\", \"connection_id\": 9, \"account\": {\n\"user\": \"root\", \"host\": \"localhost\" }, \"login\": { \"user\": \"root\",\n\"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"general_data\": {\n\"command\": \"Query\", \"sql_command\": \"select\", \"query\": \"select * from\nmysql.proxies_priv    LIMIT 0, 1000\", \"status\": 0 } },\n\n    If the audit event is not present, this is a finding.",
            "__new": "Review the system documentation to determine if MySQL Server is required to audit the retrieval of privilege/permission/role membership information. \n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters that are in place are generating records when privileges/permissions are retrieved, run the following query:\nselect * from mysql.proxies_priv;\n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log|egrep proxies_prim\n\nFor example if the values returned by - \"select @@datadir, @@audit_log_file;\" are  /usr/local/mysql/data/,  audit.log\nls -l  /usr/local/mysql/data/audit.log\n\nThe audit data will look similar to the example below:\n{ \"timestamp\": \"2020-08-19 21:03:39\", \"id\": 13, \"class\": \"general\", \"event\": \"status\", \"connection_id\": 9, \"account\": { \"user\": \"root\", \"host\": \"localhost\" }, \"login\": { \"user\": \"root\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"general_data\": { \"command\": \"Query\", \"sql_command\": \"select\", \"query\": \"select * from mysql.proxies_priv\\nLIMIT 0, 1000\", \"status\": 0 } },\n\nIf the audit event is not present, this is a finding."
          },
          "fix": {
            "__old": "If currently required, configure the MySQL Database Server to produce audit\nrecords when audit when privileges/permissions are retrieved.\n\n    See the supplemental file \"MySQL80Audit.sql\".",
            "__new": "If currently required, configure the MySQL Database Server to produce audit records when audit when privileges/permissions are retrieved.\n\nSee the supplemental file \"MySQL80Audit.sql\"."
          }
        }
      },
      "SV-235106": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n  \n  audit_log_plugin_status = sql_session.query(audit_log_plugin)\n\n  query_audit_log_filter = %(\n  SELECT\n     audit_log_filter.NAME,\n     audit_log_filter.FILTER\n  FROM\n     mysql.audit_log_filter;\n  )\n\n  audit_log_filter_entries = sql_session.query(query_audit_log_filter)\n\n  query_audit_log_user = %(\n  SELECT\n     audit_log_user.USER,\n     audit_log_user.HOST,\n     audit_log_user.FILTERNAME\n  FROM\n     mysql.audit_log_user;\n  )\n\n  audit_log_user_entries = sql_session.query(query_audit_log_user)\n\n  query_server_audit_events = %(SHOW variables LIKE 'server_audit_events';)\n\n  server_audit_events_setting = sql_session.query(query_server_audit_events)\n\n  if !input('aws_rds')\n  \n    # Following code design will allow for adaptive tests in this partially automatable control\n    # If ANY of the automatable tests FAIL, the control will report automated statues\n    # If ALL automatable tests PASS, MANUAL review statuses are reported to ensure full compliance\n\n    if !audit_log_plugin_status.results.column('plugin_status').join.eql?('ACTIVE') or\n       audit_log_filter_entries.results.empty? or\n       audit_log_user_entries.results.empty?\n\n      describe 'Audit Log Plugin status' do\n        subject { audit_log_plugin_status.results.column('plugin_status') }\n        it { should cmp 'ACTIVE' }\n      end\n\n      describe 'List of entries in Table: audit_log_filter' do\n        subject { audit_log_filter_entries.results }\n        it { should_not be_empty }\n      end\n\n      describe 'List of entries in Table: audit_log_user' do\n        subject { audit_log_user_entries.results }\n        it { should_not be_empty }\n      end\n    end\n\n    describe \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" do\n      skip \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\"\n    end\n    describe \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\" do\n      skip \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\"\n    end\n    describe \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" do\n      skip \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\"\n    end\n    describe \"Manually validate that required audit logs are generated when the following query is executed:\\nselect * from mysql.proxies_priv;\" do\n      skip \"Manually validate that required audit logs are generated when the following query is executed:\\nselect * from mysql.proxies_priv;\"\n    end\n  \n  else\n\n    describe 'Audit Log Plugin status' do\n      subject { audit_log_plugin_status.results.column('plugin_status') }\n      it { should cmp 'ACTIVE' }\n    end\n\n    describe 'Community Server server_audit_events settings' do\n      subject { Set[server_audit_events_setting.results.column('value')[0].split(',')] }\n      it { should cmp Set['CONNECT,QUERY'.split(',')] }\n    end\n    \n  end\n    \n    ",
        "tags": {
          "check_id__added": "C-38325r623438_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235106r638812_rule",
            "__new": "SV-235106r960885_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must be able to generate audit records\nwhen unsuccessful attempts to retrieve privileges/permissions occur.",
          "__new": "The MySQL Database Server 8.0 must be able to generate audit records when unsuccessful attempts to retrieve privileges/permissions occur."
        },
        "desc": {
          "__old": "Under some circumstances, it may be useful to monitor who/what is\nreading privilege/permission/role information. Therefore, it must be possible\nto configure auditing to do this. Database Management Systems (DBMSs) typically\nmake such information available through views or functions.\n\n    This requirement addresses explicit requests for privilege/permission/role\nmembership information. It does not refer to the implicit retrieval of\nprivileges/permissions/role memberships that the DBMS continually performs to\ndetermine if any and every action on the database is permitted.\n\n    To aid in diagnosis, it is necessary to keep track of failed attempts in\naddition to the successful ones.",
          "__new": "Under some circumstances, it may be useful to monitor who/what is reading privilege/permission/role information. Therefore, it must be possible to configure auditing to do this. Database Management Systems (DBMSs) typically make such information available through views or functions.\n\nThis requirement addresses explicit requests for privilege/permission/role membership information. It does not refer to the implicit retrieval of  privileges/permissions/role memberships that the DBMS continually performs to determine if any and every action on the database is permitted.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones."
        },
        "descs": {
          "default__deleted": "Under some circumstances, it may be useful to monitor who/what is\nreading privilege/permission/role information. Therefore, it must be possible\nto configure auditing to do this. Database Management Systems (DBMSs) typically\nmake such information available through views or functions.\n\n    This requirement addresses explicit requests for privilege/permission/role\nmembership information. It does not refer to the implicit retrieval of\nprivileges/permissions/role memberships that the DBMS continually performs to\ndetermine if any and every action on the database is permitted.\n\n    To aid in diagnosis, it is necessary to keep track of failed attempts in\naddition to the successful ones.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the system documentation to determine if MySQL Server is required to\naudit when unsuccessful attempts to retrieve privileges/permissions occur.\n\n    Check if MySQL audit is configured and enabled. The my.cnf file will set\nthe variable audit_file.\n\n    To further check, execute the following query:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n          FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'audit%';\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for SERVER_AUDIT should return ACTIVE.]\n\n    The status of the audit_log plugin should be \"active\". If it is not\n\"active\", this is a finding.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used and configured to \naudit all CONNECT and QUERY events.\nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the CONNECT and QUERY events are enabled:\n    SHOW variables LIKE 'server_audit_events';\n    +---------------------+---------------+\n    | Variable_name       | Value         |\n    +---------------------+---------------+\n    | server_audit_events | CONNECT,QUERY |\n    +---------------------+---------------+\n  \t1 row in set (0.00 sec)    \n  \tThe value for server_audit_events should return CONNECT,QUERY.]\n\n    Review audit filters and associated users by running the following queries:\n    SELECT `audit_log_filter`.`NAME`,\n       `audit_log_filter`.`FILTER`\n    FROM `mysql`.`audit_log_filter`;\n\n    SELECT `audit_log_user`.`USER`,\n       `audit_log_user`.`HOST`,\n       `audit_log_user`.`FILTERNAME`\n    FROM `mysql`.`audit_log_user`;\n\n    All currently defined audits for the MySQL server instance will be listed.\nIf no audits are returned, this is a finding.\n\n    To check if the audit filters that are in place are generating records to\naudit when unsuccessful attempts to retrieve privileges/permissions occur, run\nthe following query using a user that does not have privileges so that it fails:\n    select * from mysql.proxies_priv;\n    ERROR: 1142: SELECT command denied to user 'auditme'@'localhost' for table\n'proxies_priv'\n\n    Review the audit log by running the command:\n    sudo cat  <directory where audit log files are located>/audit.log|egrep\nproxies_priv\n    For example if the values returned by \"select @@datadir, @@audit_log_file;\n\" are  /usr/local/mysql/data/,  audit.log\n    sudo cat  /usr/local/mysql/data/audit.log |egrep proxies_priv\n\n    The audit data will look similar to the example below:\n    { \"timestamp\": \"2020-08-19 21:10:39\", \"id\": 1, \"class\":\n\"general\", \"event\": \"status\", \"connection_id\": 13, \"account\": {\n\"user\": \"auditme\", \"host\": \"localhost\" }, \"login\": { \"user\":\n\"auditme\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" },\n\"general_data\": { \"command\": \"Query\", \"sql_command\": \"select\",\n\"query\": \"select * from mysql.proxies_priv\", \"status\": 1142 } },\n    Note status is 1142, like the error.\n\n    If the audit event is not present, this is a finding.",
            "__new": "Review the system documentation to determine if MySQL Server is required to audit when unsuccessful attempts to retrieve privileges/permissions occur.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query:\nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin should be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters that are in place are generating records to audit when unsuccessful attempts to retrieve privileges/permissions occur, run the following query using a user that does not have privileges so that it fails:\nselect * from mysql.proxies_priv;\nERROR: 1142: SELECT command denied to user 'auditme'@'localhost' for table 'proxies_priv'\n\nReview the audit log by running the command:\nsudo cat  <directory where audit log files are located>/audit.log|egrep proxies_priv\nFor example if the values returned by \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep proxies_priv\n\nThe audit data will look similar to the example below:\n{ \"timestamp\": \"2020-08-19 21:10:39\", \"id\": 1, \"class\": \"general\", \"event\": \"status\", \"connection_id\": 13, \"account\": { \"user\": \"auditme\", \"host\": \"localhost\" }, \"login\": { \"user\": \"auditme\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"general_data\": { \"command\": \"Query\", \"sql_command\": \"select\", \"query\": \"select * from mysql.proxies_priv\", \"status\": 1142 } },\nNote status is 1142, like the error.\n\nIf the audit event is not present, this is a finding."
          },
          "fix": {
            "__old": "If currently required, configure the MySQL Database Server to produce audit\nrecords when unsuccessful attempts to retrieve privileges/permissions occur.\n\n    See the supplemental file \"MySQL80Audit.sql\".",
            "__new": "If currently required, configure the MySQL Database Server to produce audit records when unsuccessful attempts to retrieve privileges/permissions occur.\n\nSee the supplemental file \"MySQL80Audit.sql\"."
          }
        }
      },
      "SV-235107": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n  \n\n  audit_log_plugin_status = sql_session.query(audit_log_plugin)\n\n  query_audit_log_filter = %(\n  SELECT\n     audit_log_filter.NAME,\n     audit_log_filter.FILTER\n  FROM\n     mysql.audit_log_filter;\n  )\n\n  audit_log_filter_entries = sql_session.query(query_audit_log_filter)\n\n  query_audit_log_user = %(\n  SELECT\n     audit_log_user.USER,\n     audit_log_user.HOST,\n     audit_log_user.FILTERNAME\n  FROM\n     mysql.audit_log_user;\n  )\n\n  audit_log_user_entries = sql_session.query(query_audit_log_user)\n\n  query_server_audit_events = %(SHOW variables LIKE 'server_audit_events';)\n\n  server_audit_events_setting = sql_session.query(query_server_audit_events)\n\n\n  if !input('aws_rds')\n  \n    # Following code design will allow for adaptive tests in this partially automatable control\n    # If ANY of the automatable tests FAIL, the control will report automated statues\n    # If ALL automatable tests PASS, MANUAL review statuses are reported to ensure full compliance\n\n    if !audit_log_plugin_status.results.column('plugin_status').join.eql?('ACTIVE') or\n       audit_log_filter_entries.results.empty? or\n       audit_log_user_entries.results.empty?\n\n      describe 'Audit Log Plugin status' do\n        subject { audit_log_plugin_status.results.column('plugin_status') }\n        it { should cmp 'ACTIVE' }\n      end\n\n      describe 'List of entries in Table: audit_log_filter' do\n        subject { audit_log_filter_entries.results }\n        it { should_not be_empty }\n      end\n\n      describe 'List of entries in Table: audit_log_user' do\n        subject { audit_log_user_entries.results }\n        it { should_not be_empty }\n      end\n    end\n\n    describe \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" do\n      skip \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\"\n    end\n    describe \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\" do\n      skip \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\"\n    end\n    describe \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" do\n      skip \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\"\n    end\n    describe \"Manually validate that required audit logs are generated when the following query is executed:\\nselect * from mysql.proxies_priv;\" do\n      skip \"Manually validate that required audit logs are generated when the following query is executed:\\nselect * from mysql.proxies_priv;\"\n    end\n     \n  else\n    \n    describe 'Audit Log Plugin status' do\n      subject { audit_log_plugin_status.results.column('plugin_status') }\n      it { should cmp 'ACTIVE' }\n    end\n\n    describe 'Community Server server_audit_events settings' do\n      subject { Set[server_audit_events_setting.results.column('value')[0].split(',')] }\n      it { should cmp Set['CONNECT,QUERY'.split(',')] }\n    end\n    \n  end\n    ",
        "tags": {
          "check_id__added": "C-38326r623441_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235107r638812_rule",
            "__new": "SV-235107r961791_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must be able to generate audit records\nwhen security objects are accessed.",
          "__new": "The MySQL Database Server 8.0 must be able to generate audit records when security objects are accessed."
        },
        "desc": {
          "__old": "Changes to the security configuration must be tracked.\n\n    This requirement applies to situations where security data is retrieved or\nmodified via data manipulation operations, as opposed to via specialized\nsecurity functionality.\n\n    In SQL environment, types of access include, but are not necessarily\nlimited to:\n    SELECT\n    INSERT\n    UPDATE\n    DELETE\n    EXECUTE",
          "__new": "Changes to the security configuration must be tracked.\n\nThis requirement applies to situations where security data is retrieved or modified via data manipulation operations, as opposed to via specialized security functionality.\n\nIn SQL environment, types of access include, but are not necessarily limited to:\nSELECT\nINSERT\nUPDATE\nDELETE\nEXECUTE"
        },
        "descs": {
          "default__deleted": "Changes to the security configuration must be tracked.\n\n    This requirement applies to situations where security data is retrieved or\nmodified via data manipulation operations, as opposed to via specialized\nsecurity functionality.\n\n    In SQL environment, types of access include, but are not necessarily\nlimited to:\n    SELECT\n    INSERT\n    UPDATE\n    DELETE\n    EXECUTE",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the system documentation to determine if MySQL Server is required to\naudit when security objects are accessed.\n\n    Check if MySQL audit is configured and enabled. The my.cnf file will set\nthe variable audit_file.\n\n    To further check, execute the following query:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n          FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'audit%';\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for SERVER_AUDIT should return ACTIVE.]\n\n    The status of the audit_log plugin should be \"active\". If it is not\n\"active\", this is a finding.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used and configured to \naudit all CONNECT and QUERY events.\nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the CONNECT and QUERY events are enabled:\n    SHOW variables LIKE 'server_audit_events';\n    +---------------------+---------------+\n    | Variable_name       | Value         |\n    +---------------------+---------------+\n    | server_audit_events | CONNECT,QUERY |\n    +---------------------+---------------+\n  \t1 row in set (0.00 sec)    \n  \tThe value for server_audit_events should return CONNECT,QUERY.]\n  \n    Review audit filters and associated users by running the following queries:\n    SELECT `audit_log_filter`.`NAME`,\n       `audit_log_filter`.`FILTER`\n    FROM `mysql`.`audit_log_filter`;\n\n    SELECT `audit_log_user`.`USER`,\n       `audit_log_user`.`HOST`,\n       `audit_log_user`.`FILTERNAME`\n    FROM `mysql`.`audit_log_user`;\n\n    All currently defined audits for the MySQL server instance will be listed.\nIf no audits are returned, this is a finding.\n\n    To check if the audit filters in place are generating records to audit when\nsecurity objects are accessed, run the following query:\n    select * from mysql.proxies_priv;\n\n    Review the audit log by running the Linux command:\n    sudo cat  <directory where audit log files are located>/audit.log|egrep\nproxies_prim\n    For example if the values returned by - \"select @@datadir,\n@@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\n    sudo cat  /usr/local/mysql/data/audit.log |egrep proxies_priv\n\n    The audit data will look similar to the example below:\n    { \"timestamp\": \"2020-08-19 21:03:39\", \"id\": 13, \"class\":\n\"general\", \"event\": \"status\", \"connection_id\": 9, \"account\": {\n\"user\": \"root\", \"host\": \"localhost\" }, \"login\": { \"user\": \"root\",\n\"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"general_data\": {\n\"command\": \"Query\", \"sql_command\": \"select\", \"query\": \"select * from\nmysql.proxies_priv    LIMIT 0, 1000\", \"status\": 0 } },\n\n    If the audit event is not present, this is a finding.",
            "__new": "Review the system documentation to determine if MySQL Server is required to audit when security objects are accessed.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin should be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters in place are generating records to audit when security objects are accessed, run the following query:\nselect * from mysql.proxies_priv;\n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log|egrep proxies_prim\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep proxies_priv\n\nThe audit data will look similar to the example below:\n{ \"timestamp\": \"2020-08-19 21:03:39\", \"id\": 13, \"class\": \"general\", \"event\": \"status\", \"connection_id\": 9, \"account\": { \"user\": \"root\", \"host\": \"localhost\" }, \"login\": { \"user\": \"root\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"general_data\": { \"command\": \"Query\", \"sql_command\": \"select\", \"query\": \"select * from mysql.proxies_priv\\nLIMIT 0, 1000\", \"status\": 0 } },\n\nIf the audit event is not present, this is a finding."
          },
          "fix": {
            "__old": "If currently required, configure the MySQL Database Server to produce audit\nrecords when security objects are accessed.\n\n    See the supplemental file \"MySQL80Audit.sql\".",
            "__new": "If currently required, configure the MySQL Database Server to produce audit records when security objects are accessed.\n\nSee the supplemental file \"MySQL80Audit.sql\"."
          }
        }
      },
      "SV-235108": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n  \n  audit_log_plugin_status = sql_session.query(audit_log_plugin)\n\n  query_audit_log_filter = %(\n  SELECT\n     audit_log_filter.NAME,\n     audit_log_filter.FILTER\n  FROM\n     mysql.audit_log_filter;\n  )\n\n  audit_log_filter_entries = sql_session.query(query_audit_log_filter)\n\n  query_audit_log_user = %(\n  SELECT\n     audit_log_user.USER,\n     audit_log_user.HOST,\n     audit_log_user.FILTERNAME\n  FROM\n     mysql.audit_log_user;\n  )\n\n  audit_log_user_entries = sql_session.query(query_audit_log_user)\n\n  query_server_audit_events = %(SHOW variables LIKE 'server_audit_events';)\n\n  server_audit_events_setting = sql_session.query(query_server_audit_events)\n\n\n  if !input('aws_rds')\n\n    # Following code design will allow for adaptive tests in this partially automatable control\n    # If ANY of the automatable tests FAIL, the control will report automated statues\n    # If ALL automatable tests PASS, MANUAL review statuses are reported to ensure full compliance\n\n    if !audit_log_plugin_status.results.column('plugin_status').join.eql?('ACTIVE') or\n       audit_log_filter_entries.results.empty? or\n       audit_log_user_entries.results.empty?\n\n      describe 'Audit Log Plugin status' do\n        subject { audit_log_plugin_status.results.column('plugin_status') }\n        it { should cmp 'ACTIVE' }\n      end\n\n      describe 'List of entries in Table: audit_log_filter' do\n        subject { audit_log_filter_entries.results }\n        it { should_not be_empty }\n      end\n\n      describe 'List of entries in Table: audit_log_user' do\n        subject { audit_log_user_entries.results }\n        it { should_not be_empty }\n      end\n    end\n\n    describe \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" do\n      skip \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\"\n    end\n    describe \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\" do\n      skip \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\"\n    end\n    describe \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" do\n      skip \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\"\n    end\n    describe \"Manually validate that required audit logs are generated when the following query is executed:\\nselect * from mysql.proxies_priv;\" do\n      skip \"Manually validate that required audit logs are generated when the following query is executed:\\nselect * from mysql.proxies_priv;\"\n    end\n    \n  else\n    \n    describe 'Audit Log Plugin status' do\n      subject { audit_log_plugin_status.results.column('plugin_status') }\n      it { should cmp 'ACTIVE' }\n    end\n\n    describe 'Community Server server_audit_events settings' do\n      subject { Set[server_audit_events_setting.results.column('value')[0].split(',')] }\n      it { should cmp Set['CONNECT,QUERY'.split(',')] }\n    end\n    \n  end\n    ",
        "tags": {
          "check_id__added": "C-38327r623444_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235108r638812_rule",
            "__new": "SV-235108r961791_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must generate audit records when\nunsuccessful attempts to access security objects occur.",
          "__new": "The MySQL Database Server 8.0 must generate audit records when unsuccessful attempts to access security objects occur."
        },
        "desc": {
          "__old": "Changes to the security configuration must be tracked.\n\n    This requirement applies to situations where security data is retrieved or\nmodified via data manipulation operations, as opposed to via specialized\nsecurity functionality.\n\n    In a SQL environment, types of access include, but are not necessarily\nlimited to:\n    SELECT\n    INSERT\n    UPDATE\n    DELETE\n    EXECUTE\n\n    To aid in diagnosis, it is necessary to keep track of failed attempts in\naddition to the successful ones.",
          "__new": "Changes to the security configuration must be tracked.\n\nThis requirement applies to situations where security data is retrieved or modified via data manipulation operations, as opposed to via specialized security functionality.\n\nIn a SQL environment, types of access include, but are not necessarily limited to:\nSELECT\nINSERT\nUPDATE\nDELETE\nEXECUTE\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones."
        },
        "descs": {
          "default__deleted": "Changes to the security configuration must be tracked.\n\n    This requirement applies to situations where security data is retrieved or\nmodified via data manipulation operations, as opposed to via specialized\nsecurity functionality.\n\n    In a SQL environment, types of access include, but are not necessarily\nlimited to:\n    SELECT\n    INSERT\n    UPDATE\n    DELETE\n    EXECUTE\n\n    To aid in diagnosis, it is necessary to keep track of failed attempts in\naddition to the successful ones.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the system documentation to determine if MySQL Server is required to\naudit when unsuccessful attempts to access security objects occur.\n\n    Check if MySQL audit is configured and enabled. The my.cnf file will set\nthe variable audit_file.\n\n    To further check, execute the following query:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n          FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'audit%';\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for SERVER_AUDIT should return ACTIVE.]\n\n    The status of the audit_log plugin must be \"active\". If it is not\n\"active\", this is a finding.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used and configured to \naudit all CONNECT and QUERY events.\nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the CONNECT and QUERY events are enabled:\n    SHOW variables LIKE 'server_audit_events';\n    +---------------------+---------------+\n    | Variable_name       | Value         |\n    +---------------------+---------------+\n    | server_audit_events | CONNECT,QUERY |\n    +---------------------+---------------+\n  \t1 row in set (0.00 sec)    \n  \tThe value for server_audit_events should return CONNECT,QUERY.]\n  \n    Review audit filters and associated users by running the following queries:\n    SELECT `audit_log_filter`.`NAME`,\n       `audit_log_filter`.`FILTER`\n    FROM `mysql`.`audit_log_filter`;\n\n    SELECT `audit_log_user`.`USER`,\n       `audit_log_user`.`HOST`,\n       `audit_log_user`.`FILTERNAME`\n    FROM `mysql`.`audit_log_user`;\n\n    All currently defined audits for the MySQL server instance will be listed.\nIf no audits are returned, this is a finding.\n\n    To check if the audit filters in place are generating records when\nunsuccessful attempts to access security objects occur, run the following query\nwith a user that does not have privileges so that it will fail:\n    select * from mysql.proxies_priv;\n    ERROR: 1142: SELECT command denied to user 'auditme'@'localhost' for table\n'proxies_priv'\n\n    Review the audit log by running the command:\n    sudo cat  <directory where audit log files are located>/audit.log|egrep\nproxies_priv\n    For example if the values returned by - \"select @@datadir,\n@@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\n    sudo cat  /usr/local/mysql/data/audit.log |egrep proxies_priv\n    For example if the values returned by - \"select @@datadir,\n@@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\n    sudo cat  /usr/local/mysql/data/audit.log |egrep proxies_priv\n\n    The audit data will look similar to the example below:\n    { \"timestamp\": \"2020-08-19 21:10:39\", \"id\": 1, \"class\":\n\"general\", \"event\": \"status\", \"connection_id\": 13, \"account\": {\n\"user\": \"auditme\", \"host\": \"localhost\" }, \"login\": { \"user\":\n\"auditme\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" },\n\"general_data\": { \"command\": \"Query\", \"sql_command\": \"select\",\n\"query\": \"select * from mysql.proxies_priv\", \"status\": 1142 } },\n    Note status is 1142, like the error.\n\n    If the audit event is not present, this is a finding.",
            "__new": "Review the system documentation to determine if MySQL Server is required to audit when unsuccessful attempts to access security objects occur.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters in place are generating records when unsuccessful attempts to access security objects occur, run the following query with a user that does not have privileges so that it will fail:\nselect * from mysql.proxies_priv;\nERROR: 1142: SELECT command denied to user 'auditme'@'localhost' for table 'proxies_priv'\n\nReview the audit log by running the command:\nsudo cat  <directory where audit log files are located>/audit.log|egrep proxies_priv\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep proxies_priv\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep proxies_priv\n\nThe audit data will look similar to the example below:\n{ \"timestamp\": \"2020-08-19 21:10:39\", \"id\": 1, \"class\": \"general\", \"event\": \"status\", \"connection_id\": 13, \"account\": { \"user\": \"auditme\", \"host\": \"localhost\" }, \"login\": { \"user\": \"auditme\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"general_data\": { \"command\": \"Query\", \"sql_command\": \"select\", \"query\": \"select * from mysql.proxies_priv\", \"status\": 1142 } },\nNote status is 1142, like the error.\n\nIf the audit event is not present, this is a finding."
          },
          "fix": {
            "__old": "If currently required, configure the MySQL Database Server to produce audit\nrecords when unsuccessful attempts to retrieve privileges/permissions occur.\n\n    See the supplemental file \"MySQL80Audit.sql\".",
            "__new": "If currently required, configure the MySQL Database Server to produce audit records when unsuccessful attempts to retrieve privileges/permissions occur.\n\nSee the supplemental file \"MySQL80Audit.sql\"."
          }
        }
      },
      "SV-235109": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n  \n  audit_log_plugin_status = sql_session.query(audit_log_plugin)\n\n  query_audit_log_filter = %(\n  SELECT\n     audit_log_filter.NAME,\n     audit_log_filter.FILTER\n  FROM\n     mysql.audit_log_filter;\n  )\n\n  audit_log_filter_entries = sql_session.query(query_audit_log_filter)\n\n  query_audit_log_user = %(\n  SELECT\n     audit_log_user.USER,\n     audit_log_user.HOST,\n     audit_log_user.FILTERNAME\n  FROM\n     mysql.audit_log_user;\n  )\n\n  audit_log_user_entries = sql_session.query(query_audit_log_user)\n\n  query_server_audit_events = %(SHOW variables LIKE 'server_audit_events';)\n\n  server_audit_events_setting = sql_session.query(query_server_audit_events)\n\n\n  if !input('aws_rds')\n  \n    # Following code design will allow for adaptive tests in this partially automatable control\n    # If ANY of the automatable tests FAIL, the control will report automated statues\n    # If ALL automatable tests PASS, MANUAL review statuses are reported to ensure full compliance\n\n    if !audit_log_plugin_status.results.column('plugin_status').join.eql?('ACTIVE') or\n       audit_log_filter_entries.results.empty? or\n       audit_log_user_entries.results.empty?\n\n      describe 'Audit Log Plugin status' do\n        subject { audit_log_plugin_status.results.column('plugin_status') }\n        it { should cmp 'ACTIVE' }\n      end\n\n      describe 'List of entries in Table: audit_log_filter' do\n        subject { audit_log_filter_entries.results }\n        it { should_not be_empty }\n      end\n\n      describe 'List of entries in Table: audit_log_user' do\n        subject { audit_log_user_entries.results }\n        it { should_not be_empty }\n      end\n    end\n\n    describe \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" do\n      skip \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\"\n    end\n    describe \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\" do\n      skip \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\"\n    end\n    describe \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" do\n      skip \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\"\n    end\n    describe \"Manually validate that required audit logs are generated when the following query is executed:\n    CREATE TABLE `test_trigger`.`info_cat_test` ( `id` INT NOT NULL, `name` VARCHAR(20) NULL, `desc` VARCHAR(20) NULL, `sec_level` CHAR(1) NULL, PRIMARY KEY (`id`));\n    DELIMITER $$ \n    INSERT INTO\n       `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) \n    VALUES\n       (\n          '1', 'fred', 'engineer', 'H'\n       )\n    ;\n    INSERT INTO\n       `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) \n    VALUES\n       (\n          '2', 'jill', 'program manager', 'M'\n       )\n    ;\n    INSERT INTO\n       `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) \n    VALUES\n       (\n          '3', 'joe', 'maintenance', 'L'\n       )\n    ;\n    SELECT\n       `info_cat_test`.`id`,\n       `info_cat_test`.`name`,\n       `info_cat_test`.`desc`,\n       `info_cat_test`.`sec_level`,\n       IF(`info_cat_test`.`sec_level` = 'H', audit_api_message_emit_udf('sec_level_selected', 'audit_select_attempt', ' H level sec data was accessed', 'FOR ', name ), 'Not Audited') \n    FROM\n       `test_trigger`.`info_cat_test`;\" do\n      skip \"Manually validate that required audit logs are generated when the following query is executed:\n      CREATE TABLE `test_trigger`.`info_cat_test` ( `id` INT NOT NULL, `name` VARCHAR(20) NULL, `desc` VARCHAR(20) NULL, `sec_level` CHAR(1) NULL, PRIMARY KEY (`id`));\n      DELIMITER $$ \n      INSERT INTO\n         `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) \n      VALUES\n         (\n            '1', 'fred', 'engineer', 'H'\n         )\n      ;\n      INSERT INTO\n         `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) \n      VALUES\n         (\n            '2', 'jill', 'program manager', 'M'\n         )\n      ;\n      INSERT INTO\n         `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) \n      VALUES\n         (\n            '3', 'joe', 'maintenance', 'L'\n         )\n      ;\n      SELECT\n         `info_cat_test`.`id`,\n         `info_cat_test`.`name`,\n         `info_cat_test`.`desc`,\n         `info_cat_test`.`sec_level`,\n         IF(`info_cat_test`.`sec_level` = 'H', audit_api_message_emit_udf('sec_level_selected', 'audit_select_attempt', ' H level sec data was accessed', 'FOR ', name ), 'Not Audited') \n      FROM\n         `test_trigger`.`info_cat_test`;\" \n    end\n    \n  else\n    \n    describe '[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. Community Server (also used by AWS RDS) has reduced or different features. For Community Server, the MariaDB audit plugin may be used and configured to audit all CONNECT and QUERY events. Provide an attestation explaining how the type of events identified in this requirement are flagged by processes reading its generated audit logs.]' do\n      skip '[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. Community Server (also used by AWS RDS) has reduced or different features. For Community Server, the MariaDB audit plugin may be used and configured to audit all CONNECT and QUERY events. Provide an attestation explaining how the type of events identified in this requirement are flagged by processes reading its generated audit logs.]'\n    end\n  \n  end\n    ",
        "tags": {
          "check_id__added": "C-38328r623447_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235109r638812_rule",
            "__new": "SV-235109r961797_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must generate audit records when\ncategories of information (e.g., classification levels/security levels) are\naccessed.",
          "__new": "The MySQL Database Server 8.0 must generate audit records when categories of information (e.g., classification levels/security levels) are accessed."
        },
        "desc": {
          "__old": "Changes in categories of information must be tracked. Without an audit\ntrail, unauthorized access to protected data could go undetected.\n\n    For detailed information on categorizing information, refer to FIPS\nPublication 199, Standards for Security Categorization of Federal Information\nand Information Systems, and FIPS Publication 200, Minimum Security\nRequirements for Federal Information and Information Systems.",
          "__new": "Changes in categories of information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems."
        },
        "descs": {
          "default__deleted": "Changes in categories of information must be tracked. Without an audit\ntrail, unauthorized access to protected data could go undetected.\n\n    For detailed information on categorizing information, refer to FIPS\nPublication 199, Standards for Security Categorization of Federal Information\nand Information Systems, and FIPS Publication 200, Minimum Security\nRequirements for Federal Information and Information Systems.",
          "rationale__deleted": "",
          "check": {
            "__old": "If classification levels/security levels labeling is not required, this is\nnot a finding.\n\n    Review the system documentation to determine if MySQL Server is required to\naudit records when unsuccessful attempts to delete categories of information\n(e.g., classification levels/security levels) occur.\n\n    Check if MySQL audit is configured and enabled. The my.cnf file will set\nthe variable audit_file.\n\n    To further check, execute the following query:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n          FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'audit%';\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for SERVER_AUDIT should return ACTIVE.]\n\n    The status of the audit_log plugin must be \"active\". If it is not\n\"active\", this is a finding.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used and configured to \naudit all CONNECT and QUERY events.\nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the CONNECT and QUERY events are enabled:\n    SHOW variables LIKE 'server_audit_events';\n    +---------------------+---------------+\n    | Variable_name       | Value         |\n    +---------------------+---------------+\n    | server_audit_events | CONNECT,QUERY |\n    +---------------------+---------------+\n  \t1 row in set (0.00 sec)    \n  \tThe value for server_audit_events should return CONNECT,QUERY.]\n  \n    Review audit filters and associated users by running the following queries:\n    SELECT `audit_log_filter`.`NAME`,\n       `audit_log_filter`.`FILTER`\n    FROM `mysql`.`audit_log_filter`;\n\n    SELECT `audit_log_user`.`USER`,\n       `audit_log_user`.`HOST`,\n       `audit_log_user`.`FILTERNAME`\n    FROM `mysql`.`audit_log_user`;\n\n    All currently defined audits for the MySQL server instance will be listed.\nIf no audits are returned, this is a finding.\n\n    Modify MySQL selects that check for changes to categories of information.\nModify selects statements to audit when information categories are accessed\nusing MySQL Audit by calling the audit_api_message_emit_udf() function and\nincluding the details related to the select.\n\n    - An Example test -\n\n    CREATE TABLE `test_trigger`.`info_cat_test` (\n      `id` INT NOT NULL,\n      `name` VARCHAR(20) NULL,\n      `desc` VARCHAR(20) NULL,\n      `sec_level` CHAR(1) NULL,\n      PRIMARY KEY (`id`));\n\n    DELIMITER $$\n\n\n    INSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`,\n`sec_level`) VALUES ('1', 'fred', 'engineer', 'H');\n    INSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`,\n`sec_level`) VALUES ('2', 'jill', 'program manager', 'M');\n    INSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`,\n`sec_level`) VALUES ('3', 'joe', 'maintenance', 'L');\n\n    SELECT `info_cat_test`.`id`,\n        `info_cat_test`.`name`,\n        `info_cat_test`.`desc`,\n        `info_cat_test`.`sec_level`,\n        IF(`info_cat_test`.`sec_level`= 'H',\n        audit_api_message_emit_udf('sec_level_selected',\n                                             'audit_select_attempt',\n                                             ' H level sec data was accessed',\n                                             'FOR ', name\n                                             ),\n        'Not Audited')\n    FROM `test_trigger`.`info_cat_test`;\n\n    Review the audit log by running the Linux command:\n    sudo cat  <directory where audit log files are located>/audit.log | egrep\nsec_level_selected\n    For example if the values returned by - \"select @@datadir,\n@@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\n    sudo cat  /usr/local/mysql/data/audit.log |egrep sec_level_priv\n\n    The audit data will look similar to the example below:\n    { \"timestamp\": \"2020-08-20 21:19:21\", \"id\": 1, \"class\":\n\"message\", \"event\": \"user\", \"connection_id\": 9, \"account\": {\n\"user\": \"root\", \"host\": \"localhost\" }, \"login\": { \"user\": \"root\",\n\"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"message_data\": {\n\"component\": \"sec_level_selected\", \"producer\": \"audit_select_attempt\",\n\"message\": \" H level sec data was accessed\", \"map\": { \"FOR \": \"fred\"\n} } },\n\n    If the audit event is not present, this is a finding.",
            "__new": "If classification levels/security levels labeling is not required, this is not a finding.\n\nReview the system documentation to determine if MySQL Server is required to audit records when unsuccessful attempts to delete categories of information (e.g., classification levels/security levels) occur.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nModify MySQL selects that check for changes to categories of information. Modify selects statements to audit when information categories are accessed using MySQL Audit by calling the audit_api_message_emit_udf() function and including the details related to the select. \n\n- An Example test -\n\nCREATE TABLE `test_trigger`.`info_cat_test` (\n  `id` INT NOT NULL,\n  `name` VARCHAR(20) NULL,\n  `desc` VARCHAR(20) NULL,\n  `sec_level` CHAR(1) NULL,\n  PRIMARY KEY (`id`));\n\nDELIMITER $$\n\n\nINSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) VALUES ('1', 'fred', 'engineer', 'H');\nINSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) VALUES ('2', 'jill', 'program manager', 'M');\nINSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) VALUES ('3', 'joe', 'maintenance', 'L');\n\nSELECT `info_cat_test`.`id`,\n    `info_cat_test`.`name`,\n    `info_cat_test`.`desc`,\n    `info_cat_test`.`sec_level`,\n    IF(`info_cat_test`.`sec_level`= 'H', \n    audit_api_message_emit_udf('sec_level_selected',\n                                         'audit_select_attempt',\n                                         ' H level sec data was accessed',\n                                         'FOR ', name\n                                         ), \n    'Not Audited')\nFROM `test_trigger`.`info_cat_test`;\n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log | egrep sec_level_selected\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep sec_level_priv\n\nThe audit data will look similar to the example below:\n{ \"timestamp\": \"2020-08-20 21:19:21\", \"id\": 1, \"class\": \"message\", \"event\": \"user\", \"connection_id\": 9, \"account\": { \"user\": \"root\", \"host\": \"localhost\" }, \"login\": { \"user\": \"root\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"message_data\": { \"component\": \"sec_level_selected\", \"producer\": \"audit_select_attempt\", \"message\": \" H level sec data was accessed\", \"map\": { \"FOR \": \"fred\" } } },\n\nIf the audit event is not present, this is a finding."
          },
          "fix": {
            "__old": "If currently required, configure the MySQL Database Server with stored\nprocedures that use selects that call audit_api_message_emit_udf() function to\nproduce audit records when selection of categories of information occurs.\n    Add security level details in an additional column.\n\n    Add the component for adding information to the audit log.\n\n    INSTALL COMPONENT \"file://component_audit_api_message_emit”;\n    create schema test_trigger;\n\n    Modify selections adding the audit_api_message_emit_udf to be called, as\nwell as providing the details for the audit event.\n\n    Transparently enforcing the use of MySQL stored procedures is required.\n\n    See the supplemental file \"MySQL80Audit.sql\".",
            "__new": "If currently required, configure the MySQL Database Server with stored procedures that use selects that call audit_api_message_emit_udf() function to produce audit records when selection of categories of information occurs.\nAdd security level details in an additional column.\n\nAdd the component for adding information to the audit log.\n\nINSTALL COMPONENT \"file://component_audit_api_message_emit”;\ncreate schema test_trigger;\n\nModify selections adding the audit_api_message_emit_udf to be called, as well as providing the details for the audit event.\n\nTransparently enforcing the use of MySQL stored procedures is required.\n\nSee the supplemental file \"MySQL80Audit.sql\"."
          }
        }
      },
      "SV-235110": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n  \n  audit_log_plugin_status = sql_session.query(audit_log_plugin)\n\n  query_audit_log_filter = %(\n  SELECT\n     audit_log_filter.NAME,\n     audit_log_filter.FILTER\n  FROM\n     mysql.audit_log_filter;\n  )\n\n  audit_log_filter_entries = sql_session.query(query_audit_log_filter)\n\n  query_audit_log_user = %(\n  SELECT\n     audit_log_user.USER,\n     audit_log_user.HOST,\n     audit_log_user.FILTERNAME\n  FROM\n     mysql.audit_log_user;\n  )\n\n  audit_log_user_entries = sql_session.query(query_audit_log_user)\n\n  query_server_audit_events = %(SHOW variables LIKE 'server_audit_events';)\n\n  server_audit_events_setting = sql_session.query(query_server_audit_events)\n\n  if !input('aws_rds')\n\n    # Following code design will allow for adaptive tests in this partially automatable control\n    # If ANY of the automatable tests FAIL, the control will report automated statues\n    # If ALL automatable tests PASS, MANUAL review statuses are reported to ensure full compliance\n\n    if !audit_log_plugin_status.results.column('plugin_status').join.eql?('ACTIVE') or\n       audit_log_filter_entries.results.empty? or\n       audit_log_user_entries.results.empty?\n\n      describe 'Audit Log Plugin status' do\n        subject { audit_log_plugin_status.results.column('plugin_status') }\n        it { should cmp 'ACTIVE' }\n      end\n\n      describe 'List of entries in Table: audit_log_filter' do\n        subject { audit_log_filter_entries.results }\n        it { should_not be_empty }\n      end\n\n      describe 'List of entries in Table: audit_log_user' do\n        subject { audit_log_user_entries.results }\n        it { should_not be_empty }\n      end\n    end\n\n    describe \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" do\n      skip \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\"\n    end\n    describe \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\" do\n      skip \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\"\n    end\n    describe \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" do\n      skip \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\"\n    end\n    describe \"Manually validate that required audit logs are generated when the following query is executed:\n    CREATE TABLE `test_trigger`.`info_cat_test` ( `id` INT NOT NULL, `name` VARCHAR(20) NULL, `desc` VARCHAR(20) NULL, `sec_level` CHAR(1) NULL, PRIMARY KEY (`id`));\n    INSERT INTO\n       `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) \n    VALUES\n       (\n          '1', 'fred', 'engineer', 'H'\n       )\n    ;\n    INSERT INTO\n       `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) \n    VALUES\n       (\n          '2', 'jill', 'program manager', 'M'\n       )\n    ;\n    INSERT INTO\n       `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) \n    VALUES\n       (\n          '3', 'joe', 'maintenance', 'L'\n       )\n    ;\n\n    Create a view using the where clause similar to that shown in the select. If inappropriate access is attempted, in this case H level, the select statement will write to the Audit log using the emit function.\n\n    SELECT\n       `info_cat_test`.`id`,\n       `info_cat_test`.`name`,\n       `info_cat_test`.`desc`,\n       `info_cat_test`.`sec_level` \n    FROM\n       `test_trigger`.`info_cat_test` \n    where\n       IF(`info_cat_test`.`sec_level` = 'H', CAST(audit_api_message_emit_udf('sec_level_H_ATTEMPTED_selected', 'audit_select_attempt', ' H level sec data was accessed', 'FOR ', name ) as CHAR), 'Not Audited') <> 'OK';\n    \" do\n      skip  \"Manually validate that required audit logs are generated when the following query is executed:\n      CREATE TABLE `test_trigger`.`info_cat_test` ( `id` INT NOT NULL, `name` VARCHAR(20) NULL, `desc` VARCHAR(20) NULL, `sec_level` CHAR(1) NULL, PRIMARY KEY (`id`));\n      INSERT INTO\n         `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) \n      VALUES\n         (\n            '1', 'fred', 'engineer', 'H'\n         )\n      ;\n      INSERT INTO\n         `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) \n      VALUES\n         (\n            '2', 'jill', 'program manager', 'M'\n         )\n      ;\n      INSERT INTO\n         `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) \n      VALUES\n         (\n            '3', 'joe', 'maintenance', 'L'\n         )\n      ;\n\n      Create a view using the where clause similar to that shown in the select. If inappropriate access is attempted, in this case H level, the select statement will write to the Audit log using the emit function.\n\n      SELECT\n         `info_cat_test`.`id`,\n         `info_cat_test`.`name`,\n         `info_cat_test`.`desc`,\n         `info_cat_test`.`sec_level` \n      FROM\n         `test_trigger`.`info_cat_test` \n      where\n         IF(`info_cat_test`.`sec_level` = 'H', CAST(audit_api_message_emit_udf('sec_level_H_ATTEMPTED_selected', 'audit_select_attempt', ' H level sec data was accessed', 'FOR ', name ) as CHAR), 'Not Audited') <> 'OK';\n      \"\n    end\n    \n  else\n    \n    describe '[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. Community Server (also used by AWS RDS) has reduced or different features. For Community Server, the MariaDB audit plugin may be used and configured to audit all CONNECT and QUERY events. Provide an attestation explaining how the type of events identified in this requirement are flagged by processes reading its generated audit logs.]' do\n      skip '[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. Community Server (also used by AWS RDS) has reduced or different features. For Community Server, the MariaDB audit plugin may be used and configured to audit all CONNECT and QUERY events. Provide an attestation explaining how the type of events identified in this requirement are flagged by processes reading its generated audit logs.]'\n    end\n  \n  end\n    ",
        "tags": {
          "check_id__added": "C-38329r623450_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235110r638812_rule",
            "__new": "SV-235110r961797_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must generate audit records when\nunsuccessful attempts to access categories of information (e.g., classification\nlevels/security levels) occur.",
          "__new": "The MySQL Database Server 8.0 must generate audit records when unsuccessful attempts to access categories of information (e.g., classification levels/security levels) occur."
        },
        "desc": {
          "__old": "Changes in categories of information must be tracked. Without an audit\ntrail, unauthorized access to protected data could go undetected.\n\n    To aid in diagnosis, it is necessary to keep track of failed attempts in\naddition to the successful ones.\n\n    For detailed information on categorizing information, refer to FIPS\nPublication 199, Standards for Security Categorization of Federal Information\nand Information Systems, and FIPS Publication 200, Minimum Security\nRequirements for Federal Information and Information Systems.",
          "__new": "Changes in categories of information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems."
        },
        "descs": {
          "default__deleted": "Changes in categories of information must be tracked. Without an audit\ntrail, unauthorized access to protected data could go undetected.\n\n    To aid in diagnosis, it is necessary to keep track of failed attempts in\naddition to the successful ones.\n\n    For detailed information on categorizing information, refer to FIPS\nPublication 199, Standards for Security Categorization of Federal Information\nand Information Systems, and FIPS Publication 200, Minimum Security\nRequirements for Federal Information and Information Systems.",
          "rationale__deleted": "",
          "check": {
            "__old": "If classification levels/security levels labeling is not required, this is\nnot a finding.\n\n    Review the system documentation to determine if MySQL Server is required to\naudit records when unsuccessful attempts to access categories of information\n(e.g., classification levels/security levels) occur.\n\n    Check if MySQL audit is configured and enabled. The my.cnf file will set\nthe variable audit_file.\n\n    To further check, execute the following query:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n          FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'audit%';\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for SERVER_AUDIT should return ACTIVE.]\n\n    The status of the audit_log plugin should be \"active\". If it is not\n\"active\", this is a finding.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used and configured to \naudit all CONNECT and QUERY events.\nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the CONNECT and QUERY events are enabled:\n    SHOW variables LIKE 'server_audit_events';\n    +---------------------+---------------+\n    | Variable_name       | Value         |\n    +---------------------+---------------+\n    | server_audit_events | CONNECT,QUERY |\n    +---------------------+---------------+\n  \t1 row in set (0.00 sec)    \n  \tThe value for server_audit_events should return CONNECT,QUERY.]\n  \n    Review audit filters and associated users by running the following queries:\n    SELECT `audit_log_filter`.`NAME`,\n       `audit_log_filter`.`FILTER`\n    FROM `mysql`.`audit_log_filter`;\n\n    SELECT `audit_log_user`.`USER`,\n       `audit_log_user`.`HOST`,\n       `audit_log_user`.`FILTERNAME`\n    FROM `mysql`.`audit_log_user`;\n\n    All currently defined audits for the MySQL server instance will be listed.\nIf no audits are returned, this is a finding.\n\n    Modify MySQL selects that check for changes to categories of information.\nModify selects statements to audit when information categories are access using\nMySQL Audit by calling the audit_api_message_emit_udf() function and including\nthe details related to the select.\n\n    - An Example test -\n\n    CREATE TABLE `test_trigger`.`info_cat_test` (\n      `id` INT NOT NULL,\n      `name` VARCHAR(20) NULL,\n      `desc` VARCHAR(20) NULL,\n      `sec_level` CHAR(1) NULL,\n      PRIMARY KEY (`id`));\n\n    DELIMITER $$\n\n\n    INSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`,\n`sec_level`) VALUES ('1', 'fred', 'engineer', 'H');\n    INSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`,\n`sec_level`) VALUES ('2', 'jill', 'program manager', 'M');\n    INSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`,\n`sec_level`) VALUES ('3', 'joe', 'maintenance', 'L');\n\n    Create a view using the where clause similar to that shown in the select.\nIf inappropriate access is attempted, in this case H level, the select\nstatement will write to the Audit log using the emit function.\n\n    SELECT `info_cat_test`.`id`,\n        `info_cat_test`.`name`,\n        `info_cat_test`.`desc`,\n        `info_cat_test`.`sec_level`\n    FROM `test_trigger`.`info_cat_test` where IF(`info_cat_test`.`sec_level`=\n'H',\n        CAST(audit_api_message_emit_udf('sec_level_H_ATTEMPTED_selected',\n                                             'audit_select_attempt',\n                                             ' H level sec data was accessed',\n                                             'FOR ', name\n                                             ) as CHAR),\n        'Not Audited') <> 'OK’;\n    The above test will write an audit event related to the selection of H\nsec_level data.\n\n    Review the audit log by running the Linux command:\n    sudo cat  <directory where audit log files are located>/audit.log | egrep\nsec_level_H_ATTEMPTED_selected\n    For example if the values returned by - \"select @@datadir,\n@@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\n    sudo cat  /usr/local/mysql/data/audit.log |egrep\nsec_level_H_ATTEMPTED_selected\n\n    If the audit event similar to the example below is not present, this is a\nfinding.\n\n    The audit data will look similar to the example below:\n    Not Audited') <> 'OK'    LIMIT 0, 1000\", \"sql_command\": \"select\" } },\n    { \"timestamp\": \"2020-08-21 14:04:53\", \"id\": 2, \"class\":\n\"message\", \"event\": \"user\", \"connection_id\": 9, \"account\": {\n\"user\": \"root\", \"host\": \"localhost\" }, \"login\": { \"user\": \"root\",\n\"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"message_data\": {\n\"component\": \"sec_level_H_ATTEMPTED_selected\", \"producer\":\n\"audit_select_attempt\", \"message\": \" H level sec data was accessed\",\n\"map\": { \"FOR \": \"fred\" } } },",
            "__new": "If classification levels/security levels labeling is not required, this is not a finding.\n\nReview the system documentation to determine if MySQL Server is required to audit records when unsuccessful attempts to access categories of information (e.g., classification levels/security levels) occur.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin should be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nModify MySQL selects that check for changes to categories of information. Modify selects statements to audit when information categories are access using MySQL Audit by calling the audit_api_message_emit_udf() function and including the details related to the select. \n\n- An Example test -\n\nCREATE TABLE `test_trigger`.`info_cat_test` (\n  `id` INT NOT NULL,\n  `name` VARCHAR(20) NULL,\n  `desc` VARCHAR(20) NULL,\n  `sec_level` CHAR(1) NULL,\n  PRIMARY KEY (`id`));\n\nDELIMITER $$\n\n\nINSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) VALUES ('1', 'fred', 'engineer', 'H');\nINSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) VALUES ('2', 'jill', 'program manager', 'M');\nINSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) VALUES ('3', 'joe', 'maintenance', 'L');\n\nCreate a view using the where clause similar to that shown in the select. If inappropriate access is attempted, in this case H level, the select statement will write to the Audit log using the emit function.\n\nSELECT `info_cat_test`.`id`,\n    `info_cat_test`.`name`,\n    `info_cat_test`.`desc`,\n    `info_cat_test`.`sec_level`\nFROM `test_trigger`.`info_cat_test` where IF(`info_cat_test`.`sec_level`= 'H', \n    CAST(audit_api_message_emit_udf('sec_level_H_ATTEMPTED_selected',\n                                         'audit_select_attempt',\n                                         ' H level sec data was accessed',\n                                         'FOR ', name\n                                         ) as CHAR), \n    'Not Audited') <> 'OK’;\nThe above test will write an audit event related to the selection of H sec_level data.\n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log | egrep sec_level_H_ATTEMPTED_selected\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep sec_level_H_ATTEMPTED_selected\n\nIf the audit event similar to the example below is not present, this is a finding. \n\nThe audit data will look similar to the example below:\nNot Audited') <> 'OK'\\nLIMIT 0, 1000\", \"sql_command\": \"select\" } },\n{ \"timestamp\": \"2020-08-21 14:04:53\", \"id\": 2, \"class\": \"message\", \"event\": \"user\", \"connection_id\": 9, \"account\": { \"user\": \"root\", \"host\": \"localhost\" }, \"login\": { \"user\": \"root\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"message_data\": { \"component\": \"sec_level_H_ATTEMPTED_selected\", \"producer\": \"audit_select_attempt\", \"message\": \" H level sec data was accessed\", \"map\": { \"FOR \": \"fred\" } } },"
          },
          "fix": {
            "__old": "If currently required, configure the MySQL Database Server with views that\nuse selects that call audit_api_message_emit_udf() function to produce audit\nrecords when selection of categories of information occurs.\n    Add security level details in an additional column if necessary.\n\n    Add the component for adding information to the audit log.\n\n    INSTALL COMPONENT \"file://component_audit_api_message_emit”;\n\n    To transparently enforce the use of MySQL view is required.\n\n    See the supplemental file \"MySQL80Audit.sql\".",
            "__new": "If currently required, configure the MySQL Database Server with views that use selects that call audit_api_message_emit_udf() function to produce audit records when selection of categories of information occurs.\nAdd security level details in an additional column if necessary.\n\nAdd the component for adding information to the audit log.\n\nINSTALL COMPONENT \"file://component_audit_api_message_emit”;\n\nTo transparently enforce the use of MySQL view is required.\n\nSee the supplemental file \"MySQL80Audit.sql\"."
          }
        }
      },
      "SV-235111": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n  \n  audit_log_plugin_status = sql_session.query(audit_log_plugin)\n\n  query_audit_log_filter = %(\n  SELECT\n     audit_log_filter.NAME,\n     audit_log_filter.FILTER\n  FROM\n     mysql.audit_log_filter;\n  )\n\n  audit_log_filter_entries = sql_session.query(query_audit_log_filter)\n\n  query_audit_log_user = %(\n  SELECT\n     audit_log_user.USER,\n     audit_log_user.HOST,\n     audit_log_user.FILTERNAME\n  FROM\n     mysql.audit_log_user;\n  )\n\n  audit_log_user_entries = sql_session.query(query_audit_log_user)\n\n  query_server_audit_events = %(SHOW variables LIKE 'server_audit_events';)\n\n  server_audit_events_setting = sql_session.query(query_server_audit_events)\n\n\n  if !input('aws_rds')\n\n    # Following code design will allow for adaptive tests in this partially automatable control\n    # If ANY of the automatable tests FAIL, the control will report automated statues\n    # If ALL automatable tests PASS, MANUAL review statuses are reported to ensure full compliance\n\n    if !audit_log_plugin_status.results.column('plugin_status').join.eql?('ACTIVE') or\n       audit_log_filter_entries.results.empty? or\n       audit_log_user_entries.results.empty?\n\n      describe 'Audit Log Plugin status' do\n        subject { audit_log_plugin_status.results.column('plugin_status') }\n        it { should cmp 'ACTIVE' }\n      end\n\n      describe 'List of entries in Table: audit_log_filter' do\n        subject { audit_log_filter_entries.results }\n        it { should_not be_empty }\n      end\n\n      describe 'List of entries in Table: audit_log_user' do\n        subject { audit_log_user_entries.results }\n        it { should_not be_empty }\n      end\n    end\n\n    describe \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" do\n      skip \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\"\n    end\n    describe \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\" do\n      skip \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\"\n    end\n    describe \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" do\n      skip \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\"\n    end\n    \n  else\n    \n    describe 'Audit Log Plugin status' do\n      subject { audit_log_plugin_status.results.column('plugin_status') }\n      it { should cmp 'ACTIVE' }\n    end\n\n    describe 'Community Server server_audit_events settings' do\n      subject { Set[server_audit_events_setting.results.column('value')[0].split(',')] }\n      it { should cmp Set['CONNECT,QUERY'.split(',')] }\n    end\n    \n  end\n    ",
        "tags": {
          "check_id__added": "C-38330r623453_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235111r638812_rule",
            "__new": "SV-235111r961800_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must generate audit records when\nprivileges/permissions are added.",
          "__new": "The MySQL Database Server 8.0 must generate audit records when privileges/permissions are added."
        },
        "desc": {
          "__old": "Changes in the permissions, privileges, and roles granted to users and\nroles must be tracked. Without an audit trail, unauthorized elevation or\nrestriction of individuals and groups privileges could go undetected. Elevated\nprivileges give users access to information and functionality that they must\nnot have; restricted privileges wrongly deny access to authorized users.\n\n    In a SQL environment, adding permissions is typically done via the GRANT\ncommand, or, in the negative, the DENY command.",
          "__new": "Changes in the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized elevation or restriction of individuals and groups privileges could go undetected. Elevated privileges give users access to information and functionality that they must not have; restricted privileges wrongly deny access to authorized users.\n\nIn a SQL environment, adding permissions is typically done via the GRANT command, or, in the negative, the DENY command."
        },
        "descs": {
          "default__deleted": "Changes in the permissions, privileges, and roles granted to users and\nroles must be tracked. Without an audit trail, unauthorized elevation or\nrestriction of individuals and groups privileges could go undetected. Elevated\nprivileges give users access to information and functionality that they must\nnot have; restricted privileges wrongly deny access to authorized users.\n\n    In a SQL environment, adding permissions is typically done via the GRANT\ncommand, or, in the negative, the DENY command.",
          "rationale__deleted": "",
          "check": {
            "__old": "Check that MySQL Server Audit is being used for the STIG compliant audit.\n\n    Check if MySQL audit is configured and enabled. The my.cnf file will set\nthe variable audit_file.\n\n    To further check, execute the following query:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n          FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'audit%';\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for SERVER_AUDIT should return ACTIVE.]\n\n    The status of the audit_log plugin should be \"active\". If it is not\n\"active\", this is a finding.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used and configured to \naudit all CONNECT and QUERY events.\nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the CONNECT and QUERY events are enabled:\n    SHOW variables LIKE 'server_audit_events';\n    +---------------------+---------------+\n    | Variable_name       | Value         |\n    +---------------------+---------------+\n    | server_audit_events | CONNECT,QUERY |\n    +---------------------+---------------+\n  \t1 row in set (0.00 sec)    \n  \tThe value for server_audit_events should return CONNECT,QUERY.]\n  \n\n    Review audit filters and associated users by running the following queries:\n    SELECT `audit_log_filter`.`NAME`,\n       `audit_log_filter`.`FILTER`\n    FROM `mysql`.`audit_log_filter`;\n\n    SELECT `audit_log_user`.`USER`,\n       `audit_log_user`.`HOST`,\n       `audit_log_user`.`FILTERNAME`\n    FROM `mysql`.`audit_log_user`;\n\n    All currently defined audits for the MySQL server instance will be listed.\nIf no audits are returned, this is a finding.\n\n    Determine if rules are in place to capture the following types of commands\nrelated to permissions by running the command:\n    select * from mysql.audit_log_filter;\n\n    If the template SQL filter was used, it will have the name log_stig.\n\n    Review the filter value. It will show filters for events of the  type field\ngeneral_sql_command.str for the following SQL statement types:\n    grant\n    grant_roles\n    revoke\n    revoke_all\n    revoke_roles\n    drop_role\n    alter_user_default_role\n    create_role\n    drop_role\n    grant_roles\n    revoke_roles\n    set_role\n    create_user\n    alter_user\n    drop_user\n    alter_user\n    alter_user_default_role\n    create_user\n    drop_user\n    rename_user\n    show_create_user",
            "__new": "Check that MySQL Server Audit is being used for the STIG compliant audit.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin should be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nDetermine if rules are in place to capture the following types of commands related to permissions by running the command:\nselect * from mysql.audit_log_filter;\n\nIf the template SQL filter was used, it will have the name log_stig.\n\nReview the filter value. It will show filters for events of the  type field general_sql_command.str for the following SQL statement types:\ngrant\ngrant_roles\nrevoke\nrevoke_all\nrevoke_roles\ndrop_role\nalter_user_default_role\ncreate_role\ndrop_role\ngrant_roles\nrevoke_roles\nset_role\ncreate_user\nalter_user\ndrop_user\nalter_user\nalter_user_default_role\ncreate_user\ndrop_user\nrename_user\nshow_create_user"
          },
          "fix": {
            "__old": "Configure the MySQL Database Server to audit when privileges/permissions\nare added.\n\n    Add the following events to the MySQL Server Audit being used for the STIG\ncompliance audit:\n    grant\n    grant_roles\n    revoke\n    revoke_all\n    revoke_roles\n    drop_role\n    alter_user_default_role\n    create_role\n    drop_role\n    grant_roles\n    revoke_roles\n    set_role\n    create_user\n    alter_user\n    drop_user\n    alter_user\n    alter_user_default_role\n    create_user\n    drop_user\n    rename_user\n    show_create_user\n\n    See the supplemental file \"MySQL80Audit.sql\".",
            "__new": "Configure the MySQL Database Server to audit when privileges/permissions are added.\n\nAdd the following events to the MySQL Server Audit being used for the STIG compliance audit: \ngrant\ngrant_roles\nrevoke\nrevoke_all\nrevoke_roles\ndrop_role\nalter_user_default_role\ncreate_role\ndrop_role\ngrant_roles\nrevoke_roles\nset_role\ncreate_user\nalter_user\ndrop_user\nalter_user\nalter_user_default_role\ncreate_user\ndrop_user\nrename_user\nshow_create_user\n\nSee the supplemental file \"MySQL80Audit.sql\"."
          }
        }
      },
      "SV-235112": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n  \n  audit_log_plugin_status = sql_session.query(audit_log_plugin)\n\n  query_audit_log_filter = %(\n  SELECT\n     audit_log_filter.NAME,\n     audit_log_filter.FILTER\n  FROM\n     mysql.audit_log_filter;\n  )\n\n  audit_log_filter_entries = sql_session.query(query_audit_log_filter)\n\n  query_audit_log_user = %(\n  SELECT\n     audit_log_user.USER,\n     audit_log_user.HOST,\n     audit_log_user.FILTERNAME\n  FROM\n     mysql.audit_log_user;\n  )\n\n  audit_log_user_entries = sql_session.query(query_audit_log_user)\n\n  query_server_audit_events = %(SHOW variables LIKE 'server_audit_events';)\n\n  server_audit_events_setting = sql_session.query(query_server_audit_events)\n\n\n  if !input('aws_rds')\n  \n\n    # Following code design will allow for adaptive tests in this partially automatable control\n    # If ANY of the automatable tests FAIL, the control will report automated statues\n    # If ALL automatable tests PASS, MANUAL review statuses are reported to ensure full compliance\n\n    if !audit_log_plugin_status.results.column('plugin_status').join.eql?('ACTIVE') or\n       audit_log_filter_entries.results.empty? or\n       audit_log_user_entries.results.empty?\n\n      describe 'Audit Log Plugin status' do\n        subject { audit_log_plugin_status.results.column('plugin_status') }\n        it { should cmp 'ACTIVE' }\n      end\n\n      describe 'List of entries in Table: audit_log_filter' do\n        subject { audit_log_filter_entries.results }\n        it { should_not be_empty }\n      end\n\n      describe 'List of entries in Table: audit_log_user' do\n        subject { audit_log_user_entries.results }\n        it { should_not be_empty }\n      end\n    end\n\n    describe \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" do\n      skip \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\"\n    end\n    describe \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\" do\n      skip \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\"\n    end\n    describe \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" do\n      skip \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\"\n    end\n    \n  else\n    \n    describe 'Audit Log Plugin status' do\n      subject { audit_log_plugin_status.results.column('plugin_status') }\n      it { should cmp 'ACTIVE' }\n    end\n\n    describe 'Community Server server_audit_events settings' do\n      subject { Set[server_audit_events_setting.results.column('value')[0].split(',')] }\n      it { should cmp Set['CONNECT,QUERY'.split(',')] }\n    end\n    \n  end\n    ",
        "tags": {
          "check_id__added": "C-38331r623456_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235112r638812_rule",
            "__new": "SV-235112r961800_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must generate audit records when\nunsuccessful attempts to add privileges/permissions occur.",
          "__new": "The MySQL Database Server 8.0 must generate audit records when unsuccessful attempts to add privileges/permissions occur."
        },
        "desc": {
          "__old": "Failed attempts to change the permissions, privileges, and roles\ngranted to users and roles must be tracked. Without an audit trail,\nunauthorized attempts to elevate or restrict individuals and groups privileges\ncould go undetected.\n\n    In a SQL environment, adding permissions is typically done via the GRANT\ncommand, or, in the negative, the DENY command.\n\n    To aid in diagnosis, it is necessary to keep track of failed attempts in\naddition to the successful ones.",
          "__new": "Failed attempts to change the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized attempts to elevate or restrict individuals and groups privileges could go undetected.\n\nIn a SQL environment, adding permissions is typically done via the GRANT command, or, in the negative, the DENY command.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones."
        },
        "descs": {
          "default__deleted": "Failed attempts to change the permissions, privileges, and roles\ngranted to users and roles must be tracked. Without an audit trail,\nunauthorized attempts to elevate or restrict individuals and groups privileges\ncould go undetected.\n\n    In a SQL environment, adding permissions is typically done via the GRANT\ncommand, or, in the negative, the DENY command.\n\n    To aid in diagnosis, it is necessary to keep track of failed attempts in\naddition to the successful ones.",
          "rationale__deleted": "",
          "check": {
            "__old": "Check that MySQL Server Audit is being used for the STIG compliant audit.\n\n    Check if MySQL audit is configured and enabled. The my.cnf file will set\nthe variable audit_file.\n\n    To further check, execute the following query:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n          FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'audit%';\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for SERVER_AUDIT should return ACTIVE.]\n\n    The status of the audit_log plugin must be \"active\". If it is not\n\"active\", this is a finding.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used and configured to \naudit all CONNECT and QUERY events.\nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the CONNECT and QUERY events are enabled:\n    SHOW variables LIKE 'server_audit_events';\n    +---------------------+---------------+\n    | Variable_name       | Value         |\n    +---------------------+---------------+\n    | server_audit_events | CONNECT,QUERY |\n    +---------------------+---------------+\n  \t1 row in set (0.00 sec)    \n  \tThe value for server_audit_events should return CONNECT,QUERY.]\n  \n\n    Review audit filters and associated users by running the following queries:\n    SELECT `audit_log_filter`.`NAME`,\n       `audit_log_filter`.`FILTER`\n    FROM `mysql`.`audit_log_filter`;\n\n    SELECT `audit_log_user`.`USER`,\n       `audit_log_user`.`HOST`,\n       `audit_log_user`.`FILTERNAME`\n    FROM `mysql`.`audit_log_user`;\n\n    All currently defined audits for the MySQL server instance will be listed.\nIf no audits are returned, this is a finding.\n\n    Determine if rules are in place to capture the following types of commands\nrelated to permissions by running the command:\n    select * from mysql.audit_log_filter;\n\n    If the template SQL filter was used, it will have the name log_stig.\n\n    Review the filter values. It will show filters for events of the type of\nfield general_sql_command.str for the following SQL statement types:\n    grant\n    grant_roles\n    revoke\n    revoke_all\n    revoke_roles\n    drop_role\n    alter_user_default_role\n    create_role\n    drop_role\n    grant_roles\n    revoke_roles\n    set_role\n    create_user\n    alter_user\n    drop_user\n    alter_user\n    alter_user_default_role\n    create_user\n    drop_user\n    rename_user\n    show_create_user",
            "__new": "Check that MySQL Server Audit is being used for the STIG compliant audit.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nDetermine if rules are in place to capture the following types of commands related to permissions by running the command:\nselect * from mysql.audit_log_filter;\n\nIf the template SQL filter was used, it will have the name log_stig.\n\nReview the filter values. It will show filters for events of the type of field general_sql_command.str for the following SQL statement types:\ngrant\ngrant_roles\nrevoke\nrevoke_all\nrevoke_roles\ndrop_role\nalter_user_default_role\ncreate_role\ndrop_role\ngrant_roles\nrevoke_roles\nset_role\ncreate_user\nalter_user\ndrop_user\nalter_user\nalter_user_default_role\ncreate_user\ndrop_user\nrename_user\nshow_create_user"
          },
          "fix": {
            "__old": "Configure the MySQL Database Server to audit when privileges/permissions\nare added.\n\n    Add the following events to the MySQL Server Audit that is being used for\nthe STIG compliance audit:\n    grant\n    grant_roles\n    revoke\n    revoke_all\n    revoke_roles\n    drop_role\n    alter_user_default_role\n    create_role\n    drop_role\n    grant_roles\n    revoke_roles\n    set_role\n    create_user\n    alter_user\n    drop_user\n    alter_user\n    alter_user_default_role\n    create_user\n    drop_user\n    rename_user\n    show_create_user\n\n    See the supplemental file \"MySQL80Audit.sql\".",
            "__new": "Configure the MySQL Database Server to audit when privileges/permissions are added.\n\nAdd the following events to the MySQL Server Audit that is being used for the STIG compliance audit: \ngrant\ngrant_roles\nrevoke\nrevoke_all\nrevoke_roles\ndrop_role\nalter_user_default_role\ncreate_role\ndrop_role\ngrant_roles\nrevoke_roles\nset_role\ncreate_user\nalter_user\ndrop_user\nalter_user\nalter_user_default_role\ncreate_user\ndrop_user\nrename_user\nshow_create_user\n\nSee the supplemental file \"MySQL80Audit.sql\"."
          }
        }
      },
      "SV-235113": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n\n  audit_log_plugin_status = sql_session.query(audit_log_plugin)\n\n  query_audit_log_filter = %(\n  SELECT\n     audit_log_filter.NAME,\n     audit_log_filter.FILTER\n  FROM\n     mysql.audit_log_filter;\n  )\n\n  audit_log_filter_entries = sql_session.query(query_audit_log_filter)\n\n  query_audit_log_user = %(\n  SELECT\n     audit_log_user.USER,\n     audit_log_user.HOST,\n     audit_log_user.FILTERNAME\n  FROM\n     mysql.audit_log_user;\n  )\n\n  audit_log_user_entries = sql_session.query(query_audit_log_user)\n\n  query_server_audit_events = %(SHOW variables LIKE 'server_audit_events';)\n\n  server_audit_events_setting = sql_session.query(query_server_audit_events)\n\n\n  if !input('aws_rds')\n\n    # Following code design will allow for adaptive tests in this partially automatable control\n    # If ANY of the automatable tests FAIL, the control will report automated statues\n    # If ALL automatable tests PASS, MANUAL review statuses are reported to ensure full compliance\n\n    if !audit_log_plugin_status.results.column('plugin_status').join.eql?('ACTIVE') or\n       audit_log_filter_entries.results.empty? or\n       audit_log_user_entries.results.empty?\n\n      describe 'Audit Log Plugin status' do\n        subject { audit_log_plugin_status.results.column('plugin_status') }\n        it { should cmp 'ACTIVE' }\n      end\n\n      describe 'List of entries in Table: audit_log_filter' do\n        subject { audit_log_filter_entries.results }\n        it { should_not be_empty }\n      end\n\n      describe 'List of entries in Table: audit_log_user' do\n        subject { audit_log_user_entries.results }\n        it { should_not be_empty }\n      end\n    end\n\n    describe \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" do\n      skip \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" \n    end\n    describe \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\" do\n      skip \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\"\n    end\n    describe \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" do\n      skip \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" \n    end\n    \n  else\n    \n    describe 'Audit Log Plugin status' do\n      subject { audit_log_plugin_status.results.column('plugin_status') }\n      it { should cmp 'ACTIVE' }\n    end\n\n    describe 'Community Server server_audit_events settings' do\n      subject { Set[server_audit_events_setting.results.column('value')[0].split(',')] }\n      it { should cmp Set['CONNECT,QUERY'.split(',')] }\n    end\n    \n  end\n    ",
        "tags": {
          "check_id__added": "C-38332r623459_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235113r638812_rule",
            "__new": "SV-235113r961800_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must generate audit records when\nprivileges/permissions are modified.",
          "__new": "The MySQL Database Server 8.0 must generate audit records when privileges/permissions are modified."
        },
        "desc": {
          "__old": "Changes in the permissions, privileges, and roles granted to users and\nroles must be tracked. Without an audit trail, unauthorized elevation or\nrestriction of individuals and groups privileges could go undetected. Elevated\nprivileges give users access to information and functionality that they should\nnot have; restricted privileges wrongly deny access to authorized users.\n\n    In a SQL environment, modifying permissions is typically done via the\nGRANT, REVOKE, and DENY commands.",
          "__new": "Changes in the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized elevation or restriction of individuals and groups privileges could go undetected. Elevated privileges give users access to information and functionality that they should not have; restricted privileges wrongly deny access to authorized users.\n\nIn a SQL environment, modifying permissions is typically done via the GRANT, REVOKE, and DENY commands."
        },
        "descs": {
          "default__deleted": "Changes in the permissions, privileges, and roles granted to users and\nroles must be tracked. Without an audit trail, unauthorized elevation or\nrestriction of individuals and groups privileges could go undetected. Elevated\nprivileges give users access to information and functionality that they should\nnot have; restricted privileges wrongly deny access to authorized users.\n\n    In a SQL environment, modifying permissions is typically done via the\nGRANT, REVOKE, and DENY commands.",
          "rationale__deleted": "",
          "check": {
            "__old": "Check that MySQL Server Audit is being used for the STIG compliant audit.\n\n    Check if MySQL audit is configured and enabled. The my.cnf file will set\nthe variable audit_file.\n\n    To further check, execute the following query:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n          FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'audit%';\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for SERVER_AUDIT should return ACTIVE.]\n\n    The status of the audit_log plugin must be \"active\". If it is not\n\"active\", this is a finding.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used and configured to \naudit all CONNECT and QUERY events.\nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the CONNECT and QUERY events are enabled:\n    SHOW variables LIKE 'server_audit_events';\n    +---------------------+---------------+\n    | Variable_name       | Value         |\n    +---------------------+---------------+\n    | server_audit_events | CONNECT,QUERY |\n    +---------------------+---------------+\n  \t1 row in set (0.00 sec)    \n  \tThe value for server_audit_events should return CONNECT,QUERY.]\n  \n\n    Review audit filters and associated users by running the following queries:\n    SELECT `audit_log_filter`.`NAME`,\n       `audit_log_filter`.`FILTER`\n    FROM `mysql`.`audit_log_filter`;\n\n    SELECT `audit_log_user`.`USER`,\n       `audit_log_user`.`HOST`,\n       `audit_log_user`.`FILTERNAME`\n    FROM `mysql`.`audit_log_user`;\n\n    All currently defined audits for the MySQL server instance will be listed.\nIf no audits are returned, this is a finding.\n\n    Determine if rules are in place to capture the following types of commands\nrelated to permissions by running:\n    select * from mysql.audit_log_filter;\n\n    If the template SQL filter was used, it will have the name log_stig.\n\n    Review the filter values it will show filters for events of the type of the\nfield general_sql_command.str for the following SQL statement types:\n    grant\n    grant_roles\n    revoke\n    revoke_all\n    revoke_roles\n    drop_role\n    alter_user_default_role\n    create_role\n    drop_role\n    grant_roles\n    revoke_roles\n    set_role\n    create_user\n    alter_user\n    drop_user\n    alter_user\n    alter_user_default_role\n    create_user\n    drop_user\n    rename_user\n    show_create_user",
            "__new": "Check that MySQL Server Audit is being used for the STIG compliant audit.  \n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nDetermine if rules are in place to capture the following types of commands related to permissions by running:\nselect * from mysql.audit_log_filter;\n\nIf the template SQL filter was used, it will have the name log_stig.\n\nReview the filter values it will show filters for events of the type of the field general_sql_command.str for the following SQL statement types:\ngrant\ngrant_roles\nrevoke\nrevoke_all\nrevoke_roles\ndrop_role\nalter_user_default_role\ncreate_role\ndrop_role\ngrant_roles\nrevoke_roles\nset_role\ncreate_user\nalter_user\ndrop_user\nalter_user\nalter_user_default_role\ncreate_user\ndrop_user\nrename_user\nshow_create_user"
          },
          "fix": {
            "__old": "Configure the MySQL Database Server to audit when privileges/permissions\nare added.\n\n    Add the following events to the MySQL Server Audit that is being used for\nthe STIG compliance audit:\n    grant\n    grant_roles\n    revoke\n    revoke_all\n    revoke_roles\n    drop_role\n    alter_user_default_role\n    create_role\n    drop_role\n    grant_roles\n    revoke_roles\n    set_role\n    create_user\n    alter_user\n    drop_user\n    alter_user\n    alter_user_default_role\n    create_user\n    drop_user\n    rename_user\n    show_create_user\n\n    See the supplemental file \"MySQL80Audit.sql\".",
            "__new": "Configure the MySQL Database Server to audit when privileges/permissions are added.\n\nAdd the following events to the MySQL Server Audit that is being used for the STIG compliance audit:\ngrant\ngrant_roles\nrevoke\nrevoke_all\nrevoke_roles\ndrop_role\nalter_user_default_role\ncreate_role\ndrop_role\ngrant_roles\nrevoke_roles\nset_role\ncreate_user\nalter_user\ndrop_user\nalter_user\nalter_user_default_role\ncreate_user\ndrop_user\nrename_user\nshow_create_user\n\nSee the supplemental file \"MySQL80Audit.sql\"."
          }
        }
      },
      "SV-235114": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n\n  audit_log_plugin_status = sql_session.query(audit_log_plugin)\n\n  query_audit_log_filter = %(\n  SELECT\n     audit_log_filter.NAME,\n     audit_log_filter.FILTER\n  FROM\n     mysql.audit_log_filter;\n  )\n\n  audit_log_filter_entries = sql_session.query(query_audit_log_filter)\n\n  query_audit_log_user = %(\n  SELECT\n     audit_log_user.USER,\n     audit_log_user.HOST,\n     audit_log_user.FILTERNAME\n  FROM\n     mysql.audit_log_user;\n  )\n\n  audit_log_user_entries = sql_session.query(query_audit_log_user)\n\n  query_server_audit_events = %(SHOW variables LIKE 'server_audit_events';)\n\n  server_audit_events_setting = sql_session.query(query_server_audit_events)\n\n\n  if !input('aws_rds')\n\n    # Following code design will allow for adaptive tests in this partially automatable control\n    # If ANY of the automatable tests FAIL, the control will report automated statues\n    # If ALL automatable tests PASS, MANUAL review statuses are reported to ensure full compliance\n\n    if !audit_log_plugin_status.results.column('plugin_status').join.eql?('ACTIVE') or\n       audit_log_filter_entries.results.empty? or\n       audit_log_user_entries.results.empty?\n\n      describe 'Audit Log Plugin status' do\n        subject { audit_log_plugin_status.results.column('plugin_status') }\n        it { should cmp 'ACTIVE' }\n      end\n\n      describe 'List of entries in Table: audit_log_filter' do\n        subject { audit_log_filter_entries.results }\n        it { should_not be_empty }\n      end\n\n      describe 'List of entries in Table: audit_log_user' do\n        subject { audit_log_user_entries.results }\n        it { should_not be_empty }\n      end\n    end\n\n    describe \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" do\n      skip \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\"\n    end\n    describe \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\" do\n      skip \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\"\n    end\n    describe \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" do\n      skip \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\"\n    end\n    \n  else\n    \n    describe 'Audit Log Plugin status' do\n      subject { audit_log_plugin_status.results.column('plugin_status') }\n      it { should cmp 'ACTIVE' }\n    end\n\n    describe 'Community Server server_audit_events settings' do\n      subject { Set[server_audit_events_setting.results.column('value')[0].split(',')] }\n      it { should cmp Set['CONNECT,QUERY'.split(',')] }\n    end\n    \n  end\n    ",
        "tags": {
          "check_id__added": "C-38333r623462_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235114r638812_rule",
            "__new": "SV-235114r961800_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must generate audit records when\nunsuccessful attempts to modify privileges/permissions occur.",
          "__new": "The MySQL Database Server 8.0 must generate audit records when unsuccessful attempts to modify privileges/permissions occur."
        },
        "desc": {
          "__old": "Failed attempts to change the permissions, privileges, and roles\ngranted to users and roles must be tracked. Without an audit trail,\nunauthorized attempts to elevate or restrict individual and group privileges\ncould go undetected.\n\n    In an SQL environment, modifying permissions is typically done via the\nGRANT, REVOKE, and DENY commands.\n\n    To aid in diagnosis, it is necessary to keep track of failed attempts in\naddition to the successful ones.",
          "__new": "Failed attempts to change the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized attempts to elevate or restrict individual and group privileges could go undetected.   \n\nIn an SQL environment, modifying permissions is typically done via the GRANT, REVOKE, and DENY commands.  \n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones."
        },
        "descs": {
          "default__deleted": "Failed attempts to change the permissions, privileges, and roles\ngranted to users and roles must be tracked. Without an audit trail,\nunauthorized attempts to elevate or restrict individual and group privileges\ncould go undetected.\n\n    In an SQL environment, modifying permissions is typically done via the\nGRANT, REVOKE, and DENY commands.\n\n    To aid in diagnosis, it is necessary to keep track of failed attempts in\naddition to the successful ones.",
          "rationale__deleted": "",
          "check": {
            "__old": "Check that MySQL Server Audit is being used for the STIG compliant audit.\n\n    Check if MySQL audit is configured and enabled. The my.cnf file will set\nthe variable audit_file.\n\n    To further check, execute the following query:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n          FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'audit%';\n\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for SERVER_AUDIT should return ACTIVE.]\n\n    The status of the audit_log plugin must be \"active\". If it is not\n\"active\", this is a finding.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used and configured to \naudit all CONNECT and QUERY events.\nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the CONNECT and QUERY events are enabled:\n    SHOW variables LIKE 'server_audit_events';\n    +---------------------+---------------+\n    | Variable_name       | Value         |\n    +---------------------+---------------+\n    | server_audit_events | CONNECT,QUERY |\n    +---------------------+---------------+\n  \t1 row in set (0.00 sec)    \n  \tThe value for server_audit_events should return CONNECT,QUERY.]\n  \n\n    Review audit filters and associated users by running the following queries:\n    SELECT `audit_log_filter`.`NAME`,\n       `audit_log_filter`.`FILTER`\n    FROM `mysql`.`audit_log_filter`;\n\n    SELECT `audit_log_user`.`USER`,\n       `audit_log_user`.`HOST`,\n       `audit_log_user`.`FILTERNAME`\n    FROM `mysql`.`audit_log_user`;\n\n    All currently defined audits for the MySQL server instance will be listed.\nIf no audits are returned, this is a finding.\n\n    Determine if rules are in place to capture the following types of commands\nrelated to permissions by running:\n    select * from mysql.audit_log_filter;\n\n    If the template SQL filter was used, it will have the name log_stig.\n\n    Review the filter values. It will show filters for events of the type of\nthe field general_sql_command.str for the following SQL statement types:\n    grant\n    grant_roles\n    revoke\n    revoke_all\n    revoke_roles\n    drop_role\n    alter_user_default_role\n    create_role\n    drop_role\n    grant_roles\n    revoke_roles\n    set_role\n    create_user\n    alter_user\n    drop_user\n    alter_user\n    alter_user_default_role\n    create_user\n    drop_user\n    rename_user\n    show_create_user",
            "__new": "Check that MySQL Server Audit is being used for the STIG compliant audit.  \n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nDetermine if rules are in place to capture the following types of commands related to permissions by running:\nselect * from mysql.audit_log_filter;\n\nIf the template SQL filter was used, it will have the name log_stig.\n\nReview the filter values. It will show filters for events of the type of the field general_sql_command.str for the following SQL statement types:\ngrant\ngrant_roles\nrevoke\nrevoke_all\nrevoke_roles\ndrop_role\nalter_user_default_role\ncreate_role\ndrop_role\ngrant_roles\nrevoke_roles\nset_role\ncreate_user\nalter_user\ndrop_user\nalter_user\nalter_user_default_role\ncreate_user\ndrop_user\nrename_user\nshow_create_user"
          },
          "fix": {
            "__old": "Configure the MySQL Database Server to audit when privileges/permissions\nare added.\n\n    Add the following events to the MySQL Server Audit that is being used for\nthe STIG compliance audit:\n    grant\n    grant_roles\n    revoke\n    revoke_all\n    revoke_roles\n    drop_role\n    alter_user_default_role\n    create_role\n    drop_role\n    grant_roles\n    revoke_roles\n    set_role\n    create_user\n    alter_user\n    drop_user\n    alter_user\n    alter_user_default_role\n    create_user\n    drop_user\n    rename_user\n    show_create_user\n\n    See the supplemental file \"MySQL80Audit.sql\".",
            "__new": "Configure the MySQL Database Server to audit when privileges/permissions are added.\n\nAdd the following events to the MySQL Server Audit that is being used for the STIG compliance audit: \ngrant\ngrant_roles\nrevoke\nrevoke_all\nrevoke_roles\ndrop_role\nalter_user_default_role\ncreate_role\ndrop_role\ngrant_roles\nrevoke_roles\nset_role\ncreate_user\nalter_user\ndrop_user\nalter_user\nalter_user_default_role\ncreate_user\ndrop_user\nrename_user\nshow_create_user\n\nSee the supplemental file \"MySQL80Audit.sql\"."
          }
        }
      },
      "SV-235115": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n  \n  audit_log_plugin_status = sql_session.query(audit_log_plugin)\n\n  query_audit_log_filter = %(\n  SELECT\n     audit_log_filter.NAME,\n     audit_log_filter.FILTER\n  FROM\n     mysql.audit_log_filter;\n  )\n\n  audit_log_filter_entries = sql_session.query(query_audit_log_filter)\n\n  query_audit_log_user = %(\n  SELECT\n     audit_log_user.USER,\n     audit_log_user.HOST,\n     audit_log_user.FILTERNAME\n  FROM\n     mysql.audit_log_user;\n  )\n\n  audit_log_user_entries = sql_session.query(query_audit_log_user)\n\n  query_server_audit_events = %(SHOW variables LIKE 'server_audit_events';)\n\n  server_audit_events_setting = sql_session.query(query_server_audit_events)\n\n\n  if !input('aws_rds')\n  \n    # Following code design will allow for adaptive tests in this partially automatable control\n    # If ANY of the automatable tests FAIL, the control will report automated statues\n    # If ALL automatable tests PASS, MANUAL review statuses are reported to ensure full compliance\n\n    if !audit_log_plugin_status.results.column('plugin_status').join.eql?('ACTIVE') or\n       audit_log_filter_entries.results.empty? or\n       audit_log_user_entries.results.empty?\n\n      describe 'Audit Log Plugin status' do\n        subject { audit_log_plugin_status.results.column('plugin_status') }\n        it { should cmp 'ACTIVE' }\n      end\n\n      describe 'List of entries in Table: audit_log_filter' do\n        subject { audit_log_filter_entries.results }\n        it { should_not be_empty }\n      end\n\n      describe 'List of entries in Table: audit_log_user' do\n        subject { audit_log_user_entries.results }\n        it { should_not be_empty }\n      end\n    end\n\n    describe \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" do\n      skip \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\"\n    end\n    describe \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\" do\n      skip \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\"\n    end\n    describe \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" do\n      skip \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\"\n    end\n    describe 'Manually validate that required audit logs are generated when the specified query is executed.' do\n      skip 'Manually validate that required audit logs are generated when the specified query is executed.'\n    end\n    \n  else\n    \n    describe 'Audit Log Plugin status' do\n      subject { audit_log_plugin_status.results.column('plugin_status') }\n      it { should cmp 'ACTIVE' }\n    end\n\n    describe 'Community Server server_audit_events settings' do\n      subject { Set[server_audit_events_setting.results.column('value')[0].split(',')] }\n      it { should cmp Set['CONNECT,QUERY'.split(',')] }\n    end\n    \n  end\n    ",
        "tags": {
          "check_id__added": "C-38334r623465_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235115r638812_rule",
            "__new": "SV-235115r961803_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must generate audit records when\nsecurity objects are modified.",
          "__new": "The MySQL Database Server 8.0 must generate audit records when security objects are modified."
        },
        "desc": {
          "__old": "Changes in the database objects (tables, views, procedures, functions)\nthat record and control permissions, privileges, and roles granted to users and\nroles must be tracked. Without an audit trail, unauthorized changes to the\nsecurity subsystem could go undetected. The database could be severely\ncompromised or rendered inoperative.",
          "__new": "Changes in the database objects (tables, views, procedures, functions) that record and control permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized changes to the security subsystem could go undetected. The database could be severely compromised or rendered inoperative."
        },
        "descs": {
          "default__deleted": "Changes in the database objects (tables, views, procedures, functions)\nthat record and control permissions, privileges, and roles granted to users and\nroles must be tracked. Without an audit trail, unauthorized changes to the\nsecurity subsystem could go undetected. The database could be severely\ncompromised or rendered inoperative.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the system documentation to determine if MySQL Server is required to\naudit when security objects are modified.\n\n    Check if MySQL audit is configured and enabled. The my.cnf file will set\nthe variable audit_file.\n\n    To further check, execute the following query:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n          FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'audit%';\n\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for SERVER_AUDIT should return ACTIVE.]\n\n    The status of the audit_log plugin must be \"active\". If it is not\n\"active\", this is a finding.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used and configured to \naudit all CONNECT and QUERY events.\nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the CONNECT and QUERY events are enabled:\n    SHOW variables LIKE 'server_audit_events';\n    +---------------------+---------------+\n    | Variable_name       | Value         |\n    +---------------------+---------------+\n    | server_audit_events | CONNECT,QUERY |\n    +---------------------+---------------+\n  \t1 row in set (0.00 sec)    \n  \tThe value for server_audit_events should return CONNECT,QUERY.]\n  \n\n    Review audit filters and associated users by running the following queries:\n    SELECT `audit_log_filter`.`NAME`,\n       `audit_log_filter`.`FILTER`\n    FROM `mysql`.`audit_log_filter`;\n\n    SELECT `audit_log_user`.`USER`,\n       `audit_log_user`.`HOST`,\n       `audit_log_user`.`FILTERNAME`\n    FROM `mysql`.`audit_log_user`;\n\n    All currently defined audits for the MySQL server instance will be listed.\nIf no audits are returned, this is a finding.\n\n    To check if the audit filters that are in place are generating records when\nsecurity objects are modified, run the following, which will test auditing\nwithout destroying data:\n    update mysql.global_grants set host='%' where PRIV='XXXX’;\n\n    Review the audit log by running the Linux command:\n    sudo cat  <directory where audit log files are located>/audit.log|egrep\nglobal_grants\n    For example if the values returned by \"select @@datadir, @@audit_log_file;\n\" are  /usr/local/mysql/data/,  audit.log\n    sudo cat  /usr/local/mysql/data/audit.log |egrep global_grants\n    For example if the values returned by \"select @@datadir, @@audit_log_file;\n\" are  /usr/local/mysql/data/,  audit.log\n    sudo cat  /usr/local/mysql/data/audit.log |egrep global_grants\n\n    The audit data will look similar to the example below:\n    { \"timestamp\": \"2020-08-19 21:32:27\", \"id\": 2, \"class\":\n\"general\", \"event\": \"status\", \"connection_id\": 9, \"account\": {\n\"user\": \"root\", \"host\": \"localhost\" }, \"login\": { \"user\": \"root\",\n\"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"general_data\": {\n\"command\": \"Query\", \"sql_command\": \"update\", \"query\": \"update\nmysql.global_grants set host='%' where PRIV='XXXX'\", \"status\": 0 } }\n\n    If the audit event is not present, this is a finding.",
            "__new": "Review the system documentation to determine if MySQL Server is required to audit when security objects are modified.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters that are in place are generating records when security objects are modified, run the following, which will test auditing without destroying data:\nupdate mysql.global_grants set host='%' where PRIV='XXXX’;\n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log|egrep global_grants\nFor example if the values returned by \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep global_grants\nFor example if the values returned by \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep global_grants\n\nThe audit data will look similar to the example below:\n{ \"timestamp\": \"2020-08-19 21:32:27\", \"id\": 2, \"class\": \"general\", \"event\": \"status\", \"connection_id\": 9, \"account\": { \"user\": \"root\", \"host\": \"localhost\" }, \"login\": { \"user\": \"root\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"general_data\": { \"command\": \"Query\", \"sql_command\": \"update\", \"query\": \"update mysql.global_grants set host='%' where PRIV='XXXX'\", \"status\": 0 } }\n\nIf the audit event is not present, this is a finding."
          },
          "fix": {
            "__old": "If currently required, configure the MySQL Database Server to produce audit\nrecords when security objects are modified.\n\n    See the supplemental file \"MySQL80Audit.sql\".",
            "__new": "If currently required, configure the MySQL Database Server to produce audit records when security objects are modified.\n\nSee the supplemental file \"MySQL80Audit.sql\"."
          }
        }
      },
      "SV-235116": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n\n  audit_log_plugin_status = sql_session.query(audit_log_plugin)\n\n  query_audit_log_filter = %(\n  SELECT\n     audit_log_filter.NAME,\n     audit_log_filter.FILTER\n  FROM\n     mysql.audit_log_filter;\n  )\n\n  audit_log_filter_entries = sql_session.query(query_audit_log_filter)\n\n  query_audit_log_user = %(\n  SELECT\n     audit_log_user.USER,\n     audit_log_user.HOST,\n     audit_log_user.FILTERNAME\n  FROM\n     mysql.audit_log_user;\n  )\n\n  audit_log_user_entries = sql_session.query(query_audit_log_user)\n\n  query_server_audit_events = %(SHOW variables LIKE 'server_audit_events';)\n\n  server_audit_events_setting = sql_session.query(query_server_audit_events)\n\n\n  if !input('aws_rds')\n  \n    # Following code design will allow for adaptive tests in this partially automatable control\n    # If ANY of the automatable tests FAIL, the control will report automated statues\n    # If ALL automatable tests PASS, MANUAL review statuses are reported to ensure full compliance\n\n    if !audit_log_plugin_status.results.column('plugin_status').join.eql?('ACTIVE') or\n       audit_log_filter_entries.results.empty? or\n       audit_log_user_entries.results.empty?\n\n      describe 'Audit Log Plugin status' do\n        subject { audit_log_plugin_status.results.column('plugin_status') }\n        it { should cmp 'ACTIVE' }\n      end\n\n      describe 'List of entries in Table: audit_log_filter' do\n        subject { audit_log_filter_entries.results }\n        it { should_not be_empty }\n      end\n\n      describe 'List of entries in Table: audit_log_user' do\n        subject { audit_log_user_entries.results }\n        it { should_not be_empty }\n      end\n    end\n\n    describe \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" do\n      skip \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\"\n    end\n    describe \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\" do\n      skip \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\"\n    end\n    describe \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" do\n      skip \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\"\n    end\n    describe 'Manually validate that required audit logs are generated when the specified query is executed.' do\n      skip 'Manually validate that required audit logs are generated when the specified query is executed.'\n    end\n    \n  else\n    \n    describe 'Audit Log Plugin status' do\n      subject { audit_log_plugin_status.results.column('plugin_status') }\n      it { should cmp 'ACTIVE' }\n    end\n\n    describe 'Community Server server_audit_events settings' do\n      subject { Set[server_audit_events_setting.results.column('value')[0].split(',')] }\n      it { should cmp Set['CONNECT,QUERY'.split(',')] }\n    end\n    \n  end\n    ",
        "tags": {
          "check_id__added": "C-38335r623468_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235116r638812_rule",
            "__new": "SV-235116r961803_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must generate audit records when\nunsuccessful attempts to modify security objects occur.",
          "__new": "The MySQL Database Server 8.0 must generate audit records when unsuccessful attempts to modify security objects occur."
        },
        "desc": {
          "__old": "Changes in the database objects (tables, views, procedures, functions)\nthat record and control permissions, privileges, and roles granted to users and\nroles must be tracked. Without an audit trail, unauthorized changes to the\nsecurity subsystem could go undetected. The database could be severely\ncompromised or rendered inoperative.\n\n    To aid in diagnosis, it is necessary to keep track of failed attempts in\naddition to the successful ones.",
          "__new": "Changes in the database objects (tables, views, procedures, functions) that record and control permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized changes to the security subsystem could go undetected. The database could be severely compromised or rendered inoperative.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones."
        },
        "descs": {
          "default__deleted": "Changes in the database objects (tables, views, procedures, functions)\nthat record and control permissions, privileges, and roles granted to users and\nroles must be tracked. Without an audit trail, unauthorized changes to the\nsecurity subsystem could go undetected. The database could be severely\ncompromised or rendered inoperative.\n\n    To aid in diagnosis, it is necessary to keep track of failed attempts in\naddition to the successful ones.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the system documentation to determine if MySQL Server is required to\naudit when unsuccessful attempts to modify security objects occur.\n\n    Check if MySQL audit is configured and enabled. The my.cnf file will set\nthe variable audit_file.\n\n    To further check, execute the following query:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n          FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'audit%';\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for SERVER_AUDIT should return ACTIVE.]\n\n    The status of the audit_log plugin must be \"active\". If it is not\n\"active\", this is a finding.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used and configured to \naudit all CONNECT and QUERY events.\nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the CONNECT and QUERY events are enabled:\n    SHOW variables LIKE 'server_audit_events';\n    +---------------------+---------------+\n    | Variable_name       | Value         |\n    +---------------------+---------------+\n    | server_audit_events | CONNECT,QUERY |\n    +---------------------+---------------+\n  \t1 row in set (0.00 sec)    \n  \tThe value for server_audit_events should return CONNECT,QUERY.]\n\n    Review audit filters and associated users by running the following queries:\n    SELECT `audit_log_filter`.`NAME`,\n       `audit_log_filter`.`FILTER`\n    FROM `mysql`.`audit_log_filter`;\n\n    SELECT `audit_log_user`.`USER`,\n       `audit_log_user`.`HOST`,\n       `audit_log_user`.`FILTERNAME`\n    FROM `mysql`.`audit_log_user`;\n\n    All currently defined audits for the MySQL server instance will be listed.\nIf no audits are returned, this is a finding.\n\n    To check if the audit filters in place are generating records when\nunsuccessful attempts to modify security objects occur, run the following as a\nuser without administrator-level privileges:\n    update mysql.global_grants set host='%' where PRIV='XXXX’;\n\n    Review the audit log by running the Linux command:\n    sudo cat  <directory where audit log files are located>/audit.log|egrep\nglobal_grants\n    For example if the values returned by - \"select @@datadir,\n@@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\n    sudo cat  /usr/local/mysql/data/audit.log |egrep global_grants\n\n    The audit data will look similar to the example below and contain a\nnon-zero status value:\n    { \"timestamp\": \"2020-08-19 21:32:27\", \"id\": 2, \"class\":\n\"general\", \"event\": \"status\", \"connection_id\": 9, \"account\": {\n\"user\": \"root\", \"host\": \"localhost\" }, \"login\": { \"user\": \"root\",\n\"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"general_data\": {\n\"command\": \"Query\", \"sql_command\": \"update\", \"query\": \"update\nmysql.global_grants set host='%' where PRIV='XXXX'\", \"status\": 1421 } }\n\n    If the audit event is not present, this is a finding.",
            "__new": "Review the system documentation to determine if MySQL Server is required to audit when unsuccessful attempts to modify security objects occur.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters in place are generating records when unsuccessful attempts to modify security objects occur, run the following as a user without administrator-level privileges:\nupdate mysql.global_grants set host='%' where PRIV='XXXX’;\n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log|egrep global_grants\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep global_grants\n\nThe audit data will look similar to the example below and contain a non-zero status value:\n{ \"timestamp\": \"2020-08-19 21:32:27\", \"id\": 2, \"class\": \"general\", \"event\": \"status\", \"connection_id\": 9, \"account\": { \"user\": \"root\", \"host\": \"localhost\" }, \"login\": { \"user\": \"root\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"general_data\": { \"command\": \"Query\", \"sql_command\": \"update\", \"query\": \"update mysql.global_grants set host='%' where PRIV='XXXX'\", \"status\": 1421 } }\n\nIf the audit event is not present, this is a finding."
          },
          "fix": {
            "__old": "If currently required, configure the MySQL Database Server to produce audit\nrecords when unsuccessful attempts to modify security objects occur.\n\n    See the supplemental file \"MySQL80Audit.sql\".",
            "__new": "If currently required, configure the MySQL Database Server to produce audit records when unsuccessful attempts to modify security objects occur.\n\nSee the supplemental file \"MySQL80Audit.sql\"."
          }
        }
      },
      "SV-235117": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n  \n  audit_log_plugin_status = sql_session.query(audit_log_plugin)\n\n  query_audit_log_filter = %(\n  SELECT\n     audit_log_filter.NAME,\n     audit_log_filter.FILTER\n  FROM\n     mysql.audit_log_filter;\n  )\n\n  audit_log_filter_entries = sql_session.query(query_audit_log_filter)\n\n  query_audit_log_user = %(\n  SELECT\n     audit_log_user.USER,\n     audit_log_user.HOST,\n     audit_log_user.FILTERNAME\n  FROM\n     mysql.audit_log_user;\n  )\n\n  audit_log_user_entries = sql_session.query(query_audit_log_user)\n\n  query_server_audit_events = %(SHOW variables LIKE 'server_audit_events';)\n\n  server_audit_events_setting = sql_session.query(query_server_audit_events)\n\n\n  if !input('aws_rds')\n  \n    # Following code design will allow for adaptive tests in this partially automatable control\n    # If ANY of the automatable tests FAIL, the control will report automated statues\n    # If ALL automatable tests PASS, MANUAL review statuses are reported to ensure full compliance\n\n    if !audit_log_plugin_status.results.column('plugin_status').join.eql?('ACTIVE') or\n       audit_log_filter_entries.results.empty? or\n       audit_log_user_entries.results.empty?\n\n      describe 'Audit Log Plugin status' do\n        subject { audit_log_plugin_status.results.column('plugin_status') }\n        it { should cmp 'ACTIVE' }\n      end\n\n      describe 'List of entries in Table: audit_log_filter' do\n        subject { audit_log_filter_entries.results }\n        it { should_not be_empty }\n      end\n\n      describe 'List of entries in Table: audit_log_user' do\n        subject { audit_log_user_entries.results }\n        it { should_not be_empty }\n      end\n    end\n\n    describe \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" do\n      skip \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\"\n    end\n    describe \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\" do\n      skip \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\"\n    end\n    describe \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" do\n      skip \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\"\n    end\n    describe 'Manually validate that required audit logs are generated when the specified query is executed.' do\n      skip 'Manually validate that required audit logs are generated when the specified query is executed.'\n    end\n    \n  else\n    \n    describe 'Audit Log Plugin status' do\n      subject { audit_log_plugin_status.results.column('plugin_status') }\n      it { should cmp 'ACTIVE' }\n    end\n\n    describe 'Community Server server_audit_events settings' do\n      subject { Set[server_audit_events_setting.results.column('value')[0].split(',')] }\n      it { should cmp Set['CONNECT,QUERY'.split(',')] }\n    end\n    \n  end\n",
        "tags": {
          "check_id__added": "C-38336r623471_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235117r638812_rule",
            "__new": "SV-235117r961809_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must generate audit records when\ncategories of information (e.g., classification levels/security levels) are\nmodified.",
          "__new": "The MySQL Database Server 8.0 must generate audit records when categories of information (e.g., classification levels/security levels) are modified."
        },
        "desc": {
          "__old": "Changes in categories of information must be tracked. Without an audit\ntrail, unauthorized access to protected data could go undetected.\n\n    For detailed information on categorizing information, refer to FIPS\nPublication 199, Standards for Security Categorization of Federal Information\nand Information Systems, and FIPS Publication 200, Minimum Security\nRequirements for Federal Information and Information Systems.",
          "__new": "Changes in categories of information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems."
        },
        "descs": {
          "default__deleted": "Changes in categories of information must be tracked. Without an audit\ntrail, unauthorized access to protected data could go undetected.\n\n    For detailed information on categorizing information, refer to FIPS\nPublication 199, Standards for Security Categorization of Federal Information\nand Information Systems, and FIPS Publication 200, Minimum Security\nRequirements for Federal Information and Information Systems.",
          "rationale__deleted": "",
          "check": {
            "__old": "If classification levels/security levels labeling is not required, this is\nnot a finding.\n\n    Review the system documentation to determine if MySQL Server is required to\naudit records when deletion of categories of information (e.g., classification\nlevels/security levels) occurs.\n\n    Check if MySQL audit is configured and enabled. The my.cnf file will set\nthe variable audit_file.\n\n    To further check, execute the following query:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n          FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'audit%';\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for SERVER_AUDIT should return ACTIVE.]\n\n    The status of the audit_log plugin must be \"active\". If it is not\n\"active\", this is a finding.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used and configured to \naudit all CONNECT and QUERY events.\nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the CONNECT and QUERY events are enabled:\n    SHOW variables LIKE 'server_audit_events';\n    +---------------------+---------------+\n    | Variable_name       | Value         |\n    +---------------------+---------------+\n    | server_audit_events | CONNECT,QUERY |\n    +---------------------+---------------+\n  \t1 row in set (0.00 sec)    \n  \tThe value for server_audit_events should return CONNECT,QUERY.]\n    \n    Review audit filters and associated users by running the following queries:\n    SELECT `audit_log_filter`.`NAME`,\n       `audit_log_filter`.`FILTER`\n    FROM `mysql`.`audit_log_filter`;\n\n    SELECT `audit_log_user`.`USER`,\n       `audit_log_user`.`HOST`,\n       `audit_log_user`.`FILTERNAME`\n    FROM `mysql`.`audit_log_user`;\n\n    All currently defined audits for the MySQL server instance will be listed.\nIf no audits are returned, this is a finding.\n\n    Create MySQL insert, update, and delete triggers that check for changes to\ncategories of information. If the trigger before data indicates an attempt to\ndelete such information, the trigger must be written to prevent the delete as\nwell as optionally write to the MySQL Audit by calling the\naudit_api_message_emit_udf() function and including the details related to the\nattempt. Note: To call from a trigger requires a minimal stored procedure as\nwell.\n\n    Once the trigger has been created, check if the audit filters in place are\ngenerating records when categories of information are deleted.\n\n    - An Example test -\n\n    CREATE TABLE `test_trigger`.`info_cat_test` (\n      `id` INT NOT NULL,\n      `name` VARCHAR(20) NULL,\n      `desc` VARCHAR(20) NULL,\n      `sec_level` CHAR(1) NULL,\n      PRIMARY KEY (`id`));\n\n    use test_trigger;\n\n    DELIMITER $$\n\n    CREATE TRIGGER test_trigger.audit_delete\n        BEFORE DELETE ON `test_trigger`.`info_cat_test`\n        FOR EACH ROW\n    BEGIN\n        IF OLD.sec_level = 'H' THEN\n    \t    CALL audit_api_message_emit_sp(OLD.name);\n        END IF;\n    END$$\n    DELIMITER ;\n\n    DELIMITER $$\n\n    CREATE TRIGGER audit_insert\n        BEFORE INSERT ON `test_trigger`.`info_cat_test`\n        FOR EACH ROW\n    BEGIN\n        IF NEW.sec_level = 'H' THEN\n    \t    CALL audit_api_message_emit_sp(NEW.name);\n        END IF;\n    END$$\n    DELIMITER ;\n\n    DELIMITER $$\n\n    CREATE TRIGGER audit_update\n        BEFORE UPDATE ON `test_trigger`.`info_cat_test`\n        FOR EACH ROW\n    BEGIN\n        IF OLD.sec_level = 'H' THEN\n    \t    CALL audit_api_message_emit_sp(OLD.name);\n        END IF;\n    \tIF NEW.sec_level = 'H' THEN\n    \t    CALL audit_api_message_emit_sp(NEW.name);\n        END IF;\n    END$$\n    DELIMITER ;\n\n    INSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`,\n`sec_level`) VALUES ('1', 'fred', 'engineer', 'H');\n    INSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`,\n`sec_level`) VALUES ('2', 'jill', 'program manager', 'M');\n    INSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`,\n`sec_level`) VALUES ('3', 'joe', 'maintenance', 'L');\n\n    delete from `test_trigger`.`info_cat_test` where id=1;\n    // this fails as the trigger defines that sec_level of H can not be deleted.\n\n    update`test_trigger`.`info_cat_test`  set sec_level=‘H’   where id=2;\n    delete from `test_trigger`.`info_cat_test` where id=3;\n\n    Review the audit log by running the Linux command:\n    sudo cat  <directory where audit log files are located>/audit.log | egrep\naudit_change_attempt\n\n    If the audit event is not present, this is a finding.",
            "__new": "If classification levels/security levels labeling is not required, this is not a finding.\n\nReview the system documentation to determine if MySQL Server is required to audit records when deletion of categories of information (e.g., classification levels/security levels) occurs.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nCreate MySQL insert, update, and delete triggers that check for changes to categories of information. If the trigger before data indicates an attempt to delete such information, the trigger must be written to prevent the delete as well as optionally write to the MySQL Audit by calling the audit_api_message_emit_udf() function and including the details related to the attempt. Note: To call from a trigger requires a minimal stored procedure as well.\n\nOnce the trigger has been created, check if the audit filters in place are generating records when categories of information are deleted.\n\n- An Example test -\n\nCREATE TABLE `test_trigger`.`info_cat_test` (\n  `id` INT NOT NULL,\n  `name` VARCHAR(20) NULL,\n  `desc` VARCHAR(20) NULL,\n  `sec_level` CHAR(1) NULL,\n  PRIMARY KEY (`id`));\n\nuse test_trigger;\n\nDELIMITER $$\n\nCREATE TRIGGER test_trigger.audit_delete\n    BEFORE DELETE ON `test_trigger`.`info_cat_test`\n    FOR EACH ROW\nBEGIN\n    IF OLD.sec_level = 'H' THEN\n\t    CALL audit_api_message_emit_sp(OLD.name);\n    END IF;\nEND$$\nDELIMITER ;\n\nDELIMITER $$\n\nCREATE TRIGGER audit_insert\n    BEFORE INSERT ON `test_trigger`.`info_cat_test`\n    FOR EACH ROW\nBEGIN\n    IF NEW.sec_level = 'H' THEN\n\t    CALL audit_api_message_emit_sp(NEW.name);\n    END IF;\nEND$$\nDELIMITER ;\n\nDELIMITER $$\n\nCREATE TRIGGER audit_update\n    BEFORE UPDATE ON `test_trigger`.`info_cat_test`\n    FOR EACH ROW\nBEGIN\n    IF OLD.sec_level = 'H' THEN\n\t    CALL audit_api_message_emit_sp(OLD.name);\n    END IF;\n\tIF NEW.sec_level = 'H' THEN\n\t    CALL audit_api_message_emit_sp(NEW.name);\n    END IF;\nEND$$\nDELIMITER ;\n\nINSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) VALUES ('1', 'fred', 'engineer', 'H');\nINSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) VALUES ('2', 'jill', 'program manager', 'M');\nINSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) VALUES ('3', 'joe', 'maintenance', 'L');\n\ndelete from `test_trigger`.`info_cat_test` where id=1;\n// this fails as the trigger defines that sec_level of H can not be deleted.\n\nupdate`test_trigger`.`info_cat_test`  set sec_level=‘H’   where id=2;\ndelete from `test_trigger`.`info_cat_test` where id=3;\n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log | egrep audit_change_attempt\n\nIf the audit event is not present, this is a finding."
          },
          "fix": {
            "__old": "If currently required, configure the MySQL Database Server with update,\ninsert, and delete triggers that call audit_api_message_emit_udf() function  to\nproduce audit records when unsuccessful attempts to modify categories of\ninformation occur.\n\n    Add security level details in an additional column.\n\n    Add the component for adding information to the audit log.\n\n    INSTALL COMPONENT \"file://component_audit_api_message_emit”;\n    create schema test_trigger;\n\n    Create a stored procedure to allow the audit_api_message_emit_udf to be\ncalled as well as providing the details for the audit event.\n\n    DELIMITER $$\n\n    CREATE PROCEDURE audit_api_message_emit_delete_sp(name CHAR(20))\n    BEGIN\n    \tDECLARE aud_msg VARCHAR(255);\n    \tselect audit_api_message_emit_udf('sec_level_trigger',\n                                             'TRIGGER audit_change_attempt',\n                                             'Attempt was made to change H\nlevel sec data',\n                                             'FOR ', name\n                                             ) into aud_msg;\n    END$$\n    DELIMITER ;\n\n    See the supplemental file \"MySQL80Audit.sql\".",
            "__new": "If currently required, configure the MySQL Database Server with update, insert, and delete triggers that call audit_api_message_emit_udf() function  to produce audit records when unsuccessful attempts to modify categories of information occur.\n\nAdd security level details in an additional column.\n\nAdd the component for adding information to the audit log.\n\nINSTALL COMPONENT \"file://component_audit_api_message_emit”;\ncreate schema test_trigger;\n\nCreate a stored procedure to allow the audit_api_message_emit_udf to be called as well as providing the details for the audit event.\n\nDELIMITER $$\n\nCREATE PROCEDURE audit_api_message_emit_delete_sp(name CHAR(20))\nBEGIN\n\tDECLARE aud_msg VARCHAR(255);\n\tselect audit_api_message_emit_udf('sec_level_trigger',\n                                         'TRIGGER audit_change_attempt',\n                                         'Attempt was made to change H level sec data',\n                                         'FOR ', name\n                                         ) into aud_msg;\nEND$$\nDELIMITER ;\n\nSee the supplemental file \"MySQL80Audit.sql\"."
          }
        }
      },
      "SV-235118": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n\n  audit_log_plugin_status = sql_session.query(audit_log_plugin)\n\n  query_audit_log_filter = %(\n  SELECT\n     audit_log_filter.NAME,\n     audit_log_filter.FILTER\n  FROM\n     mysql.audit_log_filter;\n  )\n\n  audit_log_filter_entries = sql_session.query(query_audit_log_filter)\n\n  query_audit_log_user = %(\n  SELECT\n     audit_log_user.USER,\n     audit_log_user.HOST,\n     audit_log_user.FILTERNAME\n  FROM\n     mysql.audit_log_user;\n  )\n\n  audit_log_user_entries = sql_session.query(query_audit_log_user)\n\n  query_server_audit_events = %(SHOW variables LIKE 'server_audit_events';)\n\n  server_audit_events_setting = sql_session.query(query_server_audit_events)\n\n\n  if !input('aws_rds')\n  \n    # Following code design will allow for adaptive tests in this partially automatable control\n    # If ANY of the automatable tests FAIL, the control will report automated statues\n    # If ALL automatable tests PASS, MANUAL review statuses are reported to ensure full compliance\n\n    if !audit_log_plugin_status.results.column('plugin_status').join.eql?('ACTIVE') or\n       audit_log_filter_entries.results.empty? or\n       audit_log_user_entries.results.empty?\n\n      describe 'Audit Log Plugin status' do\n        subject { audit_log_plugin_status.results.column('plugin_status') }\n        it { should cmp 'ACTIVE' }\n      end\n\n      describe 'List of entries in Table: audit_log_filter' do\n        subject { audit_log_filter_entries.results }\n        it { should_not be_empty }\n      end\n\n      describe 'List of entries in Table: audit_log_user' do\n        subject { audit_log_user_entries.results }\n        it { should_not be_empty }\n      end\n    end\n\n    describe \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" do\n      skip \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\"\n    end\n    describe \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\" do\n      skip \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\"\n    end\n    describe \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" do\n      skip \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\"\n    end\n    describe 'Manually validate that required audit logs are generated when the specified query is executed.' do\n      skip 'Manually validate that required audit logs are generated when the specified query is executed.'\n    end\n    \n  else\n    \n    describe 'Audit Log Plugin status' do\n      subject { audit_log_plugin_status.results.column('plugin_status') }\n      it { should cmp 'ACTIVE' }\n    end\n\n    describe 'Community Server server_audit_events settings' do\n      subject { Set[server_audit_events_setting.results.column('value')[0].split(',')] }\n      it { should cmp Set['CONNECT,QUERY'.split(',')] }\n    end\n    \n  end\n    ",
        "tags": {
          "check_id__added": "C-38337r623474_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235118r638812_rule",
            "__new": "SV-235118r961809_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must generate audit records when\nunsuccessful attempts to modify categories of information (e.g., classification\nlevels/security levels) occur.",
          "__new": "The MySQL Database Server 8.0 must generate audit records when unsuccessful attempts to modify categories of information (e.g., classification levels/security levels) occur."
        },
        "desc": {
          "__old": "Changes in categories of information must be tracked. Without an audit\ntrail, unauthorized access to protected data could go undetected.\n\n    To aid in diagnosis, it is necessary to keep track of failed attempts in\naddition to the successful ones.\n\n    For detailed information on categorizing information, refer to FIPS\nPublication 199, Standards for Security Categorization of Federal Information\nand Information Systems, and FIPS Publication 200, Minimum Security\nRequirements for Federal Information and Information Systems.",
          "__new": "Changes in categories of information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems."
        },
        "descs": {
          "default__deleted": "Changes in categories of information must be tracked. Without an audit\ntrail, unauthorized access to protected data could go undetected.\n\n    To aid in diagnosis, it is necessary to keep track of failed attempts in\naddition to the successful ones.\n\n    For detailed information on categorizing information, refer to FIPS\nPublication 199, Standards for Security Categorization of Federal Information\nand Information Systems, and FIPS Publication 200, Minimum Security\nRequirements for Federal Information and Information Systems.",
          "rationale__deleted": "",
          "check": {
            "__old": "If classification levels/security levels labeling is not required, this is\nnot a finding.\n\n    Review the system documentation to determine if MySQL Server is required to\naudit records when unsuccessful attempts to modify categories of information\n(e.g., classification levels/security levels) occur.\n\n    Check if MySQL audit is configured and enabled. The my.cnf file will set\nthe variable audit_file.\n\n    To further check, execute the following query:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n          FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'audit%';\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for SERVER_AUDIT should return ACTIVE.]\n\n    The status of the audit_log plugin should be \"active\". If it is not\n\"active\", this is a finding.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used and configured to \naudit all CONNECT and QUERY events.\nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the CONNECT and QUERY events are enabled:\n    SHOW variables LIKE 'server_audit_events';\n    +---------------------+---------------+\n    | Variable_name       | Value         |\n    +---------------------+---------------+\n    | server_audit_events | CONNECT,QUERY |\n    +---------------------+---------------+\n  \t1 row in set (0.00 sec)    \n  \tThe value for server_audit_events should return CONNECT,QUERY.]\n  \n    Review audit filters and associated users by running the following queries:\n    SELECT `audit_log_filter`.`NAME`,\n       `audit_log_filter`.`FILTER`\n    FROM `mysql`.`audit_log_filter`;\n\n    SELECT `audit_log_user`.`USER`,\n       `audit_log_user`.`HOST`,\n       `audit_log_user`.`FILTERNAME`\n    FROM `mysql`.`audit_log_user`;\n\n    All currently defined audits for the MySQL server instance will be listed.\nIf no audits are returned, this is a finding.\n\n    Create MySQL insert, update, and delete triggers that check for changes to\ncategories of information. If the trigger before data indicates an attempt to\ndelete such information, the trigger should be written to prevent the delete as\nwell as optionally write to the MySQL Audit by calling the\naudit_api_message_emit_udf() function and including the details related to the\nattempt. Note: To call from a trigger requires a minimal stored procedure as\nwell.\n\n    Once the trigger has been created, check if the audit filters that are in\nplace are generating records when categories of information are deleted.\n\n    - An Example test -\n\n    CREATE TABLE `test_trigger`.`info_cat_test` (\n      `id` INT NOT NULL,\n      `name` VARCHAR(20) NULL,\n      `desc` VARCHAR(20) NULL,\n      `sec_level` CHAR(1) NULL,\n      PRIMARY KEY (`id`));\n\n    use test_trigger;\n\n    DELIMITER $$\n\n    CREATE TRIGGER audit_delete\n        BEFORE DELETE ON `test_trigger`.`info_cat_test`\n        FOR EACH ROW\n    BEGIN\n        IF OLD.sec_level = 'H' THEN\n    \tCALL audit_api_message_emit_sp(OLD.name);\n            SIGNAL SQLSTATE '45000'\n                SET MESSAGE_TEXT = 'ERROR - THIS DATA IS LEVEL H can not\ndelete’;\n       END IF;\n    END$$\n    DELIMITER ;\n\n    DELIMITER $$\n\n    CREATE TRIGGER audit_insert\n        BEFORE INSERT ON `test_trigger`.`info_cat_test`\n        FOR EACH ROW\n    BEGIN\n        IF NEW.sec_level = 'H' THEN\n    \tCALL audit_api_message_emit_sp(NEW.name);\n            SIGNAL SQLSTATE '45000'\n                SET MESSAGE_TEXT = 'ERROR - THIS DATA IS LEVEL H can not\ninsert’;\n        END IF;\n    END$$\n    DELIMITER ;\n\n    DELIMITER $$\n\n    CREATE TRIGGER audit_update\n        BEFORE UPDATE ON `test_trigger`.`info_cat_test`\n        FOR EACH ROW\n    BEGIN\n        IF OLD.sec_level = 'H' THEN\n    \t    CALL audit_api_message_emit_sp(OLD.name);\n        END IF;\n        IF NEW.sec_level = 'H' THEN\n    \t    CALL audit_api_message_emit_sp(NEW.name);\n        END IF;\n        SIGNAL SQLSTATE '45000'\n                SET MESSAGE_TEXT = 'ERROR - THIS DATA IS LEVEL H can not\nupdate';\n    END$$\n    DELIMITER ;\n\n    INSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`,\n`sec_level`) VALUES ('1', 'fred', 'engineer', 'H');\n    INSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`,\n`sec_level`) VALUES ('2', 'jill', 'program manager', 'M');\n    INSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`,\n`sec_level`) VALUES ('3', 'joe', 'maintenance', 'L');\n\n    delete from `test_trigger`.`info_cat_test` where id=1;\n    // this fails as the trigger defines that sec_level of H can not be deleted.\n\n    update`test_trigger`.`info_cat_test`  set sec_level=‘H’   where id=2;\n    delete from `test_trigger`.`info_cat_test` where id=3;\n\n    Review the audit log by running the Linux command:\n    sudo cat  <directory where audit log files are located>/audit.log | egrep\naudit_change_attempt\n    For example if the values returned by - \"select @@datadir,\n@@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\n    sudo cat  /usr/local/mysql/data/audit.log |egrep audit_change_attempt\n\n    If the audit event is not present, this is a finding.",
            "__new": "If classification levels/security levels labeling is not required, this is not a finding.\n\nReview the system documentation to determine if MySQL Server is required to audit records when unsuccessful attempts to modify categories of information (e.g., classification levels/security levels) occur.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin should be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nCreate MySQL insert, update, and delete triggers that check for changes to categories of information. If the trigger before data indicates an attempt to delete such information, the trigger should be written to prevent the delete as well as optionally write to the MySQL Audit by calling the audit_api_message_emit_udf() function and including the details related to the attempt. Note: To call from a trigger requires a minimal stored procedure as well.\n\nOnce the trigger has been created, check if the audit filters that are in place are generating records when categories of information are deleted.\n\n- An Example test -\n\nCREATE TABLE `test_trigger`.`info_cat_test` (\n  `id` INT NOT NULL,\n  `name` VARCHAR(20) NULL,\n  `desc` VARCHAR(20) NULL,\n  `sec_level` CHAR(1) NULL,\n  PRIMARY KEY (`id`));\n\nuse test_trigger;\n\nDELIMITER $$\n\nCREATE TRIGGER audit_delete\n    BEFORE DELETE ON `test_trigger`.`info_cat_test`\n    FOR EACH ROW\nBEGIN\n    IF OLD.sec_level = 'H' THEN\n\tCALL audit_api_message_emit_sp(OLD.name);\n        SIGNAL SQLSTATE '45000'\n            SET MESSAGE_TEXT = 'ERROR - THIS DATA IS LEVEL H can not delete’;    \n   END IF;\nEND$$\nDELIMITER ;\n\nDELIMITER $$\n\nCREATE TRIGGER audit_insert\n    BEFORE INSERT ON `test_trigger`.`info_cat_test`\n    FOR EACH ROW\nBEGIN\n    IF NEW.sec_level = 'H' THEN\n\tCALL audit_api_message_emit_sp(NEW.name);\n        SIGNAL SQLSTATE '45000'\n            SET MESSAGE_TEXT = 'ERROR - THIS DATA IS LEVEL H can not insert’;    \n    END IF;\nEND$$\nDELIMITER ;\n\nDELIMITER $$\n\nCREATE TRIGGER audit_update\n    BEFORE UPDATE ON `test_trigger`.`info_cat_test`\n    FOR EACH ROW\nBEGIN\n    IF OLD.sec_level = 'H' THEN\n\t    CALL audit_api_message_emit_sp(OLD.name);\n    END IF;\n    IF NEW.sec_level = 'H' THEN\n\t    CALL audit_api_message_emit_sp(NEW.name);\n    END IF;\n    SIGNAL SQLSTATE '45000'\n            SET MESSAGE_TEXT = 'ERROR - THIS DATA IS LEVEL H can not update';   \nEND$$\nDELIMITER ;\n\nINSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) VALUES ('1', 'fred', 'engineer', 'H');\nINSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) VALUES ('2', 'jill', 'program manager', 'M');\nINSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) VALUES ('3', 'joe', 'maintenance', 'L');\n\ndelete from `test_trigger`.`info_cat_test` where id=1;\n// this fails as the trigger defines that sec_level of H can not be deleted.\n\nupdate`test_trigger`.`info_cat_test`  set sec_level=‘H’   where id=2;\ndelete from `test_trigger`.`info_cat_test` where id=3;\n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log | egrep audit_change_attempt\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep audit_change_attempt\n\nIf the audit event is not present, this is a finding."
          },
          "fix": {
            "__old": "If currently required, configure the MySQL Database Server with update,\ninsert, and delete triggers that call audit_api_message_emit_udf() function to\nproduce audit records when unsuccessful attempts to modify categories of\ninformation occur.\n\n    Add security level details in an additional column.\n\n    Add the component for adding information to the audit log.\n\n    INSTALL COMPONENT \"file://component_audit_api_message_emit”;\n    create schema test_trigger;\n\n    Create a stored procedure to allow the audit_api_message_emit_udf to be\ncalled as well as providing the details for the audit event.\n\n    DELIMITER $$\n\n    CREATE PROCEDURE audit_api_message_emit_delete_sp(name CHAR(20))\n    BEGIN\n    \tDECLARE aud_msg VARCHAR(255);\n    \tselect audit_api_message_emit_udf('sec_level_trigger',\n                                             'TRIGGER audit_change_attempt',\n                                             'Attempt was made to change H\nlevel sec data',\n                                             'FOR ', name\n                                             ) into aud_msg;\n    END$$\n    DELIMITER ;\n\n    See the supplemental file \"MySQL80Audit.sql\".",
            "__new": "If currently required, configure the MySQL Database Server with update, insert, and delete triggers that call audit_api_message_emit_udf() function to produce audit records when unsuccessful attempts to modify categories of information occur.\n\nAdd security level details in an additional column.\n\nAdd the component for adding information to the audit log.\n\nINSTALL COMPONENT \"file://component_audit_api_message_emit”;\ncreate schema test_trigger;\n\nCreate a stored procedure to allow the audit_api_message_emit_udf to be called as well as providing the details for the audit event.\n\nDELIMITER $$\n\nCREATE PROCEDURE audit_api_message_emit_delete_sp(name CHAR(20))\nBEGIN\n\tDECLARE aud_msg VARCHAR(255);\n\tselect audit_api_message_emit_udf('sec_level_trigger',\n                                         'TRIGGER audit_change_attempt',\n                                         'Attempt was made to change H level sec data',\n                                         'FOR ', name\n                                         ) into aud_msg;\nEND$$\nDELIMITER ;\n\nSee the supplemental file \"MySQL80Audit.sql\"."
          }
        }
      },
      "SV-235119": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n  \n  audit_log_plugin_status = sql_session.query(audit_log_plugin)\n\n  query_audit_log_filter = %(\n  SELECT\n     audit_log_filter.NAME,\n     audit_log_filter.FILTER\n  FROM\n     mysql.audit_log_filter;\n  )\n\n  audit_log_filter_entries = sql_session.query(query_audit_log_filter)\n\n  query_audit_log_user = %(\n  SELECT\n     audit_log_user.USER,\n     audit_log_user.HOST,\n     audit_log_user.FILTERNAME\n  FROM\n     mysql.audit_log_user;\n  )\n\n  audit_log_user_entries = sql_session.query(query_audit_log_user)\n\n  query_server_audit_events = %(SHOW variables LIKE 'server_audit_events';)\n\n  server_audit_events_setting = sql_session.query(query_server_audit_events)\n\n\n  if !input('aws_rds')\n  \n    # Following code design will allow for adaptive tests in this partially automatable control\n    # If ANY of the automatable tests FAIL, the control will report automated statues\n    # If ALL automatable tests PASS, MANUAL review statuses are reported to ensure full compliance\n\n    if !audit_log_plugin_status.results.column('plugin_status').join.eql?('ACTIVE') or\n       audit_log_filter_entries.results.empty? or\n       audit_log_user_entries.results.empty?\n\n      describe 'Audit Log Plugin status' do\n        subject { audit_log_plugin_status.results.column('plugin_status') }\n        it { should cmp 'ACTIVE' }\n      end\n\n      describe 'List of entries in Table: audit_log_filter' do\n        subject { audit_log_filter_entries.results }\n        it { should_not be_empty }\n      end\n\n      describe 'List of entries in Table: audit_log_user' do\n        subject { audit_log_user_entries.results }\n        it { should_not be_empty }\n      end\n    end\n\n    describe \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" do\n      skip \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\"\n    end\n    describe \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\" do\n      skip  \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\"\n    end\n    describe \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" do\n      skip \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\"\n    end\n    describe 'Manually validate that required audit logs are generated when the specified query is executed.' do\n      skip 'Manually validate that required audit logs are generated when the specified query is executed.'\n    end\n    \n  else\n    \n    describe 'Audit Log Plugin status' do\n      subject { audit_log_plugin_status.results.column('plugin_status') }\n      it { should cmp 'ACTIVE' }\n    end\n\n    describe 'Community Server server_audit_events settings' do\n      subject { Set[server_audit_events_setting.results.column('value')[0].split(',')] }\n      it { should cmp Set['CONNECT,QUERY'.split(',')] }\n    end\n    \n  end\n    ",
        "tags": {
          "check_id__added": "C-38338r623477_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235119r638812_rule",
            "__new": "SV-235119r961812_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must generate audit records when\nprivileges/permissions are deleted.",
          "__new": "The MySQL Database Server 8.0 must generate audit records when privileges/permissions are deleted."
        },
        "desc": {
          "__old": "Changes in the permissions, privileges, and roles granted to users and\nroles must be tracked. Without an audit trail, unauthorized elevation or\nrestriction of individual and group privileges could go undetected. Elevated\nprivileges give users access to information and functionality that they should\nnot have; restricted privileges wrongly deny access to authorized users.\n\n    In an SQL environment, deleting permissions is typically done via the\nREVOKE or DENY command.",
          "__new": "Changes in the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized elevation or restriction of individual and group privileges could go undetected. Elevated privileges give users access to information and functionality that they should not have; restricted privileges wrongly deny access to authorized users.\n\nIn an SQL environment, deleting permissions is typically done via the REVOKE or DENY command."
        },
        "descs": {
          "default__deleted": "Changes in the permissions, privileges, and roles granted to users and\nroles must be tracked. Without an audit trail, unauthorized elevation or\nrestriction of individual and group privileges could go undetected. Elevated\nprivileges give users access to information and functionality that they should\nnot have; restricted privileges wrongly deny access to authorized users.\n\n    In an SQL environment, deleting permissions is typically done via the\nREVOKE or DENY command.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the system documentation to determine if MySQL Server is required to\naudit when privileges/permissions are deleted.\n\n    Check if MySQL audit is configured and enabled. The my.cnf file will set\nthe variable audit_file.\n\n    To further check, execute the following query:\n\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n          FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'audit%';\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for SERVER_AUDIT should return ACTIVE.]\n\n    The status of the audit_log plugin must be \"active\". If it is not\n\"active\", this is a finding.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used and configured to \naudit all CONNECT and QUERY events.\nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the CONNECT and QUERY events are enabled:\n    SHOW variables LIKE 'server_audit_events';\n    +---------------------+---------------+\n    | Variable_name       | Value         |\n    +---------------------+---------------+\n    | server_audit_events | CONNECT,QUERY |\n    +---------------------+---------------+\n  \t1 row in set (0.00 sec)    \n  \tThe value for server_audit_events should return CONNECT,QUERY.]\n    \n    Review audit filters and associated users by running the following queries:\n    SELECT `audit_log_filter`.`NAME`,\n       `audit_log_filter`.`FILTER`\n    FROM `mysql`.`audit_log_filter`;\n\n    SELECT `audit_log_user`.`USER`,\n       `audit_log_user`.`HOST`,\n       `audit_log_user`.`FILTERNAME`\n    FROM `mysql`.`audit_log_user`;\n\n    All currently defined audits for the MySQL server instance will be listed.\nIf no audits are returned, this is a finding.\n\n    To check if the audit filters in place are generating records when\nprivileges/permissions are deleted, run the following, which will test auditing\nwithout destroying data:\n    delete from mysql.procs_priv where 1=2;\n\n    Review the audit log by running the Linux command:\n    sudo cat  <directory where audit log files are located>/audit.log|egrep\nprocs_priv\n    For example if the values returned by - \"select @@datadir,\n@@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\n    sudo cat  /usr/local/mysql/data/audit.log |egrep procs_priv\n\n    The audit data will look similar to the example below:\n    { \"timestamp\": \"2020-08-19 21:24:26\", \"id\": 2, \"class\":\n\"general\", \"event\": \"status\", \"connection_id\": 9, \"account\": {\n\"user\": \"root\", \"host\": \"localhost\" }, \"login\": { \"user\": \"root\",\n\"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"general_data\": {\n\"command\": \"Query\", \"sql_command\": \"delete\", \"query\": \"delete from\nprocs_priv\", \"status\": 0 } }\n\n    If the audit event is not present, this is a finding.",
            "__new": "Review the system documentation to determine if MySQL Server is required to audit when privileges/permissions are deleted.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \n\nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters in place are generating records when privileges/permissions are deleted, run the following, which will test auditing without destroying data:\ndelete from mysql.procs_priv where 1=2; \n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log|egrep procs_priv\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep procs_priv\n\nThe audit data will look similar to the example below:\n{ \"timestamp\": \"2020-08-19 21:24:26\", \"id\": 2, \"class\": \"general\", \"event\": \"status\", \"connection_id\": 9, \"account\": { \"user\": \"root\", \"host\": \"localhost\" }, \"login\": { \"user\": \"root\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"general_data\": { \"command\": \"Query\", \"sql_command\": \"delete\", \"query\": \"delete from procs_priv\", \"status\": 0 } }\n\nIf the audit event is not present, this is a finding."
          },
          "fix": {
            "__old": "If currently required, configure the MySQL Database Server to produce audit\nrecords when privileges/permissions are deleted.\n\n    See the supplemental file \"MySQL80Audit.sql\".",
            "__new": "If currently required, configure the MySQL Database Server to produce audit records when privileges/permissions are deleted.\n\nSee the supplemental file \"MySQL80Audit.sql\"."
          }
        }
      },
      "SV-235120": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n  \n  audit_log_plugin_status = sql_session.query(audit_log_plugin)\n\n  query_audit_log_filter = %(\n  SELECT\n     audit_log_filter.NAME,\n     audit_log_filter.FILTER\n  FROM\n     mysql.audit_log_filter;\n  )\n\n  audit_log_filter_entries = sql_session.query(query_audit_log_filter)\n\n  query_audit_log_user = %(\n  SELECT\n     audit_log_user.USER,\n     audit_log_user.HOST,\n     audit_log_user.FILTERNAME\n  FROM\n     mysql.audit_log_user;\n  )\n\n  audit_log_user_entries = sql_session.query(query_audit_log_user)\n\n  query_server_audit_events = %(SHOW variables LIKE 'server_audit_events';)\n\n  server_audit_events_setting = sql_session.query(query_server_audit_events)\n\n\n  if !input('aws_rds')\n  \n    # Following code design will allow for adaptive tests in this partially automatable control\n    # If ANY of the automatable tests FAIL, the control will report automated statues\n    # If ALL automatable tests PASS, MANUAL review statuses are reported to ensure full compliance\n\n    if !audit_log_plugin_status.results.column('plugin_status').join.eql?('ACTIVE') or\n       audit_log_filter_entries.results.empty? or\n       audit_log_user_entries.results.empty?\n\n      describe 'Audit Log Plugin status' do\n        subject { audit_log_plugin_status.results.column('plugin_status') }\n        it { should cmp 'ACTIVE' }\n      end\n\n      describe 'List of entries in Table: audit_log_filter' do\n        subject { audit_log_filter_entries.results }\n        it { should_not be_empty }\n      end\n\n      describe 'List of entries in Table: audit_log_user' do\n        subject { audit_log_user_entries.results }\n        it { should_not be_empty }\n      end\n    end\n\n    describe \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" do\n      skip \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\"\n    end\n    describe \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\" do\n      skip \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\"\n    end\n    describe \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" do\n      skip \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\"\n    end\n    describe 'Manually validate that required audit logs are generated when the specified query is executed.' do\n      skip 'Manually validate that required audit logs are generated when the specified query is executed.'\n    end\n    \n  else\n    \n    describe 'Audit Log Plugin status' do\n      subject { audit_log_plugin_status.results.column('plugin_status') }\n      it { should cmp 'ACTIVE' }\n    end\n\n    describe 'Community Server server_audit_events settings' do\n      subject { Set[server_audit_events_setting.results.column('value')[0].split(',')] }\n      it { should cmp Set['CONNECT,QUERY'.split(',')] }\n    end\n    \n  end\n    ",
        "tags": {
          "check_id__added": "C-38339r623480_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235120r638812_rule",
            "__new": "SV-235120r961812_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must generate audit records when\nunsuccessful attempts to delete privileges/permissions occur.",
          "__new": "The MySQL Database Server 8.0 must generate audit records when unsuccessful attempts to delete privileges/permissions occur."
        },
        "desc": {
          "__old": "Failed attempts to change the permissions, privileges, and roles\ngranted to users and roles must be tracked. Without an audit trail,\nunauthorized attempts to elevate or restrict individuals and groups privileges\ncould go undetected.\n\n    In a SQL environment, deleting permissions is typically done via the REVOKE\nor DENY command.\n\n    To aid in diagnosis, it is necessary to keep track of failed attempts in\naddition to the successful ones.",
          "__new": "Failed attempts to change the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized attempts to elevate or restrict individuals and groups privileges could go undetected.   \n\nIn a SQL environment, deleting permissions is typically done via the REVOKE or DENY command. \n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones."
        },
        "descs": {
          "default__deleted": "Failed attempts to change the permissions, privileges, and roles\ngranted to users and roles must be tracked. Without an audit trail,\nunauthorized attempts to elevate or restrict individuals and groups privileges\ncould go undetected.\n\n    In a SQL environment, deleting permissions is typically done via the REVOKE\nor DENY command.\n\n    To aid in diagnosis, it is necessary to keep track of failed attempts in\naddition to the successful ones.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the system documentation to determine if MySQL Server is required to\naudit when unsuccessful attempts to delete privileges/permissions occur.\n\n    Check if MySQL audit is configured and enabled. The my.cnf file will set\nthe variable audit_file.\n\n    To further check, execute the following query:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n          FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'audit%';\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for SERVER_AUDIT should return ACTIVE.]\n\n    The status of the audit_log plugin must be \"active\". If it is not\n\"active\", this is a finding.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used and configured to \naudit all CONNECT and QUERY events.\nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the CONNECT and QUERY events are enabled:\n    SHOW variables LIKE 'server_audit_events';\n    +---------------------+---------------+\n    | Variable_name       | Value         |\n    +---------------------+---------------+\n    | server_audit_events | CONNECT,QUERY |\n    +---------------------+---------------+\n  \t1 row in set (0.00 sec)    \n  \tThe value for server_audit_events should return CONNECT,QUERY.]\n \n    Review audit filters and associated users by running the following queries:\n    SELECT `audit_log_filter`.`NAME`,\n       `audit_log_filter`.`FILTER`\n    FROM `mysql`.`audit_log_filter`;\n\n    SELECT `audit_log_user`.`USER`,\n       `audit_log_user`.`HOST`,\n       `audit_log_user`.`FILTERNAME`\n    FROM `mysql`.`audit_log_user`;\n\n    All currently defined audits for the MySQL server instance will be listed.\nIf no audits are returned, this is a finding.\n\n    To check if the audit filters in place are generating records when\nunsuccessful attempts to delete privileges/permissions occur, run the\nfollowing, which will test auditing without destroying data but as a user\nwithout administrative privileges so that it fails:\n    delete from mysql.procs_priv where 1=2;\n\n    Review the audit log by running the Linux command:\n    sudo cat  <directory where audit log files are located>/audit.log|egrep\nprocs_priv\n    For example if the values returned by - \"select @@datadir,\n@@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\n    sudo cat  /usr/local/mysql/data/audit.log |egrep procs_priv\n\n    The audit data will look similar to the  example below and contain a\nnon-zero status value:\n    { \"timestamp\": \"2020-08-19 21:24:26\", \"id\": 2, \"class\":\n\"general\", \"event\": \"status\", \"connection_id\": 9, \"account\": {\n\"user\": \"root\", \"host\": \"localhost\" }, \"login\": { \"user\": \"root\",\n\"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"general_data\": {\n\"command\": \"Query\", \"sql_command\": \"delete\", \"query\": \"delete from\nprocs_priv\", \"status\": 1142 } }\n\n    If the audit event is not present, this is a finding.",
            "__new": "Review the system documentation to determine if MySQL Server is required to audit when unsuccessful attempts to delete privileges/permissions occur.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters in place are generating records when unsuccessful attempts to delete privileges/permissions occur, run the following, which will test auditing without destroying data but as a user without administrative privileges so that it fails:\ndelete from mysql.procs_priv where 1=2; \n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log|egrep procs_priv\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep procs_priv\n\nThe audit data will look similar to the  example below and contain a non-zero status value:\n{ \"timestamp\": \"2020-08-19 21:24:26\", \"id\": 2, \"class\": \"general\", \"event\": \"status\", \"connection_id\": 9, \"account\": { \"user\": \"root\", \"host\": \"localhost\" }, \"login\": { \"user\": \"root\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"general_data\": { \"command\": \"Query\", \"sql_command\": \"delete\", \"query\": \"delete from procs_priv\", \"status\": 1142 } }\n\nIf the audit event is not present, this is a finding."
          },
          "fix": {
            "__old": "Configure the MySQL Database Server to audit when unsuccessful attempts to\ndelete privileges/permissions occur.\n\n    See the supplemental file \"MySQL80Audit.sql\".",
            "__new": "Configure the MySQL Database Server to audit when unsuccessful attempts to delete privileges/permissions occur.\n\nSee the supplemental file \"MySQL80Audit.sql\"."
          }
        }
      },
      "SV-235121": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n  \n  audit_log_plugin_status = sql_session.query(audit_log_plugin)\n\n  query_audit_log_filter = %(\n  SELECT\n     audit_log_filter.NAME,\n     audit_log_filter.FILTER\n  FROM\n     mysql.audit_log_filter;\n  )\n\n  audit_log_filter_entries = sql_session.query(query_audit_log_filter)\n\n  query_audit_log_user = %(\n  SELECT\n     audit_log_user.USER,\n     audit_log_user.HOST,\n     audit_log_user.FILTERNAME\n  FROM\n     mysql.audit_log_user;\n  )\n\n  audit_log_user_entries = sql_session.query(query_audit_log_user)\n\n  query_server_audit_events = %(SHOW variables LIKE 'server_audit_events';)\n\n  server_audit_events_setting = sql_session.query(query_server_audit_events)\n\n\n  if !input('aws_rds')\n  \n    # Following code design will allow for adaptive tests in this partially automatable control\n    # If ANY of the automatable tests FAIL, the control will report automated statues\n    # If ALL automatable tests PASS, MANUAL review statuses are reported to ensure full compliance\n\n    if !audit_log_plugin_status.results.column('plugin_status').join.eql?('ACTIVE') or\n       audit_log_filter_entries.results.empty? or\n       audit_log_user_entries.results.empty?\n\n      describe 'Audit Log Plugin status' do\n        subject { audit_log_plugin_status.results.column('plugin_status') }\n        it { should cmp 'ACTIVE' }\n      end\n\n      describe 'List of entries in Table: audit_log_filter' do\n        subject { audit_log_filter_entries.results }\n        it { should_not be_empty }\n      end\n\n      describe 'List of entries in Table: audit_log_user' do\n        subject { audit_log_user_entries.results }\n        it { should_not be_empty }\n      end\n    end\n\n    describe \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" do\n      skip \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" \n    end\n    describe \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\" do\n      skip \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\"\n    end\n    describe \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" do\n      skip \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\"\n    end\n    describe 'Manually validate that required audit logs are generated when the specified query is executed.' do\n      skip 'Manually validate that required audit logs are generated when the specified query is executed.'\n    end\n    \n  else\n    \n    describe 'Audit Log Plugin status' do\n      subject { audit_log_plugin_status.results.column('plugin_status') }\n      it { should cmp 'ACTIVE' }\n    end\n\n    describe 'Community Server server_audit_events settings' do\n      subject { Set[server_audit_events_setting.results.column('value')[0].split(',')] }\n      it { should cmp Set['CONNECT,QUERY'.split(',')] }\n    end\n    \n  end\n    ",
        "tags": {
          "check_id__added": "C-38340r623483_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235121r638812_rule",
            "__new": "SV-235121r961818_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must generate audit records when\nsecurity objects are deleted.",
          "__new": "The MySQL Database Server 8.0 must generate audit records when security objects are deleted."
        },
        "desc": {
          "__old": "The removal of security objects from the database/Database Management\nSystem (DBMS) would seriously degrade a system's information assurance posture.\nIf such an event occurs, it must be logged.",
          "__new": "The removal of security objects from the database/Database Management System (DBMS) would seriously degrade a system's information assurance posture. If such an event occurs, it must be logged."
        },
        "descs": {
          "default__deleted": "The removal of security objects from the database/Database Management\nSystem (DBMS) would seriously degrade a system's information assurance posture.\nIf such an event occurs, it must be logged.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the system documentation to determine if MySQL Server is required to\naudit when security objects are deleted.\n\n    Check if MySQL audit is configured and enabled. The my.cnf file will set\nthe variable audit_file.\n\n    To further check, execute the following query:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n          FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'audit%';\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for SERVER_AUDIT should return ACTIVE.]\n\n    The status of the audit_log plugin must be \"active\". If it is not\n\"active\", this is a finding.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used and configured to \naudit all CONNECT and QUERY events.\nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the CONNECT and QUERY events are enabled:\n    SHOW variables LIKE 'server_audit_events';\n    +---------------------+---------------+\n    | Variable_name       | Value         |\n    +---------------------+---------------+\n    | server_audit_events | CONNECT,QUERY |\n    +---------------------+---------------+\n  \t1 row in set (0.00 sec)    \n  \tThe value for server_audit_events should return CONNECT,QUERY.]\n    \n    Review audit filters and associated users by running the following queries:\n    SELECT `audit_log_filter`.`NAME`,\n       `audit_log_filter`.`FILTER`\n    FROM `mysql`.`audit_log_filter`;\n\n    SELECT `audit_log_user`.`USER`,\n       `audit_log_user`.`HOST`,\n       `audit_log_user`.`FILTERNAME`\n    FROM `mysql`.`audit_log_user`;\n\n    All currently defined audits for the MySQL server instance will be listed.\nIf no audits are returned, this is a finding.\n\n    To check if the audit filters in place are generating records when security\nobjects are deleted, run the following, which will test auditing. Note: This is\ndestructive. Back up the database table prior to testing so it can be restored.\n    drop mysql.procs_priv;\n\n    Review the audit log by running the Linux command:\n    sudo cat  <directory where audit log files are located>/audit.log|egrep DROP\n    For example if the values returned by - \"select @@datadir,\n@@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\n    sudo cat  /usr/local/mysql/data/audit.log |egrep DROP\n\n    The audit data will look similar to the example below:\n    { \"timestamp\": \"2020-08-21 17:06:02\", \"id\": 1, \"class\":\n\"general\", \"event\": \"status\", \"connection_id\": 9, \"account\": {\n\"user\": \"root\", \"host\": \"localhost\" }, \"login\": { \"user\": \"root\",\n\"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"general_data\": {\n\"command\": \"Query\", \"sql_command\": \"drop_table\", \"query\": \"DROP\nTABLE `mysql`.`proxies_priv`\", \"status\": 0 } },\n\n    If the audit event is not present, this is a finding.",
            "__new": "Review the system documentation to determine if MySQL Server is required to audit when security objects are deleted.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters in place are generating records when security objects are deleted, run the following, which will test auditing. Note: This is destructive. Back up the database table prior to testing so it can be restored.\ndrop mysql.procs_priv; \n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log|egrep DROP\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep DROP\n\nThe audit data will look similar to the example below: \n{ \"timestamp\": \"2020-08-21 17:06:02\", \"id\": 1, \"class\": \"general\", \"event\": \"status\", \"connection_id\": 9, \"account\": { \"user\": \"root\", \"host\": \"localhost\" }, \"login\": { \"user\": \"root\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"general_data\": { \"command\": \"Query\", \"sql_command\": \"drop_table\", \"query\": \"DROP TABLE `mysql`.`proxies_priv`\", \"status\": 0 } },\n\nIf the audit event is not present, this is a finding."
          },
          "fix": {
            "__old": "Configure the MySQL Database Server to audit when security objects are\ndeleted.\n\n    See the supplemental file \"MySQL80Audit.sql\".",
            "__new": "Configure the MySQL Database Server to audit when security objects are deleted.\n\nSee the supplemental file \"MySQL80Audit.sql\"."
          }
        }
      },
      "SV-235122": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n  \n  audit_log_plugin_status = sql_session.query(audit_log_plugin)\n\n  query_audit_log_filter = %(\n  SELECT\n     audit_log_filter.NAME,\n     audit_log_filter.FILTER\n  FROM\n     mysql.audit_log_filter;\n  )\n\n  audit_log_filter_entries = sql_session.query(query_audit_log_filter)\n\n  query_audit_log_user = %(\n  SELECT\n     audit_log_user.USER,\n     audit_log_user.HOST,\n     audit_log_user.FILTERNAME\n  FROM\n     mysql.audit_log_user;\n  )\n\n  audit_log_user_entries = sql_session.query(query_audit_log_user)\n\n  query_server_audit_events = %(SHOW variables LIKE 'server_audit_events';)\n\n  server_audit_events_setting = sql_session.query(query_server_audit_events)\n\n\n  if !input('aws_rds')\n  \n    # Following code design will allow for adaptive tests in this partially automatable control\n    # If ANY of the automatable tests FAIL, the control will report automated statues\n    # If ALL automatable tests PASS, MANUAL review statuses are reported to ensure full compliance\n\n    if !audit_log_plugin_status.results.column('plugin_status').join.eql?('ACTIVE') or\n       audit_log_filter_entries.results.empty? or\n       audit_log_user_entries.results.empty?\n\n      describe 'Audit Log Plugin status' do\n        subject { audit_log_plugin_status.results.column('plugin_status') }\n        it { should cmp 'ACTIVE' }\n      end\n\n      describe 'List of entries in Table: audit_log_filter' do\n        subject { audit_log_filter_entries.results }\n        it { should_not be_empty }\n      end\n\n      describe 'List of entries in Table: audit_log_user' do\n        subject { audit_log_user_entries.results }\n        it { should_not be_empty }\n      end\n    end\n\n    describe \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" do\n      skip \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\"\n    end\n    describe \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\" do\n      skip \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\"\n    end\n    describe \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" do\n      skip \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\"\n    end\n    describe 'Manually validate that required audit logs are generated when the specified query is executed.' do\n      skip 'Manually validate that required audit logs are generated when the specified query is executed.'\n    end\n    \n  else\n    \n    describe 'Audit Log Plugin status' do\n      subject { audit_log_plugin_status.results.column('plugin_status') }\n      it { should cmp 'ACTIVE' }\n    end\n\n    describe 'Community Server server_audit_events settings' do\n      subject { Set[server_audit_events_setting.results.column('value')[0].split(',')] }\n      it { should cmp Set['CONNECT,QUERY'.split(',')] }\n    end\n    \n  end\n",
        "tags": {
          "check_id__added": "C-38341r623486_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235122r638812_rule",
            "__new": "SV-235122r961818_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must generate audit records when\nunsuccessful attempts to delete security objects occur.",
          "__new": "The MySQL Database Server 8.0 must generate audit records when unsuccessful attempts to delete security objects occur."
        },
        "desc": {
          "__old": "The removal of security objects from the database/Database Management\nSystem (DBMS) would seriously degrade a system's information assurance posture.\nIf such an action is attempted, it must be logged.\n\n    To aid in diagnosis, it is necessary to keep track of failed attempts in\naddition to the successful ones.",
          "__new": "The removal of security objects from the database/Database Management System (DBMS) would seriously degrade a system's information assurance posture. If such an action is attempted, it must be logged.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones."
        },
        "descs": {
          "default__deleted": "The removal of security objects from the database/Database Management\nSystem (DBMS) would seriously degrade a system's information assurance posture.\nIf such an action is attempted, it must be logged.\n\n    To aid in diagnosis, it is necessary to keep track of failed attempts in\naddition to the successful ones.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the system documentation to determine if MySQL Server is required to\naudit when unsuccessful attempts to delete security objects occur.\n\n    Check if MySQL audit is configured and enabled. The my.cnf file will set\nthe variable audit_file.\n\n    To further check, execute the following query:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n          FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'audit%';\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for SERVER_AUDIT should return ACTIVE.]\n\n    The status of the audit_log plugin must be \"active\". If it is not\n\"active\", this is a finding.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used and configured to \naudit all CONNECT and QUERY events.\nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the CONNECT and QUERY events are enabled:\n    SHOW variables LIKE 'server_audit_events';\n    +---------------------+---------------+\n    | Variable_name       | Value         |\n    +---------------------+---------------+\n    | server_audit_events | CONNECT,QUERY |\n    +---------------------+---------------+\n  \t1 row in set (0.00 sec)    \n  \tThe value for server_audit_events should return CONNECT,QUERY.]\n  \n    Review audit filters and associated users by running the following queries:\n    SELECT `audit_log_filter`.`NAME`,\n       `audit_log_filter`.`FILTER`\n    FROM `mysql`.`audit_log_filter`;\n\n    SELECT `audit_log_user`.`USER`,\n       `audit_log_user`.`HOST`,\n       `audit_log_user`.`FILTERNAME`\n    FROM `mysql`.`audit_log_user`;\n\n    All currently defined audits for the MySQL server instance will be listed.\nIf no audits are returned, this is a finding.\n\n    To check if the audit filters in place are generating records when security\nobjects are deleted, run the following, which will test auditing as a user with\nadministrator-level privileges:\n    drop table mysql.columns_priv;\n    ERROR: 1142: DROP command denied to user 'newuser'@'localhost' for table\n'columns_priv'\n\n    Review the audit log by running the Linux command:\n    sudo cat  <directory where audit log files are located>/audit.log|egrep DROP\n    For example if the values returned by - \"select @@datadir,\n@@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\n    sudo cat  /usr/local/mysql/data/audit.log |egrep DROP\n\n    The audit data will look similar to the example below and contain a\nnon-zero status value:\n    { \"timestamp\": \"2020-08-21 17:21:12\", \"id\": 0, \"class\":\n\"general\", \"event\": \"status\", \"connection_id\": 17, \"account\": {\n\"user\": \"newuser\", \"host\": \"localhost\" }, \"login\": { \"user\":\n\"newuser\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" },\n\"general_data\": { \"command\": \"Query\", \"sql_command\": \"drop_table\",\n\"query\": \"drop table `mysql`.audit_log_user\", \"status\": 1142 } },\n\n    If the audit event is not present, this is a finding.",
            "__new": "Review the system documentation to determine if MySQL Server is required to audit when unsuccessful attempts to delete security objects occur.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters in place are generating records when security objects are deleted, run the following, which will test auditing as a user with administrator-level privileges:\ndrop table mysql.columns_priv;\nERROR: 1142: DROP command denied to user 'newuser'@'localhost' for table 'columns_priv'\n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log|egrep DROP\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep DROP\n\nThe audit data will look similar to the example below and contain a non-zero status value:\n{ \"timestamp\": \"2020-08-21 17:21:12\", \"id\": 0, \"class\": \"general\", \"event\": \"status\", \"connection_id\": 17, \"account\": { \"user\": \"newuser\", \"host\": \"localhost\" }, \"login\": { \"user\": \"newuser\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"general_data\": { \"command\": \"Query\", \"sql_command\": \"drop_table\", \"query\": \"drop table `mysql`.audit_log_user\", \"status\": 1142 } },\n\nIf the audit event is not present, this is a finding."
          },
          "fix": {
            "__old": "Configure the MySQL Database Server to audit when unsuccessful attempts to\ndelete security objects occur.\n\n    See the supplemental file \"MySQL80Audit.sql\".",
            "__new": "Configure the MySQL Database Server to audit when unsuccessful attempts to delete security objects occur.\n\nSee the supplemental file \"MySQL80Audit.sql\"."
          }
        }
      },
      "SV-235123": {
        "describe__deleted": "  describe 'Manually review DBMS documentation to verify that audit records can be produced when\ncategories of information are deleted.' do\n    skip 'Manually review DBMS documentation to verify that audit records can be produced when\n    categories of information are deleted.'\n  end\n\n  describe 'Manually review the DBMS/database security and audit configurations to verify that\naudit records are produced when categories of information are deleted.' do\n    skip 'Manually review the DBMS/database security and audit configurations to verify that\n    audit records are produced when categories of information are deleted.' \n  end",
        "tags": {
          "check_id__added": "C-38342r623489_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235123r638812_rule",
            "__new": "SV-235123r961821_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must generate audit records when\ncategories of information (e.g., classification levels/security levels) are\ndeleted.",
          "__new": "The MySQL Database Server 8.0 must generate audit records when categories of information (e.g., classification levels/security levels) are deleted."
        },
        "desc": {
          "__old": "Changes in categories of information must be tracked. Without an audit\ntrail, unauthorized access to protected data could go undetected.\n\n    For detailed information on categorizing information, refer to FIPS\nPublication 199, Standards for Security Categorization of Federal Information\nand Information Systems, and FIPS Publication 200, Minimum Security\nRequirements for Federal Information and Information Systems.",
          "__new": "Changes in categories of information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems."
        },
        "descs": {
          "default__deleted": "Changes in categories of information must be tracked. Without an audit\ntrail, unauthorized access to protected data could go undetected.\n\n    For detailed information on categorizing information, refer to FIPS\nPublication 199, Standards for Security Categorization of Federal Information\nand Information Systems, and FIPS Publication 200, Minimum Security\nRequirements for Federal Information and Information Systems.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review DBMS documentation to verify that audit records can be produced when\ncategories of information are deleted.\n\n    If the DBMS is not capable of this, this is a finding.\n\n    Review the DBMS/database security and audit configurations to verify that\naudit records are produced when categories of information are deleted.\n\n    If they are not produced, this is a finding.",
            "__new": "Review DBMS documentation to verify that audit records can be produced when categories of information are deleted.\n\nIf the DBMS is not capable of this, this is a finding.\n\nReview the DBMS/database security and audit configurations to verify that audit records are produced when categories of information are deleted.\n\nIf they are not produced, this is a finding."
          },
          "fix": {
            "__old": "Deploy a MySQL Database Server 8.0 capable of producing the required audit\nrecords when categories of information are deleted.\n\n    Configure the MySQL Database Server 8.0 to produce audit records when\ncategories of information are deleted.",
            "__new": "Deploy a MySQL Database Server 8.0 capable of producing the required audit records when categories of information are deleted.\n\nConfigure the MySQL Database Server 8.0 to produce audit records when categories of information are deleted."
          }
        }
      },
      "SV-235124": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n  \n  audit_log_plugin_status = sql_session.query(audit_log_plugin)\n\n  query_audit_log_filter = %(\n  SELECT\n     audit_log_filter.NAME,\n     audit_log_filter.FILTER\n  FROM\n     mysql.audit_log_filter;\n  )\n\n  audit_log_filter_entries = sql_session.query(query_audit_log_filter)\n\n  query_audit_log_user = %(\n  SELECT\n     audit_log_user.USER,\n     audit_log_user.HOST,\n     audit_log_user.FILTERNAME\n  FROM\n     mysql.audit_log_user;\n  )\n\n  audit_log_user_entries = sql_session.query(query_audit_log_user)\n\n  query_server_audit_events = %(SHOW variables LIKE 'server_audit_events';)\n\n  server_audit_events_setting = sql_session.query(query_server_audit_events)\n\n\n  if !input('aws_rds')\n  \n    # Following code design will allow for adaptive tests in this partially automatable control\n    # If ANY of the automatable tests FAIL, the control will report automated statues\n    # If ALL automatable tests PASS, MANUAL review statuses are reported to ensure full compliance\n\n    if !audit_log_plugin_status.results.column('plugin_status').join.eql?('ACTIVE') or\n       audit_log_filter_entries.results.empty? or\n       audit_log_user_entries.results.empty?\n\n      describe 'Audit Log Plugin status' do\n        subject { audit_log_plugin_status.results.column('plugin_status') }\n        it { should cmp 'ACTIVE' }\n      end\n\n      describe 'List of entries in Table: audit_log_filter' do\n        subject { audit_log_filter_entries.results }\n        it { should_not be_empty }\n      end\n\n      describe 'List of entries in Table: audit_log_user' do\n        subject { audit_log_user_entries.results }\n        it { should_not be_empty }\n      end\n    end\n\n    describe \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" do\n      skip \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\"\n    end\n    describe \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\" do\n      skip \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\"\n    end\n    describe \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" do\n      skip \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\"\n    end\n    describe 'Manually validate that required audit logs are generated when the specified query is executed.' do\n      skip 'Manually validate that required audit logs are generated when the specified query is executed.'\n    end\n    \n  else\n    \n    describe 'Audit Log Plugin status' do\n      subject { audit_log_plugin_status.results.column('plugin_status') }\n      it { should cmp 'ACTIVE' }\n    end\n\n    describe 'Community Server server_audit_events settings' do\n      subject { Set[server_audit_events_setting.results.column('value')[0].split(',')] }\n      it { should cmp Set['CONNECT,QUERY'.split(',')] }\n    end\n    \n  end\n  ",
        "tags": {
          "check_id__added": "C-38343r623492_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235124r638812_rule",
            "__new": "SV-235124r961821_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must generate audit records when\nunsuccessful attempts to delete categories of information (e.g., classification\nlevels/security levels) occur.",
          "__new": "The MySQL Database Server 8.0 must generate audit records when unsuccessful attempts to delete categories of information (e.g., classification levels/security levels) occur."
        },
        "desc": {
          "__old": "Changes in categories of information must be tracked. Without an audit\ntrail, unauthorized access to protected data could go undetected.\n\n    To aid in diagnosis, it is necessary to keep track of failed attempts in\naddition to the successful ones.\n\n    For detailed information on categorizing information, refer to FIPS\nPublication 199, Standards for Security Categorization of Federal Information\nand Information Systems, and FIPS Publication 200, Minimum Security\nRequirements for Federal Information and Information Systems.",
          "__new": "Changes in categories of information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems."
        },
        "descs": {
          "default__deleted": "Changes in categories of information must be tracked. Without an audit\ntrail, unauthorized access to protected data could go undetected.\n\n    To aid in diagnosis, it is necessary to keep track of failed attempts in\naddition to the successful ones.\n\n    For detailed information on categorizing information, refer to FIPS\nPublication 199, Standards for Security Categorization of Federal Information\nand Information Systems, and FIPS Publication 200, Minimum Security\nRequirements for Federal Information and Information Systems.",
          "rationale__deleted": "",
          "check": {
            "__old": "If classification levels/security levels labeling is not required, this is\nnot a finding.\n\n    Review the system documentation to determine if MySQL Server is required to\naudit records when unsuccessful attempts to delete categories of information\n(e.g., classification levels/security levels) occur.\n\n    Check if MySQL audit is configured and enabled. The my.cnf file will set\nthe variable audit_file.\n\n    To further check, execute the following query:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n          FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'audit%';\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for SERVER_AUDIT should return ACTIVE.]\n\n    The status of the audit_log plugin must be \"active\". If it is not\n\"active\", this is a finding.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used and configured to \naudit all CONNECT and QUERY events.\nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the CONNECT and QUERY events are enabled:\n    SHOW variables LIKE 'server_audit_events';\n    +---------------------+---------------+\n    | Variable_name       | Value         |\n    +---------------------+---------------+\n    | server_audit_events | CONNECT,QUERY |\n    +---------------------+---------------+\n  \t1 row in set (0.00 sec)    \n  \tThe value for server_audit_events should return CONNECT,QUERY.]\n  \n    Review audit filters and associated users by running the following queries:\n    SELECT `audit_log_filter`.`NAME`,\n       `audit_log_filter`.`FILTER`\n    FROM `mysql`.`audit_log_filter`;\n\n    SELECT `audit_log_user`.`USER`,\n       `audit_log_user`.`HOST`,\n       `audit_log_user`.`FILTERNAME`\n    FROM `mysql`.`audit_log_user`;\n\n    All currently defined audits for the MySQL server instance will be listed.\nIf no audits are returned, this is a finding.\n\n    Create MySQL Delete triggers that check for changes to categories of\ninformation. If the trigger before data indicates an attempt to delete such\ninformation, the trigger should be written to prevent the delete as well as\noptionally write to the MySQL Audit by calling the audit_api_message_emit_udf()\nfunction and including the details related to the attempt. Note: To call from a\ntrigger requires a minimal stored procedure as well.\n\n    Once the trigger has been created, check if the audit filters that are in\nplace are generating records when categories of information are deleted.\n\n    - An Example test -\n\n    CREATE TABLE `test_trigger`.`info_cat_test` (\n      `id` INT NOT NULL,\n      `name` VARCHAR(20) NULL,\n      `desc` VARCHAR(20) NULL,\n      `sec_level` CHAR(1) NULL,\n      PRIMARY KEY (`id`));\n\n    DELIMITER $$\n\n    CREATE TRIGGER test_trigger.audit_delete_attempt\n        BEFORE DELETE ON `test_trigger`.`info_cat_test`\n        FOR EACH ROW\n    BEGIN\n        IF OLD.sec_level = 'H' THEN\n    \t    CALL audit_api_message_emit_sp(OLD.name);\n            SIGNAL SQLSTATE '45000'\n                SET MESSAGE_TEXT = 'ERROR - THIS DATA IS LEVEL H';\n        END IF;\n    END$$\n    DELIMITER ;\n\n\n    INSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`,\n`sec_level`) VALUES ('1', 'fred', 'engineer', 'H');\n    INSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`,\n`sec_level`) VALUES ('2', 'jill', 'program manager', 'M');\n    INSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`,\n`sec_level`) VALUES ('3', 'joe', 'maintenance', 'L');\n\n    delete from `test_trigger`.`info_cat_test` where id=1;\n    // this fails as the trigger defines that sec_level of H can not be deleted.\n\n    delete from `test_trigger`.`info_cat_test` where id=2;\n    delete from `test_trigger`.`info_cat_test` where id=3;\n\n    Review the audit log by running the Linux command:\n    sudo cat  <directory where audit log files are located>/audit.log | egrep\nsec_level_trigger\n    For example if the values returned by - \"select @@datadir,\n@@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\n    sudo cat  /usr/local/mysql/data/audit.log |egrep sec_level_trigger\n\n    If the audit event is not present, this is a finding.",
            "__new": "If classification levels/security levels labeling is not required, this is not a finding.\n\nReview the system documentation to determine if MySQL Server is required to audit records when unsuccessful attempts to delete categories of information (e.g., classification levels/security levels) occur.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nCreate MySQL Delete triggers that check for changes to categories of information. If the trigger before data indicates an attempt to delete such information, the trigger should be written to prevent the delete as well as optionally write to the MySQL Audit by calling the audit_api_message_emit_udf() function and including the details related to the attempt. Note: To call from a trigger requires a minimal stored procedure as well.\n\nOnce the trigger has been created, check if the audit filters that are in place are generating records when categories of information are deleted.\n\n- An Example test -\n\nCREATE TABLE `test_trigger`.`info_cat_test` (\n  `id` INT NOT NULL,\n  `name` VARCHAR(20) NULL,\n  `desc` VARCHAR(20) NULL,\n  `sec_level` CHAR(1) NULL,\n  PRIMARY KEY (`id`));\n\nDELIMITER $$\n\nCREATE TRIGGER test_trigger.audit_delete_attempt\n    BEFORE DELETE ON `test_trigger`.`info_cat_test`\n    FOR EACH ROW\nBEGIN\n    IF OLD.sec_level = 'H' THEN\n\t    CALL audit_api_message_emit_sp(OLD.name);\n        SIGNAL SQLSTATE '45000'\n            SET MESSAGE_TEXT = 'ERROR - THIS DATA IS LEVEL H';\n    END IF;\nEND$$\nDELIMITER ;\n\n\nINSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) VALUES ('1', 'fred', 'engineer', 'H');\nINSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) VALUES ('2', 'jill', 'program manager', 'M');\nINSERT INTO `test_trigger`.`info_cat_test` (`id`, `name`, `desc`, `sec_level`) VALUES ('3', 'joe', 'maintenance', 'L');\n\ndelete from `test_trigger`.`info_cat_test` where id=1;\n// this fails as the trigger defines that sec_level of H can not be deleted.\n\ndelete from `test_trigger`.`info_cat_test` where id=2;\ndelete from `test_trigger`.`info_cat_test` where id=3;\n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log | egrep sec_level_trigger\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep sec_level_trigger\n\nIf the audit event is not present, this is a finding."
          },
          "fix": {
            "__old": "If currently required, configure the MySQL Database Server with delete\ntriggers which prevent unauthorized deletes and call\naudit_api_message_emit_udf() function  to produce audit records when\nunsuccessful attempts to delete categories of information occur.\n    Add security level details in an additional column.\n\n    Add the component for adding information to the audit log.\n\n    INSTALL COMPONENT \"file://component_audit_api_message_emit”;\n    create schema test_trigger;\n\n    Create a stored procedure to allow the audit_api_message_emit_udf to be\ncalled as well as providing the details for the audit event.\n\n    DELIMITER $$\n\n    CREATE PROCEDURE audit_api_message_emit_sp(name CHAR(20))\n    BEGIN\n    \tDECLARE aud_msg VARCHAR(255);\n    \tselect audit_api_message_emit_udf('sec_level_trigger',\n                                             'TRIGGER audit_delete_attempt',\n                                             'Attempt was made to delete H\nlevel sec data',\n                                             'FOR ', name\n                                             ) into aud_msg;\n    END$$\n    DELIMITER ;",
            "__new": "If currently required, configure the MySQL Database Server with delete triggers which prevent unauthorized deletes and call audit_api_message_emit_udf() function  to produce audit records when unsuccessful attempts to delete categories of information occur.\nAdd security level details in an additional column.\n\nAdd the component for adding information to the audit log.\n\nINSTALL COMPONENT \"file://component_audit_api_message_emit”;\ncreate schema test_trigger;\n\nCreate a stored procedure to allow the audit_api_message_emit_udf to be called as well as providing the details for the audit event.\n\nDELIMITER $$\n\nCREATE PROCEDURE audit_api_message_emit_sp(name CHAR(20))\nBEGIN\n\tDECLARE aud_msg VARCHAR(255);\n\tselect audit_api_message_emit_udf('sec_level_trigger',\n                                         'TRIGGER audit_delete_attempt',\n                                         'Attempt was made to delete H level sec data',\n                                         'FOR ', name\n                                         ) into aud_msg;\nEND$$\nDELIMITER ;"
          }
        }
      },
      "SV-235125": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n  \n  audit_log_plugin_status = sql_session.query(audit_log_plugin)\n\n  query_audit_log_filter = %(\n  SELECT\n     audit_log_filter.NAME,\n     audit_log_filter.FILTER\n  FROM\n     mysql.audit_log_filter;\n  )\n\n  audit_log_filter_entries = sql_session.query(query_audit_log_filter)\n\n  query_audit_log_user = %(\n  SELECT\n     audit_log_user.USER,\n     audit_log_user.HOST,\n     audit_log_user.FILTERNAME\n  FROM\n     mysql.audit_log_user;\n  )\n\n  audit_log_user_entries = sql_session.query(query_audit_log_user)\n\n  query_server_audit_events = %(SHOW variables LIKE 'server_audit_events';)\n\n  server_audit_events_setting = sql_session.query(query_server_audit_events)\n\n\n  if !input('aws_rds')\n  \n    # Following code design will allow for adaptive tests in this partially automatable control\n    # If ANY of the automatable tests FAIL, the control will report automated statues\n    # If ALL automatable tests PASS, MANUAL review statuses are reported to ensure full compliance\n\n    if !audit_log_plugin_status.results.column('plugin_status').join.eql?('ACTIVE') or\n       audit_log_filter_entries.results.empty? or\n       audit_log_user_entries.results.empty?\n\n      describe 'Audit Log Plugin status' do\n        subject { audit_log_plugin_status.results.column('plugin_status') }\n        it { should cmp 'ACTIVE' }\n      end\n\n      describe 'List of entries in Table: audit_log_filter' do\n        subject { audit_log_filter_entries.results }\n        it { should_not be_empty }\n      end\n\n      describe 'List of entries in Table: audit_log_user' do\n        subject { audit_log_user_entries.results }\n        it { should_not be_empty }\n      end\n    end\n\n    describe \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" do\n      skip \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\"\n    end\n    describe \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\" do\n      skip \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\"\n    end\n    describe \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" do\n      skip \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\"\n    end\n    describe 'Manually validate that required audit logs are generated when the specified query is executed.' do\n      skip 'Manually validate that required audit logs are generated when the specified query is executed.'\n    end\n    \n  else\n    \n    describe 'Audit Log Plugin status' do\n      subject { audit_log_plugin_status.results.column('plugin_status') }\n      it { should cmp 'ACTIVE' }\n    end\n\n    describe 'Community Server server_audit_events settings' do\n      subject { Set[server_audit_events_setting.results.column('value')[0].split(',')] }\n      it { should cmp Set['CONNECT,QUERY'.split(',')] }\n    end\n    \n  end\n    ",
        "tags": {
          "check_id__added": "C-38344r623495_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235125r638812_rule",
            "__new": "SV-235125r961824_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must generate audit records when\nsuccessful logons or connections occur.",
          "__new": "The MySQL Database Server 8.0 must generate audit records when successful logons or connections occur."
        },
        "desc": {
          "__old": "For completeness of forensic analysis, it is necessary to track\nwho/what (a user or other principal) logs on to the Database Management System\n(DBMS).",
          "__new": "For completeness of forensic analysis, it is necessary to track who/what (a user or other principal) logs on to the Database Management System (DBMS)."
        },
        "descs": {
          "default__deleted": "For completeness of forensic analysis, it is necessary to track\nwho/what (a user or other principal) logs on to the Database Management System\n(DBMS).",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the system documentation to determine if MySQL Server is required to\naudit when successful logons or connections occur.\n\n    Check if MySQL audit is configured and enabled. The my.cnf file will set\nthe variable audit_file.\n\n    To further check, execute the following query:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n          FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'audit%';\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for SERVER_AUDIT should return ACTIVE.]\n\n    The status of the audit_log plugin must be \"active\". If it is not\n\"active\", this is a finding.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used and configured to \naudit all CONNECT and QUERY events.\nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the CONNECT and QUERY events are enabled:\n    SHOW variables LIKE 'server_audit_events';\n    +---------------------+---------------+\n    | Variable_name       | Value         |\n    +---------------------+---------------+\n    | server_audit_events | CONNECT,QUERY |\n    +---------------------+---------------+\n  \t1 row in set (0.00 sec)    \n  \tThe value for server_audit_events should return CONNECT,QUERY.]\n  \n    Review audit filters and associated users by running the following queries:\n    SELECT `audit_log_filter`.`NAME`,\n       `audit_log_filter`.`FILTER`\n    FROM `mysql`.`audit_log_filter`;\n\n    SELECT `audit_log_user`.`USER`,\n       `audit_log_user`.`HOST`,\n       `audit_log_user`.`FILTERNAME`\n    FROM `mysql`.`audit_log_user`;\n\n    All currently defined audits for the MySQL server instance will be listed.\nIf no audits are returned, this is a finding.\n\n    To check if the audit filters in place are generating records when\nsuccessful logons or connections occur, log in to MySQL and then log out. Below\nis an example using MySQL Shell:\n    % mysqlsh —sql\n     MySQL  SQL > \\connect newuser@localhost\n    Creating a session to 'newuser@localhost'\n     MySQL  localhost:33060+ ssl  SQL > \\quit\n    Bye!\n\n    Review the audit log by running the Linux command:\n    Note, \"status\": 0 for each indicates successful.\n\n    sudo cat  <directory where audit log files are located>/audit.log | egrep\n\"\\\"event\\\": \\”connect\\\"\"\n    For example if the values returned by - \"select @@datadir,\n@@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\n    sudo cat  /usr/local/mysql/data/audit.log |egrep  \"\\\"event\\\":\n\\”connect\\\"\"\n\n    The audit data will look similar to the example below:\n    Logging in - connecting\n\n    { \"timestamp\": \"2020-08-21 17:47:09\", \"id\": 0, \"class\":\n\"connection\", \"event\": \"connect\", \"connection_id\": 19, \"account\": {\n\"user\": \"newuser\", \"host\": \"localhost\" }, \"login\": { \"user\":\n\"newuser\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" },\n\"connection_data\": { \"connection_type\": \"plugin\", \"status\": 0, \"db\":\n\"\" } },\n\n    Logging out - disconnection\n\n    sudo cat  <directory where audit log files are located>/audit.log | egrep\n\"\\\"event\\\": \\\"disconnect\\”\"\n\n    Example output:\n    { \"timestamp\": \"2020-08-21 17:47:11\", \"id\": 1, \"class\":\n\"connection\", \"event\": \"disconnect\", \"connection_id\": 19, \"account\":\n{ \"user\": \"newuser\", \"host\": \"localhost\" }, \"login\": { \"user\":\n\"newuser\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" },\n\"connection_data\": { \"connection_type\": \"plugin\" } },",
            "__new": "Review the system documentation to determine if MySQL Server is required to audit when successful logons or connections occur.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters in place are generating records when successful logons or connections occur, log in to MySQL and then log out. Below is an example using MySQL Shell:\n% mysqlsh —sql\n MySQL  SQL > \\connect newuser@localhost\nCreating a session to 'newuser@localhost'\n MySQL  localhost:33060+ ssl  SQL > \\quit\nBye!\n\nReview the audit log by running the Linux command:\nNote, \"status\": 0 for each indicates successful.\n\nsudo cat  <directory where audit log files are located>/audit.log | egrep  \"\\\"event\\\": \\”connect\\\"\"\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep  \"\\\"event\\\": \\”connect\\\"\"\n\nThe audit data will look similar to the example below:\nLogging in - connecting\n\n{ \"timestamp\": \"2020-08-21 17:47:09\", \"id\": 0, \"class\": \"connection\", \"event\": \"connect\", \"connection_id\": 19, \"account\": { \"user\": \"newuser\", \"host\": \"localhost\" }, \"login\": { \"user\": \"newuser\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"connection_data\": { \"connection_type\": \"plugin\", \"status\": 0, \"db\": \"\" } },\n\nLogging out - disconnection\n\nsudo cat  <directory where audit log files are located>/audit.log | egrep  \"\\\"event\\\": \\\"disconnect\\”\"\n\nExample output:\n{ \"timestamp\": \"2020-08-21 17:47:11\", \"id\": 1, \"class\": \"connection\", \"event\": \"disconnect\", \"connection_id\": 19, \"account\": { \"user\": \"newuser\", \"host\": \"localhost\" }, \"login\": { \"user\": \"newuser\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"connection_data\": { \"connection_type\": \"plugin\" } },"
          },
          "fix": {
            "__old": "If currently required, configure the MySQL Database Server to produce audit\nrecords when successful logons or connections occur.\n\n    See the supplemental file \"MySQL80Audit.sql\".",
            "__new": "If currently required, configure the MySQL Database Server to produce audit records when successful logons or connections occur.\n\nSee the supplemental file \"MySQL80Audit.sql\"."
          }
        }
      },
      "SV-235126": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n\n  audit_log_plugin_status = sql_session.query(audit_log_plugin)\n\n  query_audit_log_filter = %(\n  SELECT\n     audit_log_filter.NAME,\n     audit_log_filter.FILTER\n  FROM\n     mysql.audit_log_filter;\n  )\n\n  audit_log_filter_entries = sql_session.query(query_audit_log_filter)\n\n  query_audit_log_user = %(\n  SELECT\n     audit_log_user.USER,\n     audit_log_user.HOST,\n     audit_log_user.FILTERNAME\n  FROM\n     mysql.audit_log_user;\n  )\n\n  audit_log_user_entries = sql_session.query(query_audit_log_user)\n\n  query_server_audit_events = %(SHOW variables LIKE 'server_audit_events';)\n\n  server_audit_events_setting = sql_session.query(query_server_audit_events)\n\n\n  if !input('aws_rds')\n  \n    # Following code design will allow for adaptive tests in this partially automatable control\n    # If ANY of the automatable tests FAIL, the control will report automated statues\n    # If ALL automatable tests PASS, MANUAL review statuses are reported to ensure full compliance\n\n    if !audit_log_plugin_status.results.column('plugin_status').join.eql?('ACTIVE') or\n       audit_log_filter_entries.results.empty? or\n       audit_log_user_entries.results.empty?\n\n      describe 'Audit Log Plugin status' do\n        subject { audit_log_plugin_status.results.column('plugin_status') }\n        it { should cmp 'ACTIVE' }\n      end\n\n      describe 'List of entries in Table: audit_log_filter' do\n        subject { audit_log_filter_entries.results }\n        it { should_not be_empty }\n      end\n\n      describe 'List of entries in Table: audit_log_user' do\n        subject { audit_log_user_entries.results }\n        it { should_not be_empty }\n      end\n    end\n\n    describe \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" do\n      skip \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\"\n    end\n    describe \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\" do\n      skip \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\"\n    end\n    describe \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" do\n      skip \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\"\n    end\n    describe 'Manually validate that required audit logs are generated when the specified query is executed.' do\n      skip 'Manually validate that required audit logs are generated when the specified query is executed.'\n    end\n    \n  else\n    \n    describe 'Audit Log Plugin status' do\n      subject { audit_log_plugin_status.results.column('plugin_status') }\n      it { should cmp 'ACTIVE' }\n    end\n\n    describe 'Community Server server_audit_events settings' do\n      subject { Set[server_audit_events_setting.results.column('value')[0].split(',')] }\n      it { should cmp Set['CONNECT,QUERY'.split(',')] }\n    end\n    \n  end\n    ",
        "tags": {
          "check_id__added": "C-38345r623498_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235126r638812_rule",
            "__new": "SV-235126r961824_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must generate audit records when\nunsuccessful logons or connection attempts occur.",
          "__new": "The MySQL Database Server 8.0 must generate audit records when unsuccessful logons or connection attempts occur."
        },
        "desc": {
          "__old": "For completeness of forensic analysis, it is necessary to track failed\nattempts to log on to the Database Management System (DBMS). While positive\nidentification may not be possible in a case of failed authentication, as much\ninformation as possible about the incident must be captured.",
          "__new": "For completeness of forensic analysis, it is necessary to track failed attempts to log on to the Database Management System (DBMS). While positive identification may not be possible in a case of failed authentication, as much information as possible about the incident must be captured."
        },
        "descs": {
          "default__deleted": "For completeness of forensic analysis, it is necessary to track failed\nattempts to log on to the Database Management System (DBMS). While positive\nidentification may not be possible in a case of failed authentication, as much\ninformation as possible about the incident must be captured.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the system documentation to determine if MySQL Server is required to\naudit when unsuccessful logons or connection attempts occur.\n\n    Check if MySQL audit is configured and enabled. The my.cnf file will set\nthe variable audit_file.\n\n    To further check, execute the following query:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n          FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'audit%';\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for SERVER_AUDIT should return ACTIVE.]\n\n    The status of the audit_log plugin must be \"active\". If it is not\n\"active\", this is a finding.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used and configured to \naudit all CONNECT and QUERY events.\nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the CONNECT and QUERY events are enabled:\n    SHOW variables LIKE 'server_audit_events';\n    +---------------------+---------------+\n    | Variable_name       | Value         |\n    +---------------------+---------------+\n    | server_audit_events | CONNECT,QUERY |\n    +---------------------+---------------+\n  \t1 row in set (0.00 sec)    \n  \tThe value for server_audit_events should return CONNECT,QUERY.]\n  \n    Review audit filters and associated users by running the following queries:\n    SELECT `audit_log_filter`.`NAME`,\n       `audit_log_filter`.`FILTER`\n    FROM `mysql`.`audit_log_filter`;\n\n    SELECT `audit_log_user`.`USER`,\n       `audit_log_user`.`HOST`,\n       `audit_log_user`.`FILTERNAME`\n    FROM `mysql`.`audit_log_user`;\n\n    All currently defined audits for the MySQL server instance will be listed.\nIf no audits are returned, this is a finding.\n\n    To check if the audit filters that are in place are generating records when\nunsuccessful logons or connection attempts occur:\n\n    Log in to MySQL and then log out. For example, using MySQL Shell:\n    % mysqlsh —sql\n     MySQL  SQL > \\connect notauser@localhost\n    Creating a session to 'notauser@localhost'\n    Please provide the password for 'notauser@localhost':\n    MySQL Error 1045: Access denied for user 'notauser'@'localhost' (using\npassword: YES)\n\n    Review the audit log by running the Linux command:\n    Note, \"status\": 1045  for each indicates failed attempt.\n\n    sudo cat  <directory where audit log files are located>/audit.log | egrep\nnotauser\n    For example if the values returned by - \"select @@datadir,\n@@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\n    sudo cat  /usr/local/mysql/data/audit.log |egrep notauser\n\n    The audit data will look similar to the example below:\n    { \"timestamp\": \"2020-08-21 17:54:08\", \"id\": 0, \"class\":\n\"connection\", \"event\": \"connect\", \"connection_id\": 20, \"account\": {\n\"user\": \"\", \"host\": \"localhost\" }, \"login\": { \"user\": \"notauser\",\n\"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"connection_data\": {\n\"connection_type\": \"plugin\", \"status\": 1045, \"db\": \"\" } },",
            "__new": "Review the system documentation to determine if MySQL Server is required to audit when unsuccessful logons or connection attempts occur.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters that are in place are generating records when unsuccessful logons or connection attempts occur:\n\nLog in to MySQL and then log out. For example, using MySQL Shell:\n% mysqlsh —sql\n MySQL  SQL > \\connect notauser@localhost\nCreating a session to 'notauser@localhost'\nPlease provide the password for 'notauser@localhost': \nMySQL Error 1045: Access denied for user 'notauser'@'localhost' (using password: YES)\n\nReview the audit log by running the Linux command:\nNote, \"status\": 1045  for each indicates failed attempt.\n\nsudo cat  <directory where audit log files are located>/audit.log | egrep notauser \nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep notauser\n\nThe audit data will look similar to the example below:\n{ \"timestamp\": \"2020-08-21 17:54:08\", \"id\": 0, \"class\": \"connection\", \"event\": \"connect\", \"connection_id\": 20, \"account\": { \"user\": \"\", \"host\": \"localhost\" }, \"login\": { \"user\": \"notauser\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"connection_data\": { \"connection_type\": \"plugin\", \"status\": 1045, \"db\": \"\" } },"
          },
          "fix": {
            "__old": "If currently required, configure the MySQL Database Server to audit when\nunsuccessful logons or connections attempts occur.\n\n    See the supplemental file \"MySQL80Audit.sql\".",
            "__new": "If currently required, configure the MySQL Database Server to audit when unsuccessful logons or connections attempts occur.\n\nSee the supplemental file \"MySQL80Audit.sql\"."
          }
        }
      },
      "SV-235127": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n  \n  audit_log_plugin_status = sql_session.query(audit_log_plugin)\n\n  query_audit_log_filter = %(\n  SELECT\n     audit_log_filter.NAME,\n     audit_log_filter.FILTER\n  FROM\n     mysql.audit_log_filter;\n  )\n\n  audit_log_filter_entries = sql_session.query(query_audit_log_filter)\n\n  query_audit_log_user = %(\n  SELECT\n     audit_log_user.USER,\n     audit_log_user.HOST,\n     audit_log_user.FILTERNAME\n  FROM\n     mysql.audit_log_user;\n  )\n\n  audit_log_user_entries = sql_session.query(query_audit_log_user)\n\n  query_server_audit_events = %(SHOW variables LIKE 'server_audit_events';)\n\n  server_audit_events_setting = sql_session.query(query_server_audit_events)\n\n\n  if !input('aws_rds')\n  \n    # Following code design will allow for adaptive tests in this partially automatable control\n    # If ANY of the automatable tests FAIL, the control will report automated statues\n    # If ALL automatable tests PASS, MANUAL review statuses are reported to ensure full compliance\n\n    if !audit_log_plugin_status.results.column('plugin_status').join.eql?('ACTIVE') or\n       audit_log_filter_entries.results.empty? or\n       audit_log_user_entries.results.empty?\n\n      describe 'Audit Log Plugin status' do\n        subject { audit_log_plugin_status.results.column('plugin_status') }\n        it { should cmp 'ACTIVE' }\n      end\n\n      describe 'List of entries in Table: audit_log_filter' do\n        subject { audit_log_filter_entries.results }\n        it { should_not be_empty }\n      end\n\n      describe 'List of entries in Table: audit_log_user' do\n        subject { audit_log_user_entries.results }\n        it { should_not be_empty }\n      end\n    end\n\n    describe \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" do\n      skip \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" \n    end\n    describe \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\" do\n      skip \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\" \n    end\n    describe \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" do\n      skip \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\"\n    end\n    \n  else\n    \n    describe 'Audit Log Plugin status' do\n      subject { audit_log_plugin_status.results.column('plugin_status') }\n      it { should cmp 'ACTIVE' }\n    end\n\n    describe 'Community Server server_audit_events settings' do\n      subject { Set[server_audit_events_setting.results.column('value')[0].split(',')] }\n      it { should cmp Set['CONNECT,QUERY'.split(',')] }\n    end\n    \n  end\n    ",
        "tags": {
          "check_id__added": "C-38346r623501_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235127r638812_rule",
            "__new": "SV-235127r961827_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must generate audit records for all\nprivileged activities or other system-level access.",
          "__new": "The MySQL Database Server 8.0 must generate audit records for all privileged activities or other system-level access."
        },
        "desc": {
          "__old": "Without tracking privileged activity, it would be difficult to\nestablish, correlate, and investigate the events relating to an incident or\nidentify those responsible for one.\n\n    System documentation should include a definition of the functionality\nconsidered privileged.\n\n    A privileged function in this context is any operation that modifies the\nstructure of the database, its built-in logic, or its security settings. This\nwould include all Data Definition Language (DDL) statements and all\nsecurity-related statements. In a SQL environment, it encompasses, but is not\nnecessarily limited to:\n    CREATE\n    ALTER\n    DROP\n    GRANT\n    REVOKE\n    DENY\n\n    There may also be Data Manipulation Language (DML) statements that, subject\nto context, should be regarded as privileged. Possible examples in SQL include:\n\n    TRUNCATE TABLE;\n    DELETE, or\n    DELETE affecting more than n rows, for some n, or\n    DELETE without a WHERE clause;\n\n    UPDATE or\n    UPDATE affecting more than n rows, for some n, or\n    UPDATE without a WHERE clause;\n\n    any SELECT, INSERT, UPDATE, or DELETE to an application-defined security\ntable executed by other than a security principal.\n\n    Depending on the capabilities of the DBMS and the design of the database\nand associated applications, audit logging may be achieved by means of Database\nManagement System (DBMS) auditing features, database triggers, other\nmechanisms, or a combination of these.\n\n    Note that it is particularly important to audit, and tightly control, any\naction that weakens the implementation of this requirement itself, since the\nobjective is to have a complete audit trail of all administrative activity.",
          "__new": "Without tracking privileged activity, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nSystem documentation should include a definition of the functionality considered privileged.\n\nA privileged function in this context is any operation that modifies the structure of the database, its built-in logic, or its security settings. This would include all Data Definition Language (DDL) statements and all security-related statements. In a SQL environment, it encompasses, but is not necessarily limited to:\nCREATE\nALTER\nDROP\nGRANT\nREVOKE\nDENY\n\nThere may also be Data Manipulation Language (DML) statements that, subject to context, should be regarded as privileged. Possible examples in SQL include:\n\nTRUNCATE TABLE;\nDELETE, or\nDELETE affecting more than n rows, for some n, or\nDELETE without a WHERE clause;\n\nUPDATE or\nUPDATE affecting more than n rows, for some n, or\nUPDATE without a WHERE clause;\n\nany SELECT, INSERT, UPDATE, or DELETE to an application-defined security table executed by other than a security principal.\n\nDepending on the capabilities of the DBMS and the design of the database and associated applications, audit logging may be achieved by means of Database Management System (DBMS) auditing features, database triggers, other mechanisms, or a combination of these.\n\nNote that it is particularly important to audit, and tightly control, any action that weakens the implementation of this requirement itself, since the objective is to have a complete audit trail of all administrative activity."
        },
        "descs": {
          "default__deleted": "Without tracking privileged activity, it would be difficult to\nestablish, correlate, and investigate the events relating to an incident or\nidentify those responsible for one.\n\n    System documentation should include a definition of the functionality\nconsidered privileged.\n\n    A privileged function in this context is any operation that modifies the\nstructure of the database, its built-in logic, or its security settings. This\nwould include all Data Definition Language (DDL) statements and all\nsecurity-related statements. In a SQL environment, it encompasses, but is not\nnecessarily limited to:\n    CREATE\n    ALTER\n    DROP\n    GRANT\n    REVOKE\n    DENY\n\n    There may also be Data Manipulation Language (DML) statements that, subject\nto context, should be regarded as privileged. Possible examples in SQL include:\n\n    TRUNCATE TABLE;\n    DELETE, or\n    DELETE affecting more than n rows, for some n, or\n    DELETE without a WHERE clause;\n\n    UPDATE or\n    UPDATE affecting more than n rows, for some n, or\n    UPDATE without a WHERE clause;\n\n    any SELECT, INSERT, UPDATE, or DELETE to an application-defined security\ntable executed by other than a security principal.\n\n    Depending on the capabilities of the DBMS and the design of the database\nand associated applications, audit logging may be achieved by means of Database\nManagement System (DBMS) auditing features, database triggers, other\nmechanisms, or a combination of these.\n\n    Note that it is particularly important to audit, and tightly control, any\naction that weakens the implementation of this requirement itself, since the\nobjective is to have a complete audit trail of all administrative activity.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the system documentation to determine if MySQL Server is required to\naudit for all privileged activities or other system-level access.\n\n    Check if MySQL audit is configured and enabled. The my.cnf file will set\nthe variable audit_file.\n\n    To further check, execute the following query:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n          FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'audit%';\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for SERVER_AUDIT should return ACTIVE.]\n\n    The status of the audit_log plugin must be \"active\". If it is not\n\"active\", this is a finding.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used and configured to \naudit all CONNECT and QUERY events.\nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the CONNECT and QUERY events are enabled:\n    SHOW variables LIKE 'server_audit_events';\n    +---------------------+---------------+\n    | Variable_name       | Value         |\n    +---------------------+---------------+\n    | server_audit_events | CONNECT,QUERY |\n    +---------------------+---------------+\n  \t1 row in set (0.00 sec)    \n  \tThe value for server_audit_events should return CONNECT,QUERY.]\n  \n    Review audit filters and associated users by running the following queries:\n    SELECT `audit_log_filter`.`NAME`,\n       `audit_log_filter`.`FILTER`\n    FROM `mysql`.`audit_log_filter`;\n\n    SELECT `audit_log_user`.`USER`,\n       `audit_log_user`.`HOST`,\n       `audit_log_user`.`FILTERNAME`\n    FROM `mysql`.`audit_log_user`;\n\n    All currently defined audits for the MySQL server instance will be listed.\nIf no audits are returned, this is a finding.\n\n    Determine if rules are in place to capture the following types of commands\nrelated to permissions by running:\n    select * from mysql.audit_log_filter;\n\n    If the template SQL filter was used, it will have the name \"log_stig\".\n\n    Review the filter values. It will show filters for events of the type of\nthe field general_sql_command.str for the following SQL statement types:\n    grant\n    grant_roles\n    revoke\n    revoke_all\n    revoke_roles\n    drop_role\n    alter_user_default_role\n    create_role\n    drop_role\n    grant_roles\n    revoke_roles\n    set_role\n    create_user\n    alter_user\n    drop_user\n    alter_user\n    alter_user_default_role\n    create_user\n    drop_user\n    rename_user\n    show_create_user",
            "__new": "Review the system documentation to determine if MySQL Server is required to audit for all privileged activities or other system-level access.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nDetermine if rules are in place to capture the following types of commands related to permissions by running:\nselect * from mysql.audit_log_filter;\n\nIf the template SQL filter was used, it will have the name \"log_stig\".\n\nReview the filter values. It will show filters for events of the type of the field general_sql_command.str for the following SQL statement types:\ngrant\ngrant_roles\nrevoke\nrevoke_all\nrevoke_roles\ndrop_role\nalter_user_default_role\ncreate_role\ndrop_role\ngrant_roles\nrevoke_roles\nset_role\ncreate_user\nalter_user\ndrop_user\nalter_user\nalter_user_default_role\ncreate_user\ndrop_user\nrename_user\nshow_create_user"
          },
          "fix": {
            "__old": "Configure the MySQL Database Server to audit for all privileged activities\nor other system-level access.\n\n    Add the following events to the MySQL Server Audit:\n    grant\n    grant_roles\n    revoke\n    revoke_all\n    revoke_roles\n    drop_role\n    alter_user_default_role\n    create_role\n    drop_role\n    grant_roles\n    revoke_roles\n    set_role\n    create_user\n    alter_user\n    drop_user\n    alter_user\n    alter_user_default_role\n    create_user\n    drop_user\n    rename_user\n    show_create_user\n\n    See the supplemental file \"MySQL80Audit.sql\".",
            "__new": "Configure the MySQL Database Server to audit for all privileged activities or other system-level access.\n\nAdd the following events to the MySQL Server Audit: \ngrant\ngrant_roles\nrevoke\nrevoke_all\nrevoke_roles\ndrop_role\nalter_user_default_role\ncreate_role\ndrop_role\ngrant_roles\nrevoke_roles\nset_role\ncreate_user\nalter_user\ndrop_user\nalter_user\nalter_user_default_role\ncreate_user\ndrop_user\nrename_user\nshow_create_user\n\nSee the supplemental file \"MySQL80Audit.sql\"."
          }
        }
      },
      "SV-235128": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n  \n  audit_log_plugin_status = sql_session.query(audit_log_plugin)\n\n  query_audit_log_filter = %(\n  SELECT\n     audit_log_filter.NAME,\n     audit_log_filter.FILTER\n  FROM\n     mysql.audit_log_filter;\n  )\n\n  audit_log_filter_entries = sql_session.query(query_audit_log_filter)\n\n  query_audit_log_user = %(\n  SELECT\n     audit_log_user.USER,\n     audit_log_user.HOST,\n     audit_log_user.FILTERNAME\n  FROM\n     mysql.audit_log_user;\n  )\n\n  audit_log_user_entries = sql_session.query(query_audit_log_user)\n\n  query_server_audit_events = %(SHOW variables LIKE 'server_audit_events';)\n\n  server_audit_events_setting = sql_session.query(query_server_audit_events)\n\n\n  if !input('aws_rds')\n  \n    # Following code design will allow for adaptive tests in this partially automatable control\n    # If ANY of the automatable tests FAIL, the control will report automated statues\n    # If ALL automatable tests PASS, MANUAL review statuses are reported to ensure full compliance\n\n    if !audit_log_plugin_status.results.column('plugin_status').join.eql?('ACTIVE') or\n       audit_log_filter_entries.results.empty? or\n       audit_log_user_entries.results.empty?\n\n      describe 'Audit Log Plugin status' do\n        subject { audit_log_plugin_status.results.column('plugin_status') }\n        it { should cmp 'ACTIVE' }\n      end\n\n      describe 'List of entries in Table: audit_log_filter' do\n        subject { audit_log_filter_entries.results }\n        it { should_not be_empty }\n      end\n\n      describe 'List of entries in Table: audit_log_user' do\n        subject { audit_log_user_entries.results }\n        it { should_not be_empty }\n      end\n    end\n\n    describe \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" do\n      skip \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\"\n    end\n    describe \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\" do\n      skip \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\"\n    end\n    describe \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" do\n      skip \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\"\n    end\n    \n  else\n    \n    describe 'Audit Log Plugin status' do\n      subject { audit_log_plugin_status.results.column('plugin_status') }\n      it { should cmp 'ACTIVE' }\n    end\n\n    describe 'Community Server server_audit_events settings' do\n      subject { Set[server_audit_events_setting.results.column('value')[0].split(',')] }\n      it { should cmp Set['CONNECT,QUERY'.split(',')] }\n    end\n    \n  end\n    ",
        "tags": {
          "check_id__added": "C-38347r623504_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235128r638812_rule",
            "__new": "SV-235128r961827_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must generate audit records when\nunsuccessful attempts to execute privileged activities or other system-level\naccess occur.",
          "__new": "The MySQL Database Server 8.0 must generate audit records when unsuccessful attempts to execute privileged activities or other system-level access occur."
        },
        "desc": {
          "__old": "Without tracking privileged activity, it would be difficult to\nestablish, correlate, and investigate the events relating to an incident or\nidentify those responsible for one.\n\n    System documentation should include a definition of the functionality\nconsidered privileged.\n\n    A privileged function in this context is any operation that modifies the\nstructure of the database, its built-in logic, or its security settings. This\nwould include all Data Definition Language (DDL) statements and all\nsecurity-related statements. In an SQL environment, it encompasses, but is not\nnecessarily limited to:\n    CREATE\n    ALTER\n    DROP\n    GRANT\n    REVOKE\n    DENY\n\n    Note that it is particularly important to audit, and tightly control, any\naction that weakens the implementation of this requirement itself, since the\nobjective is to have a complete audit trail of all administrative activity.\n\n    To aid in diagnosis, it is necessary to keep track of failed attempts in\naddition to the successful ones.",
          "__new": "Without tracking privileged activity, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nSystem documentation should include a definition of the functionality considered privileged.\n\nA privileged function in this context is any operation that modifies the structure of the database, its built-in logic, or its security settings. This would include all Data Definition Language (DDL) statements and all security-related statements. In an SQL environment, it encompasses, but is not necessarily limited to:\nCREATE\nALTER\nDROP\nGRANT\nREVOKE\nDENY\n\nNote that it is particularly important to audit, and tightly control, any action that weakens the implementation of this requirement itself, since the objective is to have a complete audit trail of all administrative activity.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones."
        },
        "descs": {
          "default__deleted": "Without tracking privileged activity, it would be difficult to\nestablish, correlate, and investigate the events relating to an incident or\nidentify those responsible for one.\n\n    System documentation should include a definition of the functionality\nconsidered privileged.\n\n    A privileged function in this context is any operation that modifies the\nstructure of the database, its built-in logic, or its security settings. This\nwould include all Data Definition Language (DDL) statements and all\nsecurity-related statements. In an SQL environment, it encompasses, but is not\nnecessarily limited to:\n    CREATE\n    ALTER\n    DROP\n    GRANT\n    REVOKE\n    DENY\n\n    Note that it is particularly important to audit, and tightly control, any\naction that weakens the implementation of this requirement itself, since the\nobjective is to have a complete audit trail of all administrative activity.\n\n    To aid in diagnosis, it is necessary to keep track of failed attempts in\naddition to the successful ones.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the system documentation to determine if MySQL Server is required to\naudit for unsuccessful attempts to execute privileged activities or other\nsystem-level access.\n\n    Check if MySQL audit is configured and enabled. The my.cnf file will set\nthe variable audit_file.\n\n    To further check, execute the following query:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n          FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'audit%';\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for SERVER_AUDIT should return ACTIVE.]\n\n    The status of the audit_log plugin must be \"active\". If it is not\n\"active\", this is a finding.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used and configured to \naudit all CONNECT and QUERY events.\nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the CONNECT and QUERY events are enabled:\n    SHOW variables LIKE 'server_audit_events';\n    +---------------------+---------------+\n    | Variable_name       | Value         |\n    +---------------------+---------------+\n    | server_audit_events | CONNECT,QUERY |\n    +---------------------+---------------+\n  \t1 row in set (0.00 sec)    \n  \tThe value for server_audit_events should return CONNECT,QUERY.]\n \n    Review audit filters and associated users by running the following queries:\n    SELECT `audit_log_filter`.`NAME`,\n       `audit_log_filter`.`FILTER`\n    FROM `mysql`.`audit_log_filter`;\n\n    SELECT `audit_log_user`.`USER`,\n       `audit_log_user`.`HOST`,\n       `audit_log_user`.`FILTERNAME`\n    FROM `mysql`.`audit_log_user`;\n\n    All currently defined audits for the MySQL server instance will be listed.\nIf no audits are returned, this is a finding.\n\n    Determine if rules are in place to capture the following types of commands\nrelated to permissions by running:\n\n    select * from mysql.audit_log_filter;\n\n    If the template SQL filter was used, it will have the name log_stig.\n\n    Review the filter values it will show filters for events of type of the\nfield general_sql_command.str for the following SQL statement types:\n    grant\n    grant_roles\n    revoke\n    revoke_all\n    revoke_roles\n    drop_role\n    alter_user_default_role\n    create_role\n    drop_role\n    grant_roles\n    revoke_roles\n    set_role\n    create_user\n    alter_user\n    drop_user\n    alter_user\n    alter_user_default_role\n    create_user\n    drop_user\n    rename_user\n    show_create_user",
            "__new": "Review the system documentation to determine if MySQL Server is required to audit for unsuccessful attempts to execute privileged activities or other system-level access.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nDetermine if rules are in place to capture the following types of commands related to permissions by running:\n\nselect * from mysql.audit_log_filter;\n\nIf the template SQL filter was used, it will have the name log_stig.\n\nReview the filter values it will show filters for events of type of the field general_sql_command.str for the following SQL statement types:\ngrant\ngrant_roles\nrevoke\nrevoke_all\nrevoke_roles\ndrop_role\nalter_user_default_role\ncreate_role\ndrop_role\ngrant_roles\nrevoke_roles\nset_role\ncreate_user\nalter_user\ndrop_user\nalter_user\nalter_user_default_role\ncreate_user\ndrop_user\nrename_user\nshow_create_user"
          },
          "fix": {
            "__old": "Configure the MySQL Database Server to audit for unsuccessful attempts to\nexecute privileged activities or other system-level access.\n\n    Add the following events to the MySQL Server Audit:\n    grant\n    grant_roles\n    revoke\n    revoke_all\n    revoke_roles\n    drop_role\n    alter_user_default_role\n    create_role\n    drop_role\n    grant_roles\n    revoke_roles\n    set_role\n    create_user\n    alter_user\n    drop_user\n    alter_user\n    alter_user_default_role\n    create_user\n    drop_user\n    rename_user\n    show_create_user\n\n    See the supplemental file \"MySQL80Audit.sql\".",
            "__new": "Configure the MySQL Database Server to audit for unsuccessful attempts to execute privileged activities or other system-level access.\n\nAdd the following events to the MySQL Server Audit: \ngrant\ngrant_roles\nrevoke\nrevoke_all\nrevoke_roles\ndrop_role\nalter_user_default_role\ncreate_role\ndrop_role\ngrant_roles\nrevoke_roles\nset_role\ncreate_user\nalter_user\ndrop_user\nalter_user\nalter_user_default_role\ncreate_user\ndrop_user\nrename_user\nshow_create_user\n\nSee the supplemental file \"MySQL80Audit.sql\"."
          }
        }
      },
      "SV-235129": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n  \n  audit_log_plugin_status = sql_session.query(audit_log_plugin)\n\n  query_audit_log_filter = %(\n  SELECT\n     audit_log_filter.NAME,\n     audit_log_filter.FILTER\n  FROM\n     mysql.audit_log_filter;\n  )\n\n  audit_log_filter_entries = sql_session.query(query_audit_log_filter)\n\n  query_audit_log_user = %(\n  SELECT\n     audit_log_user.USER,\n     audit_log_user.HOST,\n     audit_log_user.FILTERNAME\n  FROM\n     mysql.audit_log_user;\n  )\n\n  audit_log_user_entries = sql_session.query(query_audit_log_user)\n\n  query_server_audit_events = %(SHOW variables LIKE 'server_audit_events';)\n\n  server_audit_events_setting = sql_session.query(query_server_audit_events)\n\n\n  if !input('aws_rds')\n  \n    # Following code design will allow for adaptive tests in this partially automatable control\n    # If ANY of the automatable tests FAIL, the control will report automated statues\n    # If ALL automatable tests PASS, MANUAL review statuses are reported to ensure full compliance\n\n    if !audit_log_plugin_status.results.column('plugin_status').join.eql?('ACTIVE') or\n       audit_log_filter_entries.results.empty? or\n       audit_log_user_entries.results.empty?\n\n      describe 'Audit Log Plugin status' do\n        subject { audit_log_plugin_status.results.column('plugin_status') }\n        it { should cmp 'ACTIVE' }\n      end\n\n      describe 'List of entries in Table: audit_log_filter' do\n        subject { audit_log_filter_entries.results }\n        it { should_not be_empty }\n      end\n\n      describe 'List of entries in Table: audit_log_user' do\n        subject { audit_log_user_entries.results }\n        it { should_not be_empty }\n      end\n    end\n\n    describe \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" do\n      skip \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\"\n    end\n    describe \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\" do\n      skip \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\"\n    end\n    describe \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" do\n      skip \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" \n    end\n    describe 'Manually validate that required audit logs are generated when the specified query is executed.' do\n      skip 'Manually validate that required audit logs are generated when the specified query is executed.'\n    end\n  else\n    \n    describe 'Audit Log Plugin status' do\n      subject { audit_log_plugin_status.results.column('plugin_status') }\n      it { should cmp 'ACTIVE' }\n    end\n\n    describe 'Community Server server_audit_events settings' do\n      subject { Set[server_audit_events_setting.results.column('value')[0].split(',')] }\n      it { should cmp Set['CONNECT,QUERY'.split(',')] }\n    end\n    \n  end\n    ",
        "tags": {
          "check_id__added": "C-38348r623507_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235129r638812_rule",
            "__new": "SV-235129r961830_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must generate audit records showing\nstarting and ending time for user access to the database(s).",
          "__new": "The MySQL Database Server 8.0 must generate audit records showing starting and ending time for user access to the database(s)."
        },
        "desc": {
          "__old": "For completeness of forensic analysis, it is necessary to know how\nlong a user's (or other principal's) connection to the Database Management\nSystem (DBMS) lasts. This can be achieved by recording disconnections, in\naddition to logons/connections, in the audit logs.\n\n    Disconnection may be initiated by the user or forced by the system (as in a\ntimeout) or result from a system or network failure. To the greatest extent\npossible, all disconnections must be logged.",
          "__new": "For completeness of forensic analysis, it is necessary to know how long a user's (or other principal's) connection to the Database Management System (DBMS) lasts. This can be achieved by recording disconnections, in addition to logons/connections, in the audit logs.  \n\nDisconnection may be initiated by the user or forced by the system (as in a timeout) or result from a system or network failure. To the greatest extent possible, all disconnections must be logged."
        },
        "descs": {
          "default__deleted": "For completeness of forensic analysis, it is necessary to know how\nlong a user's (or other principal's) connection to the Database Management\nSystem (DBMS) lasts. This can be achieved by recording disconnections, in\naddition to logons/connections, in the audit logs.\n\n    Disconnection may be initiated by the user or forced by the system (as in a\ntimeout) or result from a system or network failure. To the greatest extent\npossible, all disconnections must be logged.",
          "rationale__deleted": "",
          "check": {
            "__old": "Check if MySQL audit is configured and enabled. The my.cnf file will set\nthe variable audit_file.\n\n    To further check, execute the following query:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n          FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'audit%';\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for SERVER_AUDIT should return ACTIVE.]\n\n    The status of the audit_log plugin must be \"active\". If it is not\n\"active\", this is a finding.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used and configured to \naudit all CONNECT and QUERY events.\nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the CONNECT and QUERY events are enabled:\n    SHOW variables LIKE 'server_audit_events';\n    +---------------------+---------------+\n    | Variable_name       | Value         |\n    +---------------------+---------------+\n    | server_audit_events | CONNECT,QUERY |\n    +---------------------+---------------+\n  \t1 row in set (0.00 sec)    \n  \tThe value for server_audit_events should return CONNECT,QUERY.]\n  \n    Review audit filters and associated users by running the following queries:\n    SELECT `audit_log_filter`.`NAME`,\n       `audit_log_filter`.`FILTER`\n    FROM `mysql`.`audit_log_filter`;\n\n    SELECT `audit_log_user`.`USER`,\n       `audit_log_user`.`HOST`,\n       `audit_log_user`.`FILTERNAME`\n    FROM `mysql`.`audit_log_user`;\n\n    All currently defined audits for the MySQL server instance will be listed.\nIf no audits are returned, this is a finding.\n\n    To check if the audit filters that are in place are generating records when\nsuccessful logons or connections occur, log in to MySQL and then log out.\n\n    Below is an example using MySQL Shell:\n    % mysqlsh —sql\n     MySQL  SQL > \\connect newuser@localhost\n    Creating a session to 'newuser@localhost'\n     MySQL  localhost:33060+ ssl  SQL > \\quit\n    Bye!\n\n    Review the audit log by running the Linux command:\n    \"status\": 0 for each indicates successful.\n    \"connection_id\": 19 is the same as the connections process id and there\nwill be matching disconnect event with the same connection_id number. This can\nbe used to differentiate multiple connections using the same login.\n    Each connect and disconnect has a timestamp tag with the time in\nCoordinated Universal Time (UTC).\n\n    sudo cat  <directory where audit log files are located>/audit.log | egrep\n\"\\\"event\\\": \\”connect\\\"\"\n    For example if the values returned by - \"select @@datadir,\n@@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\n    sudo cat  /usr/local/mysql/data/audit.log |egrep \"\\\"event\\\":\n\\”connect\\\"\"\n\n    The audit data will look similar to the example below:\n    Logging in - connecting\n\n    { \"timestamp\": \"2020-08-21 17:47:09\", \"id\": 0, \"class\":\n\"connection\", \"event\": \"connect\", \"connection_id\": 19, \"account\": {\n\"user\": \"newuser\", \"host\": \"localhost\" }, \"login\": { \"user\":\n\"newuser\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" },\n\"connection_data\": { \"connection_type\": \"plugin\", \"status\": 0, \"db\":\n\"\" } },\n\n    Logging out - disconnection\n\n    sudo cat  <directory where audit log files are located>/audit.log | egrep\n\"\\\"event\\\": \\\"disconnect\\”\"\n\n    { \"timestamp\": \"2020-08-21 17:47:11\", \"id\": 1, \"class\":\n\"connection\", \"event\": \"disconnect\", \"connection_id\": 19, \"account\":\n{ \"user\": \"newuser\", \"host\": \"localhost\" }, \"login\": { \"user\":\n\"newuser\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" },\n\"connection_data\": { \"connection_type\": \"plugin\" } },",
            "__new": "Check if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters that are in place are generating records when successful logons or connections occur, log in to MySQL and then log out. \n\nBelow is an example using MySQL Shell:\n% mysqlsh —sql\n MySQL  SQL > \\connect newuser@localhost\nCreating a session to 'newuser@localhost'\n MySQL  localhost:33060+ ssl  SQL > \\quit\nBye!\n\nReview the audit log by running the Linux command:\n\"status\": 0 for each indicates successful.\n\"connection_id\": 19 is the same as the connections process id and there will be matching disconnect event with the same connection_id number. This can be used to differentiate multiple connections using the same login.\nEach connect and disconnect has a timestamp tag with the time in Coordinated Universal Time (UTC).\n\nsudo cat  <directory where audit log files are located>/audit.log | egrep  \"\\\"event\\\": \\”connect\\\"\"\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\nsudo cat  /usr/local/mysql/data/audit.log |egrep \"\\\"event\\\": \\”connect\\\"\"\n\nThe audit data will look similar to the example below:\nLogging in - connecting\n\n{ \"timestamp\": \"2020-08-21 17:47:09\", \"id\": 0, \"class\": \"connection\", \"event\": \"connect\", \"connection_id\": 19, \"account\": { \"user\": \"newuser\", \"host\": \"localhost\" }, \"login\": { \"user\": \"newuser\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"connection_data\": { \"connection_type\": \"plugin\", \"status\": 0, \"db\": \"\" } },\n\nLogging out - disconnection\n\nsudo cat  <directory where audit log files are located>/audit.log | egrep  \"\\\"event\\\": \\\"disconnect\\”\"\n\n{ \"timestamp\": \"2020-08-21 17:47:11\", \"id\": 1, \"class\": \"connection\", \"event\": \"disconnect\", \"connection_id\": 19, \"account\": { \"user\": \"newuser\", \"host\": \"localhost\" }, \"login\": { \"user\": \"newuser\", \"os\": \"\", \"ip\": \"::1\", \"proxy\": \"\" }, \"connection_data\": { \"connection_type\": \"plugin\" } },"
          },
          "fix": {
            "__old": "If currently required, configure the MySQL Database Server to produce audit\nrecords when successful logons or connections occur.\n\n    See the supplemental file \"MySQL80Audit.sql\".",
            "__new": "If currently required, configure the MySQL Database Server to produce audit records when successful logons or connections occur.\n\nSee the supplemental file \"MySQL80Audit.sql\"."
          }
        }
      },
      "SV-235130": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n  \n  audit_log_plugin_status = sql_session.query(audit_log_plugin)\n\n  query_audit_log_filter = %(\n  SELECT\n     audit_log_filter.NAME,\n     audit_log_filter.FILTER\n  FROM\n     mysql.audit_log_filter;\n  )\n\n  audit_log_filter_entries = sql_session.query(query_audit_log_filter)\n\n  query_audit_log_user = %(\n  SELECT\n     audit_log_user.USER,\n     audit_log_user.HOST,\n     audit_log_user.FILTERNAME\n  FROM\n     mysql.audit_log_user;\n  )\n\n  audit_log_user_entries = sql_session.query(query_audit_log_user)\n\n  query_server_audit_events = %(SHOW variables LIKE 'server_audit_events';)\n\n  server_audit_events_setting = sql_session.query(query_server_audit_events)\n\n\n  if !input('aws_rds')\n  \n    # Following code design will allow for adaptive tests in this partially automatable control\n    # If ANY of the automatable tests FAIL, the control will report automated statues\n    # If ALL automatable tests PASS, MANUAL review statuses are reported to ensure full compliance\n\n    if !audit_log_plugin_status.results.column('plugin_status').join.eql?('ACTIVE') or\n       audit_log_filter_entries.results.empty? or\n       audit_log_user_entries.results.empty?\n\n      describe 'Audit Log Plugin status' do\n        subject { audit_log_plugin_status.results.column('plugin_status') }\n        it { should cmp 'ACTIVE' }\n      end\n\n      describe 'List of entries in Table: audit_log_filter' do\n        subject { audit_log_filter_entries.results }\n        it { should_not be_empty }\n      end\n\n      describe 'List of entries in Table: audit_log_user' do\n        subject { audit_log_user_entries.results }\n        it { should_not be_empty }\n      end\n    end\n\n    describe \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" do\n      skip \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\"\n    end\n    describe \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\" do\n      skip \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\"\n    end\n    describe \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" do\n      skip \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\"\n    end\n    describe 'Manually validate that required audit logs are generated when the specified query is executed.' do\n      skip 'Manually validate that required audit logs are generated when the specified query is executed.'\n    end\n    \n  else\n    \n    describe 'Audit Log Plugin status' do\n      subject { audit_log_plugin_status.results.column('plugin_status') }\n      it { should cmp 'ACTIVE' }\n    end\n\n    describe 'Community Server server_audit_events settings' do\n      subject { Set[server_audit_events_setting.results.column('value')[0].split(',')] }\n      it { should cmp Set['CONNECT,QUERY'.split(',')] }\n    end\n    \n  end\n    ",
        "tags": {
          "check_id__added": "C-38349r623510_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235130r638812_rule",
            "__new": "SV-235130r961833_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must generate audit records when\nconcurrent logons/connections by the same user from different workstations.",
          "__new": "The MySQL Database Server 8.0 must generate audit records when concurrent logons/connections by the same user from different workstations."
        },
        "desc": {
          "__old": "For completeness of forensic analysis, it is necessary to track who\nlogs on to the Database Management System (DBMS).\n\n    Concurrent connections by the same user from multiple workstations may be\nvalid use of the system; or such connections may be due to improper\ncircumvention of the requirement to use the CAC for authentication; or they may\nindicate unauthorized account sharing; or they may be because an account has\nbeen compromised.\n\n    (If the fact of multiple, concurrent logons by a given user can be reliably\nreconstructed from the log entries for other events (logons/connections;\nvoluntary and involuntary disconnections), then it is not mandatory to create\nadditional log entries specifically for this).",
          "__new": "For completeness of forensic analysis, it is necessary to track who logs on to the Database Management System (DBMS).\n\nConcurrent connections by the same user from multiple workstations may be valid use of the system; or such connections may be due to improper circumvention of the requirement to use the CAC for authentication; or they may indicate unauthorized account sharing; or they may be because an account has been compromised.\n\n(If the fact of multiple, concurrent logons by a given user can be reliably reconstructed from the log entries for other events (logons/connections; voluntary and involuntary disconnections), then it is not mandatory to create additional log entries specifically for this)."
        },
        "descs": {
          "default__deleted": "For completeness of forensic analysis, it is necessary to track who\nlogs on to the Database Management System (DBMS).\n\n    Concurrent connections by the same user from multiple workstations may be\nvalid use of the system; or such connections may be due to improper\ncircumvention of the requirement to use the CAC for authentication; or they may\nindicate unauthorized account sharing; or they may be because an account has\nbeen compromised.\n\n    (If the fact of multiple, concurrent logons by a given user can be reliably\nreconstructed from the log entries for other events (logons/connections;\nvoluntary and involuntary disconnections), then it is not mandatory to create\nadditional log entries specifically for this).",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the system documentation to determine if MySQL Server is required to\naudit the concurrent logons/connections by the same user from different\nworkstations.\n\n    Check if MySQL audit is configured and enabled. The my.cnf file will set\nthe variable audit_file.\n\n    To further check, execute the following query:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n          FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'audit%';\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for SERVER_AUDIT should return ACTIVE.]\n\n    The status of the audit_log plugin must be \"active\". If it is not\n\"active\", this is a finding.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used and configured to \naudit all CONNECT and QUERY events.\nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the CONNECT and QUERY events are enabled:\n    SHOW variables LIKE 'server_audit_events';\n    +---------------------+---------------+\n    | Variable_name       | Value         |\n    +---------------------+---------------+\n    | server_audit_events | CONNECT,QUERY |\n    +---------------------+---------------+\n  \t1 row in set (0.00 sec)    \n  \tThe value for server_audit_events should return CONNECT,QUERY.]\n  \n    Review audit filters and associated users by running the following queries:\n    SELECT `audit_log_filter`.`NAME`,\n       `audit_log_filter`.`FILTER`\n    FROM `mysql`.`audit_log_filter`;\n\n    SELECT `audit_log_user`.`USER`,\n       `audit_log_user`.`HOST`,\n       `audit_log_user`.`FILTERNAME`\n    FROM `mysql`.`audit_log_user`;\n\n    All currently defined audits for the MySQL server instance will be listed.\nIf no audits are returned, this is a finding.\n\n    To check if the audit filters that are in place are generating records when\nmultiple connections occur:\n\n    Run multiple connections from the same user without logging out and from\ndifferent IP addresses.\n\n    Review the audit log:\n    sudo cat  <directory where audit log files are located>/audit.log | egrep\n<username>\n    For example if the values returned by - \"select @@datadir,\n@@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log and the user is\nfewconnects then\n    sudo cat  /usr/local/mysql/data/audit.log |egrep fewconnects\n\n     { \"connection_type\": \"ssl\", \"status\": 0, \"db\": \"\",\n\"connection_attributes\": { \"_pid\": \"9132\", \"_os\": \"macos10.14\",\n\"_platform\": \"x86_64\", \"_client_version\": \"8.0.20\", \"_client_name\":\n\"libmysql\", \"program_name\": \"mysqlsh\" } } },\n    { \"timestamp\": \"2020-08-31 18:03:41\", \"id\": 0, \"class\":\n\"connection\", \"event\": \"connect\", \"connection_id\": 28, \"account\": {\n\"user\": \"fewconnects\", \"host\": \"localhost\" }, \"login\": { \"user\":\n\"fewconnects\", \"os\": \"\", \"ip\": \"\", \"proxy\": \"\" },\n\"connection_data\": { \"connection_type\": \"ssl\", \"status\": 0, \"db\":\n\"\", \"connection_attributes\": { \"_pid\": \"9132\", \"_os\": \"macos10.14\",\n\"_platform\": \"x86_64\", \"_client_version\": \"8.0.20\", \"_client_name\":\n\"libmysql\", \"program_name\": \"mysqlsh\" } } }\n    { \"timestamp\": \"2020-08-31 18:11:05\", \"id\": 12, \"class\":\n\"connection\", \"event\": \"connect\", \"connection_id\": 38, \"account\": {\n\"user\": \"fewconnects\", \"host\": \"localhost\" }, \"login\": { \"user\":\n\"fewconnects\", \"os\": \"\", \"ip\": \"93.122.141.147\", \"proxy\": \"\" },\n\"connection_data\": { \"connection_type\": \"ssl\", \"status\": 0, \"db\":\n\"\", \"connection_attributes\": { \"_pid\": \"903\", \"_os\": \"macos10.15\",\n\"_platform\": \"x86_64\", \"_client_version\": \"8.0.20\", \"_client_name\":\n\"libmysql\", \"program_name\": \"MySQLWorkbench\" } } },\n    Note that each connection has a different connection_id - indicating\ndistinctly auditing multiple connections. Here there are connections from\nmysqlsh and MySQLWorkbench; the event type is \"event\": “connect” and the\n\"user\": \"fewconnects\", \"os\": \"\", \"ip\": “127.0.0.1” and \"login\": {\n\"user\": \"fewconnects\", \"os\": \"\", \"ip\": “93.122.141.147” - that is\nwith different IPs from the different workstations.\n\n    If the audit events are not present, this is a finding.\n\n    If currently required, configure the MySQL Database Server to produce audit\nrecords when connections occur.\n\n    See the supplemental file \"MySQL80Audit.sql\".",
            "__new": "Review the system documentation to determine if MySQL Server is required to audit the concurrent logons/connections by the same user from different workstations.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters that are in place are generating records when multiple connections occur:\n\nRun multiple connections from the same user without logging out and from different IP addresses.\n\nReview the audit log:\nsudo cat  <directory where audit log files are located>/audit.log | egrep <username>\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log and the user is fewconnects then\nsudo cat  /usr/local/mysql/data/audit.log |egrep fewconnects\n\n { \"connection_type\": \"ssl\", \"status\": 0, \"db\": \"\", \"connection_attributes\": { \"_pid\": \"9132\", \"_os\": \"macos10.14\", \"_platform\": \"x86_64\", \"_client_version\": \"8.0.20\", \"_client_name\": \"libmysql\", \"program_name\": \"mysqlsh\" } } },\n{ \"timestamp\": \"2020-08-31 18:03:41\", \"id\": 0, \"class\": \"connection\", \"event\": \"connect\", \"connection_id\": 28, \"account\": { \"user\": \"fewconnects\", \"host\": \"localhost\" }, \"login\": { \"user\": \"fewconnects\", \"os\": \"\", \"ip\": \"\", \"proxy\": \"\" }, \"connection_data\": { \"connection_type\": \"ssl\", \"status\": 0, \"db\": \"\", \"connection_attributes\": { \"_pid\": \"9132\", \"_os\": \"macos10.14\", \"_platform\": \"x86_64\", \"_client_version\": \"8.0.20\", \"_client_name\": \"libmysql\", \"program_name\": \"mysqlsh\" } } }\n{ \"timestamp\": \"2020-08-31 18:11:05\", \"id\": 12, \"class\": \"connection\", \"event\": \"connect\", \"connection_id\": 38, \"account\": { \"user\": \"fewconnects\", \"host\": \"localhost\" }, \"login\": { \"user\": \"fewconnects\", \"os\": \"\", \"ip\": \"93.122.141.147\", \"proxy\": \"\" }, \"connection_data\": { \"connection_type\": \"ssl\", \"status\": 0, \"db\": \"\", \"connection_attributes\": { \"_pid\": \"903\", \"_os\": \"macos10.15\", \"_platform\": \"x86_64\", \"_client_version\": \"8.0.20\", \"_client_name\": \"libmysql\", \"program_name\": \"MySQLWorkbench\" } } },\nNote that each connection has a different connection_id - indicating distinctly auditing multiple connections. Here there are connections from mysqlsh and MySQLWorkbench; the event type is \"event\": “connect” and the \"user\": \"fewconnects\", \"os\": \"\", \"ip\": “127.0.0.1” and \"login\": { \"user\": \"fewconnects\", \"os\": \"\", \"ip\": “93.122.141.147” - that is with different IPs from the different workstations.\n\nIf the audit events are not present, this is a finding.\n\nIf currently required, configure the MySQL Database Server to produce audit records when connections occur.\n\nSee the supplemental file \"MySQL80Audit.sql\"."
          },
          "fix": {
            "__old": "If currently required, configure the MySQL Database Server to produce audit\nrecords when connections occur.\n\n    See the supplemental file \"MySQL80Audit.sql\".",
            "__new": "If currently required, configure the MySQL Database Server to produce audit records when connections occur.\n\nSee the supplemental file \"MySQL80Audit.sql\"."
          }
        }
      },
      "SV-235131": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n\n  audit_log_plugin_status = sql_session.query(audit_log_plugin)\n\n  query_audit_log_filter = %(\n  SELECT\n     audit_log_filter.NAME,\n     audit_log_filter.FILTER\n  FROM\n     mysql.audit_log_filter;\n  )\n\n  audit_log_filter_entries = sql_session.query(query_audit_log_filter)\n\n  query_audit_log_user = %(\n  SELECT\n     audit_log_user.USER,\n     audit_log_user.HOST,\n     audit_log_user.FILTERNAME\n  FROM\n     mysql.audit_log_user;\n  )\n\n  audit_log_user_entries = sql_session.query(query_audit_log_user)\n\n  query_server_audit_events = %(SHOW variables LIKE 'server_audit_events';)\n\n  server_audit_events_setting = sql_session.query(query_server_audit_events)\n\n\n  if !input('aws_rds')\n  \n    # Following code design will allow for adaptive tests in this partially automatable control\n    # If ANY of the automatable tests FAIL, the control will report automated statues\n    # If ALL automatable tests PASS, MANUAL review statuses are reported to ensure full compliance\n\n    if !audit_log_plugin_status.results.column('plugin_status').join.eql?('ACTIVE') or\n       audit_log_filter_entries.results.empty? or\n       audit_log_user_entries.results.empty?\n\n      describe 'Audit Log Plugin status' do\n        subject { audit_log_plugin_status.results.column('plugin_status') }\n        it { should cmp 'ACTIVE' }\n      end\n\n      describe 'List of entries in Table: audit_log_filter' do\n        subject { audit_log_filter_entries.results }\n        it { should_not be_empty }\n      end\n\n      describe 'List of entries in Table: audit_log_user' do\n        subject { audit_log_user_entries.results }\n        it { should_not be_empty }\n      end\n    end\n\n    describe \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" do\n      skip \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\"\n    end\n    describe \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\" do\n      skip \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\"\n    end\n    describe \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" do\n      skip \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\"\n    end\n    describe 'Manually validate that required audit logs are generated when the specified query is executed.' do\n      skip 'Manually validate that required audit logs are generated when the specified query is executed.'\n    end\n    \n  else\n    \n    describe 'Audit Log Plugin status' do\n      subject { audit_log_plugin_status.results.column('plugin_status') }\n      it { should cmp 'ACTIVE' }\n    end\n\n    describe 'Community Server server_audit_events settings' do\n      subject { Set[server_audit_events_setting.results.column('value')[0].split(',')] }\n      it { should cmp Set['CONNECT,QUERY'.split(',')] }\n    end\n    \n  end\n    ",
        "tags": {
          "check_id__added": "C-38350r623513_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235131r638812_rule",
            "__new": "SV-235131r961836_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must be able to generate audit records\nwhen successful accesses to objects occur.",
          "__new": "The MySQL Database Server 8.0 must be able to generate audit records when successful accesses to objects occur."
        },
        "desc": {
          "__old": "Without tracking all or selected types of access to all or selected\nobjects (tables, views, procedures, functions, etc.), it would be difficult to\nestablish, correlate, and investigate the events relating to an incident, or\nidentify those responsible for one.\n\n    In an SQL environment, types of access include, but are not necessarily\nlimited to:\n    SELECT\n    INSERT\n    UPDATE\n    DELETE\n    EXECUTE",
          "__new": "Without tracking all or selected types of access to all or selected objects (tables, views, procedures, functions, etc.), it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one. \n\nIn an SQL environment, types of access include, but are not necessarily limited to:\nSELECT\nINSERT\nUPDATE\nDELETE\nEXECUTE"
        },
        "descs": {
          "default__deleted": "Without tracking all or selected types of access to all or selected\nobjects (tables, views, procedures, functions, etc.), it would be difficult to\nestablish, correlate, and investigate the events relating to an incident, or\nidentify those responsible for one.\n\n    In an SQL environment, types of access include, but are not necessarily\nlimited to:\n    SELECT\n    INSERT\n    UPDATE\n    DELETE\n    EXECUTE",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the system documentation to determine if MySQL Server is required to\ngenerate audit records when successful accesses to objects occur.\n\n    Check if MySQL audit is configured and enabled. The my.cnf file will set\nthe variable audit_file.\n\n    To further check, execute the following query:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n          FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'audit%';\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for SERVER_AUDIT should return ACTIVE.]\n\n    The status of the audit_log plugin must be \"active\". If it is not\n\"active\", this is a finding.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used and configured to \naudit all CONNECT and QUERY events.\nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the CONNECT and QUERY events are enabled:\n    SHOW variables LIKE 'server_audit_events';\n    +---------------------+---------------+\n    | Variable_name       | Value         |\n    +---------------------+---------------+\n    | server_audit_events | CONNECT,QUERY |\n    +---------------------+---------------+\n  \t1 row in set (0.00 sec)    \n  \tThe value for server_audit_events should return CONNECT,QUERY.]\n    \n    Review audit filters and associated users by running the following queries:\n    SELECT `audit_log_filter`.`NAME`,\n       `audit_log_filter`.`FILTER`\n    FROM `mysql`.`audit_log_filter`;\n\n    SELECT `audit_log_user`.`USER`,\n       `audit_log_user`.`HOST`,\n       `audit_log_user`.`FILTERNAME`\n    FROM `mysql`.`audit_log_user`;\n\n    All currently defined audits for the MySQL server instance will be listed.\nIf no audits are returned, this is a finding.\n\n    To check if the audit filters in place are generating records to audit when\ncertain objects are accessed:\n\n    Run a query and other access types on that object.\n    select * from <schemaname>/<tablename>;\n\n    Review the audit log by running the Linux command:\n    sudo cat  <directory where audit log files are located>/audit.log|egrep\n<tablename>\n    For example if the values returned by \"select @@datadir, @@audit_log_file;\n\" are  /usr/local/mysql/data/,  audit.log\n    sudo cat  /usr/local/mysql/data/audit.log |egrep <tablename>\n\n    If the audit event is not present, this is a finding.",
            "__new": "Review the system documentation to determine if MySQL Server is required to generate audit records when successful accesses to objects occur.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters in place are generating records to audit when certain objects are accessed:\n\nRun a query and other access types on that object.\nselect * from <schemaname>/<tablename>;\n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log|egrep <tablename>\nFor example if the values returned by \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log \nsudo cat  /usr/local/mysql/data/audit.log |egrep <tablename>\n\nIf the audit event is not present, this is a finding."
          },
          "fix": {
            "__old": "Configure the MySQL Database Server to audit when successful accesses to\nobjects occur.\n\n    See the supplemental file \"MySQL80Audit.sql\".",
            "__new": "Configure the MySQL Database Server to audit when successful accesses to objects occur. \n\nSee the supplemental file \"MySQL80Audit.sql\"."
          }
        }
      },
      "SV-235132": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n\n  audit_log_plugin_status = sql_session.query(audit_log_plugin)\n\n  query_audit_log_filter = %(\n  SELECT\n     audit_log_filter.NAME,\n     audit_log_filter.FILTER\n  FROM\n     mysql.audit_log_filter;\n  )\n\n  audit_log_filter_entries = sql_session.query(query_audit_log_filter)\n\n  query_audit_log_user = %(\n  SELECT\n     audit_log_user.USER,\n     audit_log_user.HOST,\n     audit_log_user.FILTERNAME\n  FROM\n     mysql.audit_log_user;\n  )\n\n  audit_log_user_entries = sql_session.query(query_audit_log_user)\n\n  query_server_audit_events = %(SHOW variables LIKE 'server_audit_events';)\n\n  server_audit_events_setting = sql_session.query(query_server_audit_events)\n\n\n  if !input('aws_rds')\n  \n    # Following code design will allow for adaptive tests in this partially automatable control\n    # If ANY of the automatable tests FAIL, the control will report automated statues\n    # If ALL automatable tests PASS, MANUAL review statuses are reported to ensure full compliance\n\n    if !audit_log_plugin_status.results.column('plugin_status').join.eql?('ACTIVE') or\n       audit_log_filter_entries.results.empty? or\n       audit_log_user_entries.results.empty?\n\n      describe 'Audit Log Plugin status' do\n        subject { audit_log_plugin_status.results.column('plugin_status') }\n        it { should cmp 'ACTIVE' }\n      end\n\n      describe 'List of entries in Table: audit_log_filter' do\n        subject { audit_log_filter_entries.results }\n        it { should_not be_empty }\n      end\n\n      describe 'List of entries in Table: audit_log_user' do\n        subject { audit_log_user_entries.results }\n        it { should_not be_empty }\n      end\n    end\n\n    describe \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" do\n      skip \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\"\n    end\n    describe \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\" do\n      skip \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\"\n    end\n    describe \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" do\n      skip \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\"\n    end\n    describe 'Manually validate that required audit logs are generated when the specified query is executed.' do\n      skip 'Manually validate that required audit logs are generated when the specified query is executed.'\n    end\n    \n  else\n    \n    describe 'Audit Log Plugin status' do\n      subject { audit_log_plugin_status.results.column('plugin_status') }\n      it { should cmp 'ACTIVE' }\n    end\n\n    describe 'Community Server server_audit_events settings' do\n      subject { Set[server_audit_events_setting.results.column('value')[0].split(',')] }\n      it { should cmp Set['CONNECT,QUERY'.split(',')] }\n    end\n    \n  end\n    ",
        "tags": {
          "check_id__added": "C-38351r623516_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235132r638812_rule",
            "__new": "SV-235132r961836_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must generate audit records when\nunsuccessful accesses to objects occur.",
          "__new": "The MySQL Database Server 8.0 must generate audit records when unsuccessful accesses to objects occur."
        },
        "desc": {
          "__old": "Without tracking all or selected types of access to all or selected\nobjects (tables, views, procedures, functions, etc.), it would be difficult to\nestablish, correlate, and investigate the events relating to an incident or\nidentify those responsible for one.\n\n    In a SQL environment, types of access include, but are not necessarily\nlimited to:\n    SELECT\n    INSERT\n    UPDATE\n    DELETE\n    EXECUTE\n\n    To aid in diagnosis, it is necessary to keep track of failed attempts in\naddition to the successful ones.",
          "__new": "Without tracking all or selected types of access to all or selected objects (tables, views, procedures, functions, etc.), it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nIn a SQL environment, types of access include, but are not necessarily limited to:\nSELECT\nINSERT\nUPDATE\nDELETE\nEXECUTE\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones."
        },
        "descs": {
          "default__deleted": "Without tracking all or selected types of access to all or selected\nobjects (tables, views, procedures, functions, etc.), it would be difficult to\nestablish, correlate, and investigate the events relating to an incident or\nidentify those responsible for one.\n\n    In a SQL environment, types of access include, but are not necessarily\nlimited to:\n    SELECT\n    INSERT\n    UPDATE\n    DELETE\n    EXECUTE\n\n    To aid in diagnosis, it is necessary to keep track of failed attempts in\naddition to the successful ones.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the system documentation to determine if MySQL Server is required to\ngenerate audit records when unsuccessful accesses to objects occur.\n\n    Check if MySQL audit is configured and enabled. The my.cnf file will set\nthe variable audit_file.\n\n    To further check, execute the following query:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n          FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'audit%';\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for SERVER_AUDIT should return ACTIVE.]\n\n    The status of the audit_log plugin must be \"active\". If it is not\n\"active\", this is a finding.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used and configured to \naudit all CONNECT and QUERY events.\nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the CONNECT and QUERY events are enabled:\n    SHOW variables LIKE 'server_audit_events';\n    +---------------------+---------------+\n    | Variable_name       | Value         |\n    +---------------------+---------------+\n    | server_audit_events | CONNECT,QUERY |\n    +---------------------+---------------+\n  \t1 row in set (0.00 sec)    \n  \tThe value for server_audit_events should return CONNECT,QUERY.]\n \n    Review audit filters and associated users by running the following queries:\n    SELECT `audit_log_filter`.`NAME`,\n       `audit_log_filter`.`FILTER`\n    FROM `mysql`.`audit_log_filter`;\n\n    SELECT `audit_log_user`.`USER`,\n       `audit_log_user`.`HOST`,\n       `audit_log_user`.`FILTERNAME`\n    FROM `mysql`.`audit_log_user`;\n\n    All currently defined audits for the MySQL server instance will be listed.\nIf no audits are returned, this is a finding.\n\n    To check if the audit filters in place are generating records to audit when\ncertain objects access is unsuccessful:\n\n    Connect a user without access to an object.\n\n    Run a failed query or other failed access types on that object.\n    select * from <schemaname>/<tablename>;\n\n    Review the audit log by running the Linux command:\n    sudo cat  <directory where audit log files are located>/audit.log|egrep\n<tablename>\n    For example if the values returned by \"select @@datadir, @@audit_log_file;\n\" are  /usr/local/mysql/data/,  audit.log\n    sudo cat  /usr/local/mysql/data/audit.log |egrep <tablename>\n\n    The record will show the failed attempt which is note by a non-zero status\nvalue.\n\n    If the audit event is not present, this is a finding.",
            "__new": "Review the system documentation to determine if MySQL Server is required to generate audit records when unsuccessful accesses to objects occur.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters in place are generating records to audit when certain objects access is unsuccessful:\n\nConnect a user without access to an object.\n\nRun a failed query or other failed access types on that object.\nselect * from <schemaname>/<tablename>;\n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log|egrep <tablename>\nFor example if the values returned by \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log \nsudo cat  /usr/local/mysql/data/audit.log |egrep <tablename>\n\nThe record will show the failed attempt which is note by a non-zero status value.\n\nIf the audit event is not present, this is a finding."
          },
          "fix": {
            "__old": "Configure the MySQL Database Server to audit when unsuccessful accesses to\nobjects occur.\n\n    See the supplemental file \"MySQL80Audit.sql\".",
            "__new": "Configure the MySQL Database Server to audit when unsuccessful accesses to objects occur. \n\nSee the supplemental file \"MySQL80Audit.sql\"."
          }
        }
      },
      "SV-235133": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n  \n  audit_log_plugin_status = sql_session.query(audit_log_plugin)\n\n  query_audit_log_filter = %(\n  SELECT\n     audit_log_filter.NAME,\n     audit_log_filter.FILTER\n  FROM\n     mysql.audit_log_filter;\n  )\n\n  audit_log_filter_entries = sql_session.query(query_audit_log_filter)\n\n  query_audit_log_user = %(\n  SELECT\n     audit_log_user.USER,\n     audit_log_user.HOST,\n     audit_log_user.FILTERNAME\n  FROM\n     mysql.audit_log_user;\n  )\n\n  audit_log_user_entries = sql_session.query(query_audit_log_user)\n\n  query_server_audit_events = %(SHOW variables LIKE 'server_audit_events';)\n\n  server_audit_events_setting = sql_session.query(query_server_audit_events)\n\n\n  if !input('aws_rds')\n  \n    # Following code design will allow for adaptive tests in this partially automatable control\n    # If ANY of the automatable tests FAIL, the control will report automated statues\n    # If ALL automatable tests PASS, MANUAL review statuses are reported to ensure full compliance\n\n    if !audit_log_plugin_status.results.column('plugin_status').join.eql?('ACTIVE') or\n       audit_log_filter_entries.results.empty? or\n       audit_log_user_entries.results.empty?\n\n      describe 'Audit Log Plugin status' do\n        subject { audit_log_plugin_status.results.column('plugin_status') }\n        it { should cmp 'ACTIVE' }\n      end\n\n      describe 'List of entries in Table: audit_log_filter' do\n        subject { audit_log_filter_entries.results }\n        it { should_not be_empty }\n      end\n\n      describe 'List of entries in Table: audit_log_user' do\n        subject { audit_log_user_entries.results }\n        it { should_not be_empty }\n      end\n    end\n\n    describe \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" do\n      skip \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\"\n    end\n    describe \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\" do\n      skip \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\"\n    end\n    describe \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" do\n      skip \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\"\n    end\n    describe 'Manually validate that required audit logs are generated when the specified query is executed.' do\n      skip 'Manually validate that required audit logs are generated when the specified query is executed.'\n    end\n    \n  else\n    \n    describe 'Audit Log Plugin status' do\n      subject { audit_log_plugin_status.results.column('plugin_status') }\n      it { should cmp 'ACTIVE' }\n    end\n\n    describe 'Community Server server_audit_events settings' do\n      subject { Set[server_audit_events_setting.results.column('value')[0].split(',')] }\n      it { should cmp Set['CONNECT,QUERY'.split(',')] }\n    end\n    \n  end\n    ",
        "tags": {
          "check_id__added": "C-38352r623519_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235133r638812_rule",
            "__new": "SV-235133r961839_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must generate audit records for all\ndirect access to the database(s).",
          "__new": "The MySQL Database Server 8.0 must generate audit records for all direct access to the database(s)."
        },
        "desc": {
          "__old": "In this context, direct access is any query, command, or call to the\nDatabase Management System (DBMS) that comes from any source other than the\napplication(s) that it supports. Examples would be the command line or a\ndatabase management utility program. The intent is to capture all activity from\nadministrative and non-standard sources.",
          "__new": "In this context, direct access is any query, command, or call to the Database Management System (DBMS) that comes from any source other than the application(s) that it supports. Examples would be the command line or a database management utility program. The intent is to capture all activity from administrative and non-standard sources."
        },
        "descs": {
          "default__deleted": "In this context, direct access is any query, command, or call to the\nDatabase Management System (DBMS) that comes from any source other than the\napplication(s) that it supports. Examples would be the command line or a\ndatabase management utility program. The intent is to capture all activity from\nadministrative and non-standard sources.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the system documentation to determine if MySQL Server is required to\ngenerate audit records for all direct access to the database(s).\n\n    Check if MySQL audit is configured and enabled. The my.cnf file will set\nthe variable audit_file.\n\n    To further check, execute the following query:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n          FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'audit%';\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for SERVER_AUDIT should return ACTIVE.]\n\n    The status of the audit_log plugin must be \"active\". If it is not\n\"active\", this is a finding.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used and configured to \naudit all CONNECT and QUERY events.\nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the CONNECT and QUERY events are enabled:\n    SHOW variables LIKE 'server_audit_events';\n    +---------------------+---------------+\n    | Variable_name       | Value         |\n    +---------------------+---------------+\n    | server_audit_events | CONNECT,QUERY |\n    +---------------------+---------------+\n  \t1 row in set (0.00 sec)    \n  \tThe value for server_audit_events should return CONNECT,QUERY.]\n  \n    Review audit filters and associated users by running the following queries:\n    SELECT `audit_log_filter`.`NAME`,\n       `audit_log_filter`.`FILTER`\n    FROM `mysql`.`audit_log_filter`;\n\n    SELECT `audit_log_user`.`USER`,\n       `audit_log_user`.`HOST`,\n       `audit_log_user`.`FILTERNAME`\n    FROM `mysql`.`audit_log_user`;\n\n    All currently defined audits for the MySQL server instance will be listed.\nIf no audits are returned, this is a finding.\n\n    To check if the audit filters in place are generating records to audit all\ndirect access to the database(s):\n\n    Run any access to the database.\n\n    Review the audit log by running the Linux command:\n    sudo cat  <directory where audit log files are located>/audit.log\n    For example if the values returned by - \"select @@datadir,\n@@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log\n    sudo cat  /usr/local/mysql/data/audit.log\n\n    If the audit events are not present, this is a finding.",
            "__new": "Review the system documentation to determine if MySQL Server is required to generate audit records for all direct access to the database(s).\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nTo check if the audit filters in place are generating records to audit all direct access to the database(s):\n\nRun any access to the database.\n\nReview the audit log by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log\nFor example if the values returned by - \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log \nsudo cat  /usr/local/mysql/data/audit.log\n\nIf the audit events are not present, this is a finding."
          },
          "fix": {
            "__old": "If currently required, configure the MySQL Database Server to produce audit\nrecords for all direct access to the database(s).\n\n    See the supplemental file \"MySQL80Audit.sql\".",
            "__new": "If currently required, configure the MySQL Database Server to produce audit records for all direct access to the database(s).\n\nSee the supplemental file \"MySQL80Audit.sql\"."
          }
        }
      },
      "SV-235134": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  org_approved_cert_issuer = input('org_approved_cert_issuer')\n\n  if !input('aws_rds')\n   pki_exception_users = input('pki_exception_users')\n  else\n   pki_exception_users = input('pki_exception_users') + ['rdsadmin']\n  end\n\n  query_ssl_params = %(\n  SELECT @@ssl_ca,\n         @@ssl_capath,\n         @@ssl_cert,\n         @@ssl_cipher,\n         @@ssl_crl,\n         @@ssl_crlpath,\n         @@ssl_fips_mode,\n         @@ssl_key,\n         @@require_secure_transport,\n         @@datadir;\n  )\n\n  ssl_params = sql_session.query(query_ssl_params).results\n\n  if !input('aws_rds')\n\n    describe '@@ssl_crl' do\n      subject { ssl_params.column('@@ssl_crl').join }\n      it { should_not cmp 'NULL' }\n    end\n  \n  else\n    \n    if ssl_params.column('@@ssl_crlpath').join.eql?('NULL')\n      crl_path = ssl_params.column('@@datadir').join\n    else\n      crl_path = ssl_params.column('@@ssl_crlpath').join\n    end\n\n    require_secure_transport = ssl_params.column('@@require_secure_transport').join\n    describe '@@require_secure_transport' do\n      it \"shoud be 1 or ON. Got #{require_secure_transport}\" do\n        expect(require_secure_transport).to be_in(['1', 'ON'])\n      end\n    end\n\n    describe '@@ssl_cert' do\n      subject { ssl_params.column('@@ssl_cert').join }\n      it { should_not cmp 'NULL' }\n    end\n\n    if !input('aws_rds')\n      full_crl_path = \"#{crl_path}#{ssl_params.column('@@ssl_crl').join}\"\n      describe \"SSL CRL file: #{full_crl_path}\" do\n        subject { file(full_crl_path) }\n        it { should exist }\n      end\n\n      full_cert_path = \"#{ssl_params.column('@@datadir').join}#{ssl_params.column('@@ssl_cert').join}\"\n      describe \"SSL Certificate file: #{full_cert_path}\" do\n        subject { file(full_cert_path) }\n        it { should exist }\n      end\n\n      describe x509_certificate(full_cert_path) do\n        its('issuer.CN') { should match org_approved_cert_issuer }\n      end\n    end\n\n    query_user_params = \"\n        SELECT user.Host,\n          user.User,\n          user.ssl_type,\n          CAST(user.x509_issuer as CHAR) as Issuer,\n          CAST(user.x509_subject as CHAR) as Subject\n      FROM mysql.user\n      WHERE  user NOT LIKE 'mysql.%'\n             AND user NOT LIKE 'root'\n            AND user NOT IN ( '#{pki_exception_users.join(\"', '\")}' );\"\n\n    user_params = sql_session.query(query_user_params)\n\n    describe \"List of users Issuer fields\\n#{user_params.output}\" do\n      subject { user_params.results.column('issuer') }\n      it { should_not include nil }\n    end\n\n    describe \"List of users Subject fields\\n#{user_params.output}\" do\n      subject { user_params.results.column('subject') }\n      it { should_not include nil }\n    end\n    \n  end\n  ",
        "tags": {
          "check_id__added": "C-38353r623522_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235134r638812_rule",
            "__new": "SV-235134r961038_rule"
          },
          "nist": [
            [
              "-",
              "IA-5 (2) (a)"
            ],
            [
              "+",
              "IA-5 (2) (b) (1)"
            ]
          ]
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0, when utilizing PKI-based\nauthentication, must validate certificates by performing RFC 5280-compliant\ncertification path validation.",
          "__new": "The MySQL Database Server 8.0, when utilizing PKI-based authentication, must validate certificates by performing RFC 5280-compliant certification path validation."
        },
        "desc": {
          "__old": "The DoD standard for authentication is DoD-approved PKI certificates.\n\n    A certificate's certification path is the path from the end entity\ncertificate to a trusted root certification authority (CA). Certification path\nvalidation is necessary for a relying party to make an informed decision\nregarding acceptance of an end entity certificate. Certification path\nvalidation includes checks such as certificate issuer trust, time validity, and\nrevocation status for each certificate in the certification path. Revocation\nstatus information for CA and subject certificates in a certification path is\ncommonly provided via certificate revocation lists (CRLs) or online certificate\nstatus protocol (OCSP) responses.\n\n    Database Management Systems that do not validate certificates by performing\nRFC 5280-compliant certification path validation are in danger of accepting\ncertificates that are invalid and/or counterfeit. This could allow unauthorized\naccess to the database.",
          "__new": "The DoD standard for authentication is DoD-approved PKI certificates.\n\nA certificate’s certification path is the path from the end entity certificate to a trusted root certification authority (CA). Certification path validation is necessary for a relying party to make an informed decision regarding acceptance of an end entity certificate. Certification path validation includes checks such as certificate issuer trust, time validity, and revocation status for each certificate in the certification path. Revocation status information for CA and subject certificates in a certification path is commonly provided via certificate revocation lists (CRLs) or online certificate status protocol (OCSP) responses.\n\nDatabase Management Systems that do not validate certificates by performing RFC 5280-compliant certification path validation are in danger of accepting certificates that are invalid and/or counterfeit. This could allow unauthorized access to the database."
        },
        "descs": {
          "default__deleted": "The DoD standard for authentication is DoD-approved PKI certificates.\n\n    A certificate's certification path is the path from the end entity\ncertificate to a trusted root certification authority (CA). Certification path\nvalidation is necessary for a relying party to make an informed decision\nregarding acceptance of an end entity certificate. Certification path\nvalidation includes checks such as certificate issuer trust, time validity, and\nrevocation status for each certificate in the certification path. Revocation\nstatus information for CA and subject certificates in a certification path is\ncommonly provided via certificate revocation lists (CRLs) or online certificate\nstatus protocol (OCSP) responses.\n\n    Database Management Systems that do not validate certificates by performing\nRFC 5280-compliant certification path validation are in danger of accepting\ncertificates that are invalid and/or counterfeit. This could allow unauthorized\naccess to the database.",
          "rationale__deleted": "",
          "check": {
            "__old": "The database supports PKI-based authentication by using digital\ncertificates over TLS in addition to the native encryption and data integrity\ncapabilities of these protocols.\n\n    Review MySQL Database Server 8.0 configuration to verify DBMS user account\ncertificates are valid by performing RFC 5280-compliant certification path\nvalidation.\n\n    Run the following command to determine the certificate in use along with\nother details:\n    select @@ssl_ca, @@ssl_capath, @@ssl_cert, @@ssl_cipher, @@ssl_crl,\n@@ssl_crlpath, @@ssl_fips_mode, @@ssl_key;\n\n    If ssl_crl is not set to a CRL file, this is a finding.\n\n    If ssl_crlpath is empty then use the default, which is the datadir path. To\nget that path run select @@datadir.\n\n    Next verify the existence of the CRL file.\n\n    If the CRL file does not exist, this is a finding.\n\n    Next, verify that require_secure_transport is ON by running:\n    select @@require_secure_transport;\n\n    If require_secure_transport is not 1 for ON, this is a finding.\n\n    If the certificate is not a DoD approved certificate, or if no certificate\nis listed, this is a finding.\n\n    Confirm Issuer and Subject map to the username. Run the following script:\n    SELECT `user`.`Host`,\n        `user`.`User`,\n        `user`.`ssl_type`,\n        CAST(`user`.`x509_issuer` as CHAR) as Issuer,\n        CAST(`user`.`x509_subject` as CHAR) as Subject\n    FROM `mysql`.`user`;\n\n    If user accounts are not being mapped to authenticated identities, this is\na finding.",
            "__new": "The database supports PKI-based authentication by using digital certificates over TLS in addition to the native encryption and data integrity capabilities of these protocols.\n\nReview MySQL Database Server 8.0 configuration to verify DBMS user account certificates are valid by performing RFC 5280-compliant certification path validation.\n\nRun the following command to determine the certificate in use along with other details:\nselect @@ssl_ca, @@ssl_capath, @@ssl_cert, @@ssl_cipher, @@ssl_crl, @@ssl_crlpath, @@ssl_fips_mode, @@ssl_key;\n\nIf ssl_crl is not set to a CRL file, this is a finding. \n\nIf ssl_crlpath is empty then use the default, which is the datadir path. To get that path run select @@datadir.\n\nNext verify the existence of the CRL file.\n\nIf the CRL file does not exist, this is a finding.  \n\nNext, verify that require_secure_transport is ON by running:\nselect @@require_secure_transport;\n\nIf require_secure_transport is not 1 for ON, this is a finding.\n\nIf the certificate is not a DoD approved certificate, or if no certificate is listed, this is a finding.\n\nConfirm Issuer and Subject map to the username. Run the following script:\nSELECT `user`.`Host`,\n    `user`.`User`,\n    `user`.`ssl_type`,\n    CAST(`user`.`x509_issuer` as CHAR) as Issuer,\n    CAST(`user`.`x509_subject` as CHAR) as Subject\nFROM `mysql`.`user`;\n\nIf user accounts are not being mapped to authenticated identities, this is a finding."
          },
          "fix": {
            "__old": "Configure the DBMS to validate certificates by constructing a certification\npath with status information to an accepted trust anchor.\n\n    Configure the database server to support Transport Layer Security (TLS)\nprotocols.\n    mysql> set persist require_secure_transport=ON;\n\n    Set system variables on the server side specify DoD approved certificate\nand key files the server uses when permitting clients to establish encrypted\nconnections:\n\n    ssl_ca: The path name of the Certificate Authority (CA) certificate file.\n(ssl_capath is similar but specifies the path name of a directory of CA\ncertificate files.)\n\n    ssl_cert: The path name of the server public key certificate file. This\ncertificate can be sent to the client and authenticated against the CA\ncertificate that it has.\n\n    ssl_key: The path name of the server private key file.\n\n    For example, to enable the server for encrypted connections with\ncertificates, start it with these lines in the my.cnf file, changing the file\nnames as necessary:\n\n    [mysqld]\n    ssl_ca=ca.pem\n    ssl_cert=server-cert.pem\n    ssl_key=server-key.pem\n    Alter users to require X509 certificates\n\n    Below is an example to add X509 as a requirement.\n\n    For a new user\n    CREATE USER 'jeffrey'@'localhost' REQUIRE X509;\n    AND SUBJECT '/C=US/ST=Texas/L=Houston/O=SomeCompany/CN=Johan Smith'\n      AND ISSUER '/C=US/ST=Texas/L=Houston/O=SomeCompany/CN=Some CA';\n\n    Or to add to an existing user\n    ALTER USER 'johansmith'@'%'\n    REQUIRE X509\n      AND SUBJECT '/C=US/ST=Texas/L=Houston/O=SomeCompany/CN=Johan Smith'\n      AND ISSUER '/C=US/ST=Texas/L=Houston/O=SomeCompany/CN=Some CA';",
            "__new": "Configure the DBMS to validate certificates by constructing a certification path with status information to an accepted trust anchor.\n\nConfigure the database server to support Transport Layer Security (TLS) protocols.\nmysql> set persist require_secure_transport=ON;\n\nSet system variables on the server side specify DoD approved certificate and key files the server uses when permitting clients to establish encrypted connections:\n\nssl_ca: The path name of the Certificate Authority (CA) certificate file. (ssl_capath is similar but specifies the path name of a directory of CA certificate files.)\n\nssl_cert: The path name of the server public key certificate file. This certificate can be sent to the client and authenticated against the CA certificate that it has.\n\nssl_key: The path name of the server private key file.\n\nFor example, to enable the server for encrypted connections with certificates, start it with these lines in the my.cnf file, changing the file names as necessary:\n\n[mysqld]\nssl_ca=ca.pem\nssl_cert=server-cert.pem\nssl_key=server-key.pem\nAlter users to require X509 certificates\n\nBelow is an example to add X509 as a requirement.\n\nFor a new user\nCREATE USER 'jeffrey'@'localhost' REQUIRE X509;\nAND SUBJECT '/C=US/ST=Texas/L=Houston/O=SomeCompany/CN=Johan Smith'\n  AND ISSUER '/C=US/ST=Texas/L=Houston/O=SomeCompany/CN=Some CA';\n\nOr to add to an existing user\nALTER USER 'johansmith'@'%'\nREQUIRE X509\n  AND SUBJECT '/C=US/ST=Texas/L=Houston/O=SomeCompany/CN=Johan Smith'\n  AND ISSUER '/C=US/ST=Texas/L=Houston/O=SomeCompany/CN=Some CA';"
          }
        }
      },
      "SV-235135": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  query_ssl_params = %(\n  SELECT @@ssl_ca,\n         @@ssl_capath,\n         @@ssl_cert,\n         @@ssl_crl,\n         @@ssl_crlpath,\n         @@ssl_fips_mode,\n         @@ssl_key,\n         @@datadir;\n  )\n\n  ssl_params = sql_session.query(query_ssl_params).results\n\n  if !input('aws_rds')\n\n    ssl_fips_mode = ssl_params.column('@@ssl_fips_mode').join\n    describe '@@ssl_fips_mode' do\n      it \"shoud be ON or STRICT. Got #{ssl_fips_mode}\" do\n        expect(ssl_fips_mode).to be_in(['ON', 'STRICT'])\n      end\n    end\n\n    if ssl_params.column('@@ssl_crlpath').join.eql?('NULL')\n      crl_path = ssl_params.column('@@datadir').join\n    else\n      crl_path = ssl_params.column('@@ssl_crlpath').join\n    end\n\n    full_crl_path = \"#{crl_path}#{ssl_params.column('@@ssl_crl').join}\"\n    describe \"SSL CRL file: #{full_crl_path}\" do\n      subject { file(full_crl_path) }\n      it { should exist }\n      its('owner') { should cmp 'mysql' }\n      its('group') { should cmp 'mysql' }\n      it { should_not be_more_permissive_than('0600') }\n    end\n\n    if ssl_params.column('@@ssl_capath').join.eql?('NULL')\n      ca_path = ssl_params.column('@@datadir').join\n    else\n      ca_path = ssl_params.column('@@ssl_capath').join\n    end\n\n    full_ca_path = \"#{ca_path}#{ssl_params.column('@@ssl_ca').join}\"\n    describe \"SSL CA file: #{full_ca_path}\" do\n      subject { file(full_ca_path) }\n      it { should exist }\n      its('owner') { should cmp 'mysql' }\n      its('group') { should cmp 'mysql' }\n      it { should_not be_more_permissive_than('0644') }\n    end\n\n    full_cert_path = \"#{ssl_params.column('@@datadir').join}#{ssl_params.column('@@ssl_cert').join}\"\n    describe \"SSL Certificate file: #{full_cert_path}\" do\n      subject { file(full_cert_path) }\n      it { should exist }\n      its('owner') { should cmp 'mysql' }\n      its('group') { should cmp 'mysql' }\n      it { should_not be_more_permissive_than('0644') }\n    end\n\n    full_key_path = \"#{ssl_params.column('@@datadir').join}#{ssl_params.column('@@ssl_key').join}\"\n    describe \"SSL Private Key file: #{full_key_path}\" do\n      subject { file(full_key_path) }\n      its('owner') { should cmp 'mysql' }\n      its('group') { should cmp 'mysql' }\n      it { should_not be_more_permissive_than('0600') }\n    end\n  else\n    impact 0.0\n    describe 'Not applicable since ssl_fips_mode is set to 0 (OFF) and cannot be configured in AWS RDS' do\n      skip 'Not applicable since ssl_fips_mode is set to 0 (OFF) and cannot be configured in AWS RDS'\n    end\n  end",
        "tags": {
          "check_id__added": "C-38354r863347_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235135r638812_rule",
            "__new": "SV-235135r961041_rule"
          },
          "nist": [
            [
              "-",
              "IA-5 (2) (b)"
            ],
            [
              "+",
              "IA-5 (2) (a) (1)"
            ]
          ]
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must enforce authorized access to all\nPKI private keys stored/utilized by the MySQL Database Server 8.0.",
          "__new": "The MySQL Database Server 8.0 must enforce authorized access to all PKI private keys stored/utilized by the MySQL Database Server 8.0."
        },
        "desc": {
          "__old": "The DoD standard for authentication is DoD-approved PKI certificates.\nPKI certificate-based authentication is performed by requiring the certificate\nholder to cryptographically prove possession of the corresponding private key.\n\n    If the private key is stolen, an attacker can use it to impersonate the\ncertificate holder. In cases where the Database Management System (DBMS)-stored\nprivate keys are used to authenticate the DBMS to the system's clients, loss of\nthe corresponding private keys would allow an attacker to successfully perform\nundetected man-in-the-middle attacks against the DBMS system and its clients.\n\n    Both the holder of a digital certificate, and the issuing authority, must\ntake careful measures to protect the corresponding private key. Private keys\nmust always be generated and protected in FIPS 140-2 validated cryptographic\nmodules.\n\n    All access to the private key(s) of the DBMS must be restricted to\nauthorized and authenticated users. If unauthorized users have access to one or\nmore of the DBMS's private keys, an attacker could gain access to the key(s)\nand use them to impersonate the database on the network or otherwise perform\nunauthorized actions.",
          "__new": "The DoD standard for authentication is DoD-approved PKI certificates. PKI certificate-based authentication is performed by requiring the certificate holder to cryptographically prove possession of the corresponding private key.\n\nIf the private key is stolen, an attacker can use it to impersonate the certificate holder. In cases where the Database Management System (DBMS)-stored private keys are used to authenticate the DBMS to the system’s clients, loss of the corresponding private keys would allow an attacker to successfully perform undetected man-in-the-middle attacks against the DBMS system and its clients.\n\nBoth the holder of a digital certificate, and the issuing authority, must take careful measures to protect the corresponding private key. Private keys must always be generated and protected in FIPS 140-2 or 140-3 validated cryptographic modules.  \n\nAll access to the private key(s) of the DBMS must be restricted to authorized and authenticated users. If unauthorized users have access to one or more of the DBMS's private keys, an attacker could gain access to the key(s) and use them to impersonate the database on the network or otherwise perform unauthorized actions."
        },
        "descs": {
          "default__deleted": "The DoD standard for authentication is DoD-approved PKI certificates.\nPKI certificate-based authentication is performed by requiring the certificate\nholder to cryptographically prove possession of the corresponding private key.\n\n    If the private key is stolen, an attacker can use it to impersonate the\ncertificate holder. In cases where the Database Management System (DBMS)-stored\nprivate keys are used to authenticate the DBMS to the system's clients, loss of\nthe corresponding private keys would allow an attacker to successfully perform\nundetected man-in-the-middle attacks against the DBMS system and its clients.\n\n    Both the holder of a digital certificate, and the issuing authority, must\ntake careful measures to protect the corresponding private key. Private keys\nmust always be generated and protected in FIPS 140-2 validated cryptographic\nmodules.\n\n    All access to the private key(s) of the DBMS must be restricted to\nauthorized and authenticated users. If unauthorized users have access to one or\nmore of the DBMS's private keys, an attacker could gain access to the key(s)\nand use them to impersonate the database on the network or otherwise perform\nunauthorized actions.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review DBMS configuration to determine whether appropriate access controls\nexist to protect the DBMS’s private key.\n\n    If strong access controls do not exist to enforce authorized access to the\nprivate key, this is a finding.\n\n    MySQL stores certificates in PEM formatted files.\n\n    Verify User ownership, Group ownership, and permissions on the ssl_files.\n\n    select @@ssl_ca, @@ssl_capath, @@ssl_cert, @@ssl_cipher, @@ssl_crl,\n@@ssl_crlpath, @@ssl_fips_mode, @@ssl_key;\n    If ssl_path or ssl_crlpath are not defined the locations default to the\ndatadir.\n    To determine the datadir\n    select @@datadir;\n\n    Example if path is  <directory where audit log files are located>/\n\n    sudo sh -c 'ls -l  <directory where data files are located>/*.pem'\n    For example if the value returned by \"select @@datadir;' is\n/usr/local/mysql/data/\n    sudo sh -c 'ls -l   /usr/local/mysql/data/*.pem'\n\n    Password:\n    -rw-------  1 _mysql  _mysql  1676 Feb 25 11:09  <directory where audit log\nfiles are located>/ca-key.pem\n    -rw-r--r--  1 _mysql  _mysql  1112 Feb 25 11:09  <directory where audit log\nfiles are located>/ca.pem\n    -rw-r--r--  1 _mysql  _mysql  1112 Feb 25 11:09  <directory where audit log\nfiles are located>/client-cert.pem\n    -rw-------  1 _mysql  _mysql  1680 Feb 25 11:09  <directory where audit log\nfiles are located>/client-key.pem\n    -rw-------  1 _mysql  _mysql  1676 Feb 25 11:09  <directory where audit log\nfiles are located>/private_key.pem\n    -rw-r--r--  1 _mysql  _mysql   452 Feb 25 11:09  <directory where audit log\nfiles are located>/public_key.pem\n    -rw-r--r--  1 _mysql  _mysql  1112 Feb 25 11:09  <directory where audit log\nfiles are located>/server-cert.pem\n    -rw-------  1 _mysql  _mysql  1680 Feb 25 11:09  <directory where audit log\nfiles are located>/server-key.pem\n\n    If the User owner is not \"mysql\", this is a finding.\n\n    If the Group owner is not \"mysql\", this is a finding.\n\n    For public certs and keys, permissions should be \"rw\" for mysql and\n\"readonly\" for mysql group and world. These files by default are named\n\"ca.pem\", \"client-cert.pem\", \"public_key.pem\", and \"server-cert.pem\".\nIf not, this is a finding.\n\n    For private certs and keys, permissions should be \"rw\" for mysql and \"no\nrights\" for mysql group or world. These files by default are named\n\"ca-key.pem\", \"client-key.pem\", \"private_key.pem\", and\n\"server-key.pem\". If not, this is a finding.\n\n    Review system configuration to determine whether FIPS 140-2 support has\nbeen enabled.\n\n    select @@ssl_fips_mode;\n\n    - OFF: Disable FIPS mode.\n    - ON: Enable FIPS mode.\n    - STRICT: Enable “strict” FIPS mode.\n\n    If FIPS mode is not \"ON\" or \"STRICT\", this is a finding.\n\n    If the server-key.pem has a password, verify when starting mysqld in a\nconsole there is prompt requiring the passphrase for the server-key.",
            "__new": "Review DBMS configuration to determine whether appropriate access controls exist to protect the DBMS’s private key. \n\nIf strong access controls do not exist to enforce authorized access to the private key, this is a finding.\n\nMySQL stores certificates in PEM formatted files.\n\nVerify User ownership, Group ownership, and permissions on the ssl_files.\n\nselect @@ssl_ca, @@ssl_capath, @@ssl_cert, @@ssl_cipher, @@ssl_crl, @@ssl_crlpath, @@ssl_fips_mode, @@ssl_key;\nIf ssl_path or ssl_crlpath are not defined the locations default to the datadir.  \nTo determine the datadir \nselect @@datadir;\n\nExample if path is  <directory where audit log files are located>/\n\nsudo sh -c 'ls -l  <directory where data files are located>/*.pem'\nFor example if the value returned by \"select @@datadir;' is  /usr/local/mysql/data/\nsudo sh -c 'ls -l   /usr/local/mysql/data/*.pem'\n\nPassword:\n-rw-------  1 _mysql  _mysql  1676 Feb 25 11:09  <directory where audit log files are located>/ca-key.pem\n-rw-r--r--  1 _mysql  _mysql  1112 Feb 25 11:09  <directory where audit log files are located>/ca.pem\n-rw-r--r--  1 _mysql  _mysql  1112 Feb 25 11:09  <directory where audit log files are located>/client-cert.pem\n-rw-------  1 _mysql  _mysql  1680 Feb 25 11:09  <directory where audit log files are located>/client-key.pem\n-rw-------  1 _mysql  _mysql  1676 Feb 25 11:09  <directory where audit log files are located>/private_key.pem\n-rw-r--r--  1 _mysql  _mysql   452 Feb 25 11:09  <directory where audit log files are located>/public_key.pem\n-rw-r--r--  1 _mysql  _mysql  1112 Feb 25 11:09  <directory where audit log files are located>/server-cert.pem\n-rw-------  1 _mysql  _mysql  1680 Feb 25 11:09  <directory where audit log files are located>/server-key.pem\n\nIf the User owner is not \"mysql\", this is a finding. \n\nIf the Group owner is not \"mysql\", this is a finding.\n\nFor public certs and keys, permissions should be \"rw\" for mysql and \"readonly\" for mysql group and world. These files by default are named \"ca.pem\", \"client-cert.pem\", \"public_key.pem\", and \"server-cert.pem\". If not, this is a finding.\n\nFor private certs and keys, permissions should be \"rw\" for mysql and \"no rights\" for mysql group or world. These files by default are named \"ca-key.pem\", \"client-key.pem\", \"private_key.pem\", and \"server-key.pem\". If not, this is a finding.\n\nReview system configuration to determine whether FIPS mode has been enabled. \n\nselect @@ssl_fips_mode;\n\n- OFF: Disable FIPS mode.\n- ON: Enable FIPS mode.\n- STRICT: Enable “strict” FIPS mode.\n\nIf FIPS mode is not \"ON\" or \"STRICT\", this is a finding.\n\nIf the server-key.pem has a password, verify when starting mysqld in a console there is prompt requiring the passphrase for the server-key."
          },
          "fix": {
            "__old": "Implement strong access and authentication controls to protect the\ndatabase’s private key.\n\n    Configure the database to support Transport Layer Security (TLS) protocols\nand the put in place file systems permissions on authentication and signing\ncredentials, including private keys.\n\n    Put keys in place in the datadir, or define their locations using\nssl_capath and ssl_crlpath.\n\n    Ensure proper permissions are set to protect the private keys and\ncertificates.\n\n    Change directory ssl_capath, ssl_crlpath, or the default datadir path.\n\n    To determine the file paths:\n    select @@ssl_capath, @@ssl_crlpath, @@ssl_key, @@datadir;\n\n    Ensure OS account mysql owns all the pem and key files.\n    $ chown mysql *.pem\n    $ chgrp mysql *.key\n    $ chmod 600 *.key\"\n    $ chmod 600 *.pem\n\n    Optionally, allow access to public keys.\n    $ chmod 644 client-cert.pem client-key.pem\n    $chmod 644 public_key.pem server-cert.pem\n\n    If the server-key.pem has a password, provide this password when prompted\nduring a console startup. The server will not start without this password if\nthe server key is password protected.\n\n    Edit the mysql configuration file.\n\n    [mysqld]\n    ssl-fips-mode=ON\n\n    If the OpenSSL FIPS Object Module is not available, ssl_fips_mode to ON or\nSTRICT at startup causes the server to produce an error message and exit.",
            "__new": "Implement strong access and authentication controls to protect the database’s private key.\n\nConfigure the database to support Transport Layer Security (TLS) protocols and the put in place file systems permissions on authentication and signing credentials, including private keys.\n\nPut keys in place in the datadir, or define their locations using ssl_capath and ssl_crlpath.\n\nEnsure proper permissions are set to protect the private keys and certificates.\n\nChange directory ssl_capath, ssl_crlpath, or the default datadir path.\n\nTo determine the file paths:\nselect @@ssl_capath, @@ssl_crlpath, @@ssl_key, @@datadir;\n\nEnsure OS account mysql owns all the pem and key files.\n$ chown mysql *.pem\n$ chgrp mysql *.key\n$ chmod 600 *.key\"\n$ chmod 600 *.pem\n\nOptionally, allow access to public keys.\n$ chmod 644 client-cert.pem client-key.pem\n$chmod 644 public_key.pem server-cert.pem\n\nIf the server-key.pem has a password, provide this password when prompted during a console startup. The server will not start without this password if the server key is password protected.\n\nEdit the mysql configuration file.\n\n[mysqld]\nssl-fips-mode=ON\n\nIf the OpenSSL FIPS Object Module is not available, ssl_fips_mode to ON or STRICT at startup causes the server to produce an error message and exit."
          }
        }
      },
      "SV-235136": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n   pki_exception_users = input('pki_exception_users')\n  else\n   pki_exception_users = input('pki_exception_users') + ['rdsadmin']\n  end\n\n  query_user_params = \"\n      SELECT user.Host,\n        user.User,\n        user.ssl_type,\n        CAST(user.x509_issuer as CHAR) as Issuer,\n        CAST(user.x509_subject as CHAR) as Subject\n    FROM mysql.user\n    WHERE  user NOT LIKE 'mysql.%'\n           AND user NOT LIKE 'root'\n          AND user NOT IN ( '#{pki_exception_users.join(\"', '\")}' );\"\n\n  user_params = sql_session.query(query_user_params)\n\n  describe \"List of users Issuer fields\\n#{user_params.output}\" do\n    subject { user_params.results.column('issuer') }\n    it { should_not include nil }\n  end\n\n  describe \"List of users Subject fields\\n#{user_params.output}\" do\n    subject { user_params.results.column('subject') }\n    it { should_not include nil }\n  end",
        "tags": {
          "check_id__added": "C-38355r623528_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235136r638812_rule",
            "__new": "SV-235136r961044_rule"
          },
          "nist": [
            [
              "-",
              "IA-5 (2) (c)"
            ],
            [
              "+",
              "IA-5 (2) (a) (2)"
            ]
          ]
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must map the PKI-authenticated identity\nto an associated user account.",
          "__new": "The MySQL Database Server 8.0 must map the PKI-authenticated identity to an associated user account."
        },
        "desc": {
          "__old": "The DoD standard for authentication is DoD-approved PKI certificates.\nOnce a PKI certificate has been validated, it must be mapped to a Database\nManagement System (DBMS) user account for the authenticated identity to be\nmeaningful to the DBMS and useful for authorization decisions.",
          "__new": "The DoD standard for authentication is DoD-approved PKI certificates. Once a PKI certificate has been validated, it must be mapped to a Database Management System (DBMS) user account for the authenticated identity to be meaningful to the DBMS and useful for authorization decisions."
        },
        "descs": {
          "default__deleted": "The DoD standard for authentication is DoD-approved PKI certificates.\nOnce a PKI certificate has been validated, it must be mapped to a Database\nManagement System (DBMS) user account for the authenticated identity to be\nmeaningful to the DBMS and useful for authorization decisions.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review MySQL Database Server 8.0 configuration to verify DBMS user accounts\nare being mapped directly to unique identifying information within the\nvalidated PKI certificate.\n\n    Confirm Issuer and Subject map to the username. Run the following script:\n    SELECT `user`.`Host`,\n        `user`.`User`,\n        `user`.`ssl_type`,\n        CAST(`user`.`x509_issuer` as CHAR) as Issuer,\n        CAST(`user`.`x509_subject` as CHAR) as Subject\n    FROM `mysql`.`user`;\n\n    If user accounts are not being mapped to authenticated identities, this is\na finding.",
            "__new": "Review MySQL Database Server 8.0 configuration to verify DBMS user accounts are being mapped directly to unique identifying information within the validated PKI certificate.\n\nConfirm Issuer and Subject map to the username. Run the following script:\nSELECT `user`.`Host`,\n    `user`.`User`,\n    `user`.`ssl_type`,\n    CAST(`user`.`x509_issuer` as CHAR) as Issuer,\n    CAST(`user`.`x509_subject` as CHAR) as Subject\nFROM `mysql`.`user`;\n\nIf user accounts are not being mapped to authenticated identities, this is a finding."
          },
          "fix": {
            "__old": "Configure the MySQL Database Server 8.0 to map the authenticated identity\ndirectly to the MySQL Database Server 8.0 user account.\n\n    Alter users to require X509 certificates.\n\n    Below is an example to add X509 as a requirement.\n\n    For a new user:\n    CREATE USER 'jeffrey'@'localhost' REQUIRE X509;\n    AND SUBJECT '/C=US/ST=Texas/L=Houston/O=SomeCompany/CN=Johan Smith'\n      AND ISSUER '/C=US/ST=Texas/L=Houston/O=SomeCompany/CN=Some CA';\n\n    Or to add to an existing user:\n    ALTER USER 'johansmith'@'%'\n    REQUIRE X509\n      AND SUBJECT '/C=US/ST=Texas/L=Houston/O=SomeCompany/CN=Johan Smith'\n      AND ISSUER '/C=US/ST=Texas/L=Houston/O=SomeCompany/CN=Some CA';",
            "__new": "Configure the MySQL Database Server 8.0 to map the authenticated identity directly to the MySQL Database Server 8.0 user account.\n\nAlter users to require X509 certificates.\n\nBelow is an example to add X509 as a requirement.\n\nFor a new user:\nCREATE USER 'jeffrey'@'localhost' REQUIRE X509;\nAND SUBJECT '/C=US/ST=Texas/L=Houston/O=SomeCompany/CN=Johan Smith'\n  AND ISSUER '/C=US/ST=Texas/L=Houston/O=SomeCompany/CN=Some CA';\n\nOr to add to an existing user:\nALTER USER 'johansmith'@'%'\nREQUIRE X509\n  AND SUBJECT '/C=US/ST=Texas/L=Houston/O=SomeCompany/CN=Johan Smith'\n  AND ISSUER '/C=US/ST=Texas/L=Houston/O=SomeCompany/CN=Some CA';"
          }
        }
      },
      "SV-235137": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  query_password_params = %(\n  SELECT variable_name,\n         variable_value\n  FROM   performance_schema.global_variables\n  WHERE  variable_name LIKE 'valid%password%'\n          OR variable_name LIKE 'password_%'\n          OR variable_name LIKE 'default_password_lifetime'; \n  )\n\n  password_params = sql_session.query(query_password_params).results.rows.map{|x| {x['variable_name']=> x['variable_value']}}.reduce({}, :merge)\n\n\tif !input('aws_rds')\n  \n\t\tquery_component = %(\n\t\tSELECT component_urn\n\t\tFROM   mysql.component\n\t\tGROUP  BY component_urn; \n\t\t)\n\n\t\tdescribe \"List of installed components\" do\n\t\t\tsubject { sql_session.query(query_component).results.column('component_urn') }\n\t\t\tit { should include 'file://component_validate_password' }\n\t\tend\n\n\t\tdescribe \"Password requirement:\" do\n\t\t\tsubject { password_params }\n\t\t\tits(['validate_password.check_user_name']) { should cmp 'ON' }\n\t\t\tits(['validate_password.length']) { should cmp >= input('min_password_length') }\n\t\t\tits(['validate_password.mixed_case_count']) { should cmp >= input('password_mixed_case_count') }\n\t\t\tits(['validate_password.special_char_count']) { should cmp >= input('password_special_character_count') }\n\t\t\tits(['validate_password.number_count']) { should cmp >= input('password_number_count') }\n\t\t\tits(['validate_password.policy']) { should cmp 'STRONG' }\n\t\t\tits(['password_history']) { should cmp >= input('password_history') }\n\t\t\tits(['password_reuse_interval']) { should cmp >= 365 }\n\t\t\tits(['default_password_lifetime']) { should cmp >= input('max_password_lifetime') }\n\t\tend\n\n\telse\n\n\t\tquery_component = %(\n    SELECT plugin_name, plugin_status, plugin_type, plugin_library\n\t\tFROM information_schema.plugins\n\t\tWHERE plugin_name='validate_password';\n    )\n\n    describe \"Validate_password Plugin Status\" do\n      subject { sql_session.query(query_component).results.column('plugin_status') }\n      it { should cmp 'ACTIVE' }\n    end\n\n\t\tdescribe \"Password requirement:\" do\n      subject { password_params }\n      its(['validate_password_length']) { should cmp >= input('min_password_length') }\n      its(['validate_password_mixed_case_count']) { should cmp >= input('password_mixed_case_count') }\n      its(['validate_password_special_char_count']) { should cmp >= input('password_special_character_count') }\n      its(['validate_password_number_count']) { should cmp >= input('password_number_count') }\n      its(['validate_password_policy']) { should cmp 'STRONG' }\n      its(['password_history']) { should cmp >= input('password_history') }\n      its(['password_reuse_interval']) { should cmp >= 365 }\n      its(['default_password_lifetime']) { should cmp >= input('max_password_lifetime') }\n    end\n\tend",
        "tags": {
          "check_id__added": "C-38356r998286_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235137r638812_rule",
            "__new": "SV-235137r998288_rule"
          },
          "fix_id": {
            "__old": "F-38319r623532_fix",
            "__new": "F-38319r998287_fix"
          },
          "cci": [
            [
              "-",
              "CCI-000192"
            ],
            [
              "+",
              "CCI-004066"
            ]
          ],
          "nist": [
            [
              "-",
              "IA-5 (1) (a)"
            ],
            [
              "+",
              "IA-5 (1) (h)"
            ]
          ]
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "If Database Management System (DBMS) authentication using passwords is\nemployed, the DBMS must enforce the DoD standards for password complexity and\nlifetime.",
          "__new": "If Database Management System (DBMS) authentication using passwords is employed, the DBMS must enforce the DOD standards for password complexity and lifetime."
        },
        "desc": {
          "__old": "OS/enterprise authentication and identification must be used\n(SRG-APP-000023-DB-000001). Native DBMS authentication may be used only when\ncircumstances make it unavoidable; and must be documented and Authorizing\nOfficial (AO)-approved.\n\n    The DoD standard for authentication is DoD-approved PKI certificates.\nAuthentication based on User ID and Password may be used only when it is not\npossible to employ a PKI certificate, and requires AO approval.\n\n    In such cases, the DoD standards for password complexity and lifetime must\nbe implemented. DBMS products that can inherit the rules for these from the\noperating system or access control program (e.g., Microsoft Active Directory)\nmust be configured to do so.  For other DBMSs, the rules must be enforced using\navailable configuration parameters or custom code.",
          "__new": "OS/enterprise authentication and identification must be used (SRG-APP-000023-DB-000001). Native DBMS authentication may be used only when circumstances make it unavoidable; and must be documented and Authorizing Official (AO)-approved.\n\nThe DOD standard for authentication is DOD-approved PKI certificates. Authentication based on User ID and Password may be used only when it is not possible to employ a PKI certificate, and requires AO approval.\n\nIn such cases, the DOD standards for password complexity and lifetime must be implemented. DBMS products that can inherit the rules for these from the operating system or access control program (e.g., Microsoft Active Directory) must be configured to do so. For other DBMSs, the rules must be enforced using available configuration parameters or custom code."
        },
        "descs": {
          "default__deleted": "OS/enterprise authentication and identification must be used\n(SRG-APP-000023-DB-000001). Native DBMS authentication may be used only when\ncircumstances make it unavoidable; and must be documented and Authorizing\nOfficial (AO)-approved.\n\n    The DoD standard for authentication is DoD-approved PKI certificates.\nAuthentication based on User ID and Password may be used only when it is not\npossible to employ a PKI certificate, and requires AO approval.\n\n    In such cases, the DoD standards for password complexity and lifetime must\nbe implemented. DBMS products that can inherit the rules for these from the\noperating system or access control program (e.g., Microsoft Active Directory)\nmust be configured to do so.  For other DBMSs, the rules must be enforced using\navailable configuration parameters or custom code.",
          "rationale__deleted": "",
          "check": {
            "__old": "If DBMS authentication using passwords is not employed, this is not a\nfinding.\n\n    If the DBMS is configured to inherit password complexity and lifetime rules\nfrom the operating system or access control program, this is not a finding.\n\n    Review the MySQL Database Server 8.0 settings relating to password\ncomplexity. Determine whether the following rules are enforced. If any are not,\nthis is a finding.\n    a. minimum of 15 characters, including at least one of each of the\nfollowing character sets:\n    - Uppercase\n    - Lowercase\n    - Numeric\n    - Special characters (e.g., ~ ! @ # $ % ^ & * ( ) _ + = - ' [ ] / ? > <)\n    b. Minimum number of characters changed from previous password: 50 percent\nof the minimum password length; that is, eight\n\n    Review the DBMS settings relating to password lifetime. Determine whether\nthe following rules are enforced. If any are not, this is a finding.\n    a. Password lifetime limits for interactive accounts: Minimum 24 hours,\nmaximum 60 days\n    b. Password lifetime limits for non-interactive accounts: Minimum 24 hours,\nmaximum 365 days\n    c. Number of password changes before an old one may be reused: Minimum of\nfive\n\n    Connect as an admin.\n\n    SELECT component_urn FROM mysql.component\n    where component_urn='file://component_validate_password' group by\ncomponent_urn;\n\n    If the \"validate password\" component is installed the result will be\nfile://component_validate_password.\n\n    If \"validate password\" component is not installed, this is a finding.\n\n    If the \"component_validate_password\" is installed, review the password\npolicies to ensure required password complexity is met.\n\n*** On AWS RDS:\n    SELECT plugin_name, plugin_status, plugin_type, plugin_library FROM \n    information_schema.plugins WHERE plugin_name='validate_password';\n    If the \"validate_password\" password plugin is installed its status will be \"ACTIVE\".\n    If the \"validate_password\" password plugin is not installed, this is a finding.\n    If the \"validate_password\" password plugin is installed, review the password\n    policies to ensure required password complexity is met.\n***\n\n    Run the following to review the password policy:\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables where VARIABLE_NAME like\n'valid%password%' or VARIABLE_NAME like 'password_%'  ;\n\n    For example the results may look like the following:\n    'validate_password.check_user_name',’ON’    # On AWS RDS the variable name is: 'validate_password_check_user_name', but it is OFF and cannot be configured\n    'validate_password.dictionary_file',''      # On AWS RDS the variable name is: 'validate_password_dictionary_file', but has no dictionary and cannot be configured\n    'validate_password.length','8'              # On AWS RDS the variable name is: 'validate_password_length'\n    'validate_password.mixed_case_count','1'    # On AWS RDS the variable name is: 'validate_password_mixed_case_count'\n    'validate_password.number_count','1'        # On AWS RDS the variable name is: 'validate_password_number_count'\n    'validate_password.policy','MEDIUM'         # On AWS RDS the variable name is: 'validate_password_policy'\n    'validate_password.special_char_count','1'  # On AWS RDS the variable name is: 'validate_password_special_char_count'\n    'password_reuse_interval','0'\n    'password_require_current','OFF'\n    'password_history','0'\n\n    If these results do not meet password complexity requirements listed above,\nthis is a finding.",
            "__new": "If DBMS authentication using passwords is not employed, this is not a finding.\n\nIf the DBMS is configured to inherit password complexity and lifetime rules from the operating system or access control program, this is not a finding.\n\nReview the MySQL Database Server 8.0 settings relating to password complexity. Determine whether the following rules are enforced. If any are not, this is a finding.\na. Minimum of 15 characters, including at least one of each of the following character sets:\n- Uppercase\n- Lowercase\n- Numeric\n- Special characters (e.g., ~ ! @ # $ % ^ & * ( ) _ + = - ' [ ] / ? > <)\nb. Minimum number of characters changed from previous password: 50 percent of the minimum password length; that is, eight.\n\nReview the DBMS settings relating to password lifetime. Determine whether the following rules are enforced. If any are not, this is a finding.\na. Password lifetime limits for interactive accounts: Minimum 24 hours, maximum 60 days.\nb. Password lifetime limits for non-interactive accounts: Minimum 24 hours, maximum 365 days.\nc. Number of password changes before an old one may be reused: Minimum of five.\n\nConnect as an admin. \n\nSELECT component_urn FROM mysql.component\nwhere component_urn='file://component_validate_password' group by component_urn;\n\nIf the \"validate password\" component is installed the result will be file://component_validate_password.\n\nIf \"validate password\" component is not installed, this is a finding.\n\nIf the \"component_validate_password\" is installed, review the password policies to ensure required password complexity is met. \n\nRun the following to review the password policy:\n\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables where VARIABLE_NAME like 'valid%password%' or VARIABLE_NAME like 'password_%'  ;\n\nFor example the results may look like the following:\n\n'validate_password.check_user_name',’ON’\n'validate_password.dictionary_file',''\n'validate_password.length','8'\n'validate_password.mixed_case_count','1'\n'validate_password.number_count','1'\n'validate_password.policy','MEDIUM'\n'validate_password.special_char_count','1'\n'password_reuse_interval','0'\n'password_require_current','OFF'\n'password_history','0'\n\nIf these results do not meet password complexity requirements listed above, this is a finding."
          },
          "fix": {
            "__old": "If the use of passwords is not needed, configure the MySQL Database Server\n8.0 to prevent their use if it is capable of this; if it is not so capable,\ninstitute policies and procedures to prohibit their use.\n\n    If the MySQL Database Server 8.0 can inherit password complexity rules from\nthe operating system or access control program, configure it to do so.\n\n    Otherwise, use MySQL Database Server 8.0 configuration parameters and/or\ncustom code to enforce the following rules for passwords:\n\n    a. minimum of 15 characters, including at least one of each of the\nfollowing character sets:\n    - Uppercase\n    - Lowercase\n    - Numeric\n    - Special characters (e.g., ~ ! @ # $ % ^ & * ( ) _ + = - ' [ ] / ? > <)\n    b. Minimum number of characters changed from previous password: 50 percent\nof the minimum password length; that is, eight\n    c. Password lifetime limits for interactive accounts: Minimum 24 hours,\nmaximum 60 days\n    d. Password lifetime limits for non-interactive accounts: Minimum 24 hours,\nmaximum 365 days\n    e. Number of password changes before an old one may be reused: Minimum of\nfive\n\n    As the database admin:\n\n    INSTALL COMPONENT 'file://component_validate_password';\n\n    # Set Password Policies - For Example\n    set persist validate_password.check_user_name='ON';\n    set persist validate_password.dictionary_file='<FILENAME OF DICTIONARY FILE>';\n    set persist validate_password.length=15;            # On AWS RDS the variable name is: 'validate_password_length'\n    set persist validate_password.mixed_case_count=1;   # On AWS RDS the variable name is: 'validate_password_mixed_case_count'\n    set persist validate_password.special_char_count=2; # On AWS RDS the variable name is: 'validate_password_special_char_count'\n    set persist validate_password.number_count=2;       # On AWS RDS the variable name is: 'validate_password_number_count'\n    set persist validate_password.policy='STRONG';      # On AWS RDS the variable name is: 'validate_password_policy'\n    set persist password_history = 5;\n    set persist password_reuse_interval = 365;\n    SET GLOBAL default_password_lifetime = 180;\n\n    Optional\n    set persist password_require_current=YES\n\n    This can also be set at the account level:\n    ALTER USER 'jeffrey'@'localhost'\n      PASSWORD HISTORY 5\n      PASSWORD REUSE INTERVAL 365 DAY;\n    ALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE INTERVAL 90 DAY;",
            "__new": "If the use of passwords is not needed, configure the MySQL Database Server 8.0 to prevent their use if it is capable of this; if it is not, institute policies and procedures to prohibit their use.\n\nIf the MySQL Database Server 8.0 can inherit password complexity rules from the operating system or access control program, configure it to do so.\n\nOtherwise, use MySQL Database Server 8.0 configuration parameters and/or custom code to enforce the following rules for passwords:\n\na. Minimum of 15 characters, including at least one of each of the following character sets:\n- Uppercase\n- Lowercase\n- Numeric\n- Special characters (e.g., ~ ! @ # $ % ^ & * ( ) _ + = - ' [ ] / ? > <)\nb. Minimum number of characters changed from previous password: 50 percent of the minimum password length; that is, eight.\nc. Password lifetime limits for interactive accounts: Minimum 24 hours, maximum 60 days.\nd. Password lifetime limits for non-interactive accounts: Minimum 24 hours, maximum 365 days.\ne. Number of password changes before an old one may be reused: Minimum of five.\n\nAs the database admin:\n\nINSTALL COMPONENT 'file://component_validate_password';\n\n# Set Password Policies example:\nset persist validate_password.check_user_name='ON';\nset persist validate_password.dictionary_file='<FILENAME OF DICTIONARY FILE';\nset persist validate_password.length=15;\nset persist validate_password.mixed_case_count=1;\nset persist validate_password.special_char_count=2;\nset persist validate_password.number_count=2;\nset persist validate_password.policy='STRONG';\nset persist password_history = 5;\nset persist password_reuse_interval = 365;\nSET GLOBAL default_password_lifetime = 180;\n\nOptional\nset persist password_require_current=YES\n\nThis can also be set at the account level:\nALTER USER 'jeffrey'@'localhost'\n  PASSWORD HISTORY 5\n  PASSWORD REUSE INTERVAL 365 DAY;\nALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE INTERVAL 90 DAY;"
          }
        }
      },
      "SV-235138": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  query_authentication_methods = %(\n  SELECT\n     PLUGIN_NAME,\n     PLUGIN_STATUS\n  FROM\n     INFORMATION_SCHEMA.PLUGINS\n  WHERE\n     PLUGIN_NAME LIKE '%ldap%'\n     OR PLUGIN_NAME LIKE '%ldap%'\n     OR PLUGIN_NAME LIKE '%pam%'\n     OR PLUGIN_NAME like '%password';\n  )\n\n  authentication_methods = sql_session.query(query_authentication_methods).results\n\n  describe 'Authentication methods' do\n    subject { sql_session.query(query_authentication_methods).results.column('plugin_name') }\n    it { should include 'mysql_native_password' }\n    it { should include 'sha256_password' }\n    it { should include 'caching_sha2_password' }\n  end\n\n  describe 'Plugin Status' do\n    subject { sql_session.query(query_authentication_methods).results.column('plugin_status').uniq }\n    it { should cmp 'ACTIVE' }\n  end\n\n  query_password_users = %(\n  SELECT\n     user,\n     host,\n     user.plugin\n  FROM\n     mysql.user\n  where\n     (\n        user.plugin like '%password'\n     )\n     AND NOT (user like 'mysql.%'\n     or user = 'root');\n  )\n\n  if !input('aws_rds')\n    authorized_password_users = input('authorized_password_users')\n  else\n    authorized_password_users = input('authorized_password_users') + ['rdsadmin']\n  end\n\n  describe 'List of password users' do\n    subject { sql_session.query(query_password_users).results.column('user') }\n    it { should be_in authorized_password_users }\n  end",
        "tags": {
          "check_id__added": "C-38357r998289_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235138r638812_rule",
            "__new": "SV-235138r998291_rule"
          },
          "fix_id": {
            "__old": "F-38320r623535_fix",
            "__new": "F-38320r998290_fix"
          },
          "cci": [
            [
              "-",
              "CCI-000196"
            ],
            [
              "+",
              "CCI-004062"
            ]
          ],
          "nist": [
            [
              "-",
              "IA-5 (1) (c)"
            ],
            [
              "+",
              "IA-5 (1) (d)"
            ]
          ]
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "If passwords are used for authentication, the MySQL Database Server\n8.0 must store only hashed, salted representations of passwords.",
          "__new": "If passwords are used for authentication, the MySQL Database Server 8.0 must store only hashed, salted representations of passwords."
        },
        "desc": {
          "__old": "The DoD standard for authentication is DoD-approved PKI certificates.\n\n    Authentication based on User ID and Password may be used only when it is\nnot possible to employ a PKI certificate, and requires Authorizing Official\n(AO) approval.\n\n    In such cases, database passwords stored in clear text, using reversible\nencryption, or using unsalted hashes would be vulnerable to unauthorized\ndisclosure. Database passwords must always be in the form of one-way, salted\nhashes when stored internally or externally to the Database Management System\n(DBMS).\n\n    To prevent the compromise of authentication information, such as passwords\nand PINs, during the authentication process, the feedback from the information\nsystem must not provide any information that would allow an unauthorized user\nto compromise the authentication mechanism.\n\n    Obfuscation of user-provided information when typed into the system is a\nmethod used in addressing this risk.\n\n    For example, displaying asterisks when a user types in a password or PIN,\nis an example of obscuring feedback of authentication information.\n\n    The password requirement is applicable when caching_sha2_password,\nsha2_password, native_mysql, or LDAP user/password authentication is enabled.\nWhen this is the case, password-authenticated accounts can be created in, and\nauthenticated by, the MySQL Server. Other STIG requirements prohibit the use of\npassword-based authentication except when justified and approved. This deals\nwith the exceptions.\n\n    The mysql, mysqlsh, and other command-line tools are part of most MySQL\ninstallations. These tools can accept a plain-text password, but do offer\nalternative techniques. Since the typical user of these tools is a Database\nAdministrator (DBA), the consequences of password compromise are particularly\nserious. Therefore, the use of plain-text passwords must be prohibited as a\nmatter of practice and procedure.",
          "__new": "The DOD standard for authentication is DOD-approved PKI certificates.\n\nAuthentication based on User ID and Password may be used only when it is not possible to employ a PKI certificate, and requires Authorizing Official (AO) approval.\n\nIn such cases, database passwords stored in clear text, using reversible encryption, or using unsalted hashes would be vulnerable to unauthorized disclosure. Database passwords must always be in the form of one-way, salted hashes when stored internally or externally to the Database Management System (DBMS).\n\nTo prevent the compromise of authentication information, such as passwords and PINs, during the authentication process, the feedback from the information system must not provide any information that would allow an unauthorized user to compromise the authentication mechanism.\n\nObfuscation of user-provided information when typed into the system is a method used in addressing this risk.\n\nFor example, displaying asterisks when a user types in a password or PIN, is an example of obscuring feedback of authentication information.\n\nThe password requirement is applicable when caching_sha2_password, sha2_password, native_mysql, or LDAP user/password authentication is enabled. When this is the case, password-authenticated accounts can be created in, and authenticated by, the MySQL Server. Other STIG requirements prohibit the use of password-based authentication except when justified and approved. This deals with the exceptions.\n\nThe mysql, mysqlsh, and other command line tools are part of most MySQL installations. These tools can accept a plain-text password, but do offer alternative techniques. Since the typical user of these tools is a Database Administrator (DBA), the consequences of password compromise are particularly serious. Therefore, the use of plain-text passwords must be prohibited as a matter of practice and procedure."
        },
        "descs": {
          "default__deleted": "The DoD standard for authentication is DoD-approved PKI certificates.\n\n    Authentication based on User ID and Password may be used only when it is\nnot possible to employ a PKI certificate, and requires Authorizing Official\n(AO) approval.\n\n    In such cases, database passwords stored in clear text, using reversible\nencryption, or using unsalted hashes would be vulnerable to unauthorized\ndisclosure. Database passwords must always be in the form of one-way, salted\nhashes when stored internally or externally to the Database Management System\n(DBMS).\n\n    To prevent the compromise of authentication information, such as passwords\nand PINs, during the authentication process, the feedback from the information\nsystem must not provide any information that would allow an unauthorized user\nto compromise the authentication mechanism.\n\n    Obfuscation of user-provided information when typed into the system is a\nmethod used in addressing this risk.\n\n    For example, displaying asterisks when a user types in a password or PIN,\nis an example of obscuring feedback of authentication information.\n\n    The password requirement is applicable when caching_sha2_password,\nsha2_password, native_mysql, or LDAP user/password authentication is enabled.\nWhen this is the case, password-authenticated accounts can be created in, and\nauthenticated by, the MySQL Server. Other STIG requirements prohibit the use of\npassword-based authentication except when justified and approved. This deals\nwith the exceptions.\n\n    The mysql, mysqlsh, and other command-line tools are part of most MySQL\ninstallations. These tools can accept a plain-text password, but do offer\nalternative techniques. Since the typical user of these tools is a Database\nAdministrator (DBA), the consequences of password compromise are particularly\nserious. Therefore, the use of plain-text passwords must be prohibited as a\nmatter of practice and procedure.",
          "rationale__deleted": "",
          "check": {
            "__old": "MySQL stores and displays its user passwords in encrypted form.\nNevertheless, this should be verified by reviewing the relevant system views,\nalong with the other items to be checked here.\n\n    Ask the DBA to review the list of DBMS database objects, database\nconfiguration files, associated scripts, and applications defined within, and\nexternal to, the DBMS that accesses the database. The list must also include\nfiles, tables, or settings used to configure the operational environment for\nthe DBMS and for interactive DBMS user accounts.\n\n    Ask the DBA and/or Information System Security Officer (ISSO) to determine\nif any DBMS database objects, database configuration files, associated scripts,\nand applications defined within or external to the DBMS that access the\ndatabase, and DBMS/user environment files/settings/tables, contain database\npasswords. If any do, confirm that DBMS passwords stored internally or\nexternally to the DBMS are encoded or encrypted.\n\n    If any passwords are stored in clear text, this is a finding.\n\n    Ask the DBA/System Administrator (SA)/Application Support staff if they\nhave created an external password store for applications, batch jobs, and\nscripts to use. Verify that all passwords stored there are encrypted.\n\n    If a password store is used and any password is not encrypted, this is a\nfinding.\n\n    Run this query to determine which MySQL Server authentication methods are\nenabled:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE '%ldap%' OR\n           PLUGIN_NAME LIKE '%ldap%' OR\n           PLUGIN_NAME LIKE '%pam%' OR\n           PLUGIN_NAME like '%password';\n\n    If the results return any of the following values:\n    'mysql_native_password','ACTIVE'\n    'sha256_password','ACTIVE'\n    'caching_sha2_password’,’ACTIVE’\n\n    Next, determine if any accounts have been created that use passwords.\n    SELECT user, host,\n        `user`.`plugin`\n    FROM `mysql`.`user` where\n    (user.plugin like '%password')\n    AND NOT\n    (user like 'mysql.%' or user ='root');\n\n    For the mysql or mysqlsh command line tools, which can be configured to\naccept a plain-text password, and any other essential tool with the same\nlimitation, verify that the system documentation explains the need for the\ntool, who uses it, and any relevant mitigations; and that AO approval has been\nobtained; if not, this is a finding.\n\n    Request evidence that all users of the tool are trained in the importance\nof not using the plain-text password option; how to keep the password hidden;\nand adherence to this practice. If they are not, this is a finding.",
            "__new": "MySQL stores and displays its user passwords in encrypted form. Nevertheless, this should be verified by reviewing the relevant system views, along with the other items to be checked here.\n\nAsk the database administrator (DBA) to review the list of DBMS database objects, database configuration files, associated scripts, and applications defined within, and external to, the DBMS that accesses the database. The list must also include files, tables, or settings used to configure the operational environment for the DBMS and for interactive DBMS user accounts.\n\nAsk the DBA and/or information system security officer (ISSO) to determine if any DBMS database objects, database configuration files, associated scripts, and applications defined within or external to the DBMS that access the database, and DBMS/user environment files/settings/tables, contain database passwords. If any do, confirm that DBMS passwords stored internally or externally to the DBMS are encoded or encrypted.\n\nIf any passwords are stored in clear text, this is a finding.\n\nAsk the DBA/System Administrator (SA)/Application Support staff if they have created an external password store for applications, batch jobs, and scripts to use. Verify that all passwords stored there are encrypted.\n\nIf a password store is used and any password is not encrypted, this is a finding.\n\nRun this query to determine which MySQL Server authentication methods are enabled:\nSELECT PLUGIN_NAME, PLUGIN_STATUS\n       FROM INFORMATION_SCHEMA.PLUGINS\n       WHERE PLUGIN_NAME LIKE '%ldap%' OR \n       PLUGIN_NAME LIKE '%ldap%' OR \n       PLUGIN_NAME LIKE '%pam%' OR \n       PLUGIN_NAME like '%password';\n\nIf the results return any of the following values:\n'mysql_native_password','ACTIVE'\n'sha256_password','ACTIVE'\n'caching_sha2_password’,’ACTIVE’\n\nNext, determine if any accounts have been created that use passwords.\nSELECT user, host,\n    `user`.`plugin`\nFROM `mysql`.`user` where \n(user.plugin like '%password') \nAND NOT\n(user like 'mysql.%' or user ='root');\n\nFor the mysql or mysqlsh command line tools, which can be configured to accept a plain-text password, and any other essential tool with the same limitation, verify that the system documentation explains the need for the tool, who uses it, and any relevant mitigations; and that AO approval has been obtained; if not, this is a finding.\n\nRequest evidence that all users of the tool are trained in the importance of not using the plain-text password option; how to keep the password hidden; and adherence to this practice. If they are not, this is a finding."
          },
          "fix": {
            "__old": "Develop, document, and maintain a list of DBMS database objects, database\nconfiguration files, associated scripts, and applications defined within or\nexternal to the DBMS that access the database, and DBMS/user environment\nfiles/settings in the System Security Plan.\n\n    Record whether they do or do not contain DBMS passwords. If passwords are\npresent, ensure they are encoded or encrypted and protected by host system\nsecurity.\n\n    Where possible, alter the authentication mode to X509 or LDAP SASL/Kerberos:\n    Just X509 certificate - for example\n    ALTER USER 'jeffrey'@'localhost' REQUIRE X509;\n\n    Specific X509 - for example\n    ALTER USER 'jeffrey'@'localhost'\n      REQUIRE SUBJECT '/C=SE/ST=Stockholm/L=Stockholm/\n        O=MySQL demo client certificate/\n        CN=client/emailAddress=client@example.com'\n      AND ISSUER '/C=SE/ST=Stockholm/L=Stockholm/\n        O=MySQL/CN=CA/emailAddress=ca@example.com'\n    AND CIPHER 'EDH-RSA-DES-CBC3-SHA’;\n\n    LDAP SASL Example\n    CREATE USER 'boris'@'localhost'\n      IDENTIFIED WITH authentication_ldap_sasl\n      AS 'uid=boris_ldap,ou=People,dc=example,dc=com';\n\n    If password authentication is necessary, then for mysql and mysqlsh command\nlines which cannot be configured not to accept a plain-text password when\nmixed-mode authentication is enabled, and any other essential tool with the\nsame limitation:\n    1) Document the need for it, who uses it, any relevant mitigations, and\nobtain AO approval.\n    2) Train all users of the tool in the importance of not using the\nplain-text password option and in how to keep the password hidden.",
            "__new": "Develop, document, and maintain a list of DBMS database objects, database configuration files, associated scripts, and applications defined within or external to the DBMS that access the database, and DBMS/user environment files/settings in the System Security Plan.\n\nRecord whether they do or do not contain DBMS passwords. If passwords are present, ensure they are encoded or encrypted and protected by host system security.\n\nWhere possible, alter the authentication mode to X509 or LDAP SASL/Kerberos:\nJust X509 certificate - for example\nALTER USER 'jeffrey'@'localhost' REQUIRE X509;\n\nSpecific X509 example:\nALTER USER 'jeffrey'@'localhost'\n  REQUIRE SUBJECT '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL demo client certificate/\n    CN=client/emailAddress=client@example.com'\n  AND ISSUER '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL/CN=CA/emailAddress=ca@example.com'\nAND CIPHER 'EDH-RSA-DES-CBC3-SHA’;\n\nLDAP SASL example:\nCREATE USER 'boris'@'localhost'\n  IDENTIFIED WITH authentication_ldap_sasl\n  AS 'uid=boris_ldap,ou=People,dc=example,dc=com';\n\nIf password authentication is necessary, then for mysql and mysqlsh command lines which cannot be configured not to accept a plain-text password when mixed-mode authentication is enabled, and any other essential tool with the same limitation:\n1) Document the need for it, who uses it, any relevant mitigations, and obtain AO approval.\n2) Train all users of the tool in the importance of not using the plain-text password option and in how to keep the password hidden."
          }
        }
      },
      "SV-235139": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  org_approved_cert_issuer = input('org_approved_cert_issuer')\n\n  query_ssl_params = %(\n  SELECT @@ssl_ca,\n         @@ssl_capath,\n         @@ssl_cert,\n         @@ssl_cipher,\n         @@ssl_crl,\n         @@ssl_crlpath,\n         @@ssl_fips_mode,\n         @@ssl_key,\n         @@require_secure_transport,\n         @@datadir;\n  )\n\n  ssl_params = sql_session.query(query_ssl_params).results\n\n  require_secure_transport = ssl_params.column('@@require_secure_transport').join\n  describe '@@require_secure_transport' do\n    it \"should be 1 or ON. Got #{require_secure_transport}\" do\n      expect(require_secure_transport).to be_in(['1', 'ON'])\n    end\n  end\n\n  if !input('aws_rds')\n    full_cert_path = \"#{ssl_params.column('@@datadir').join}#{ssl_params.column('@@ssl_cert').join}\"\n    describe \"SSL Certificate file: #{full_cert_path}\" do\n        subject { file(full_cert_path) }\n        it { should exist }\n    end\n\n    describe x509_certificate(full_cert_path) do\n        its('issuer.CN') { should match org_approved_cert_issuer}\n    end\n\tend",
        "tags": {
          "check_id__added": "C-38358r623537_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235139r638812_rule",
            "__new": "SV-235139r961029_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "If passwords are used for authentication, the MySQL Database Server\n8.0 must transmit only encrypted representations of passwords.",
          "__new": "If passwords are used for authentication, the MySQL Database Server 8.0 must transmit only encrypted representations of passwords."
        },
        "desc": {
          "__old": "The DoD standard for authentication is DoD-approved PKI certificates.\n\n    Authentication based on User ID and Password may be used only when it is\nnot possible to employ a PKI certificate, and requires Authorizing Official\n(AO) approval.\n\n    In such cases, passwords need to be protected at all times, and encryption\nis the standard method for protecting passwords during transmission.\n\n    Database Management System (DBMS) passwords sent in clear text format\nacross the network are vulnerable to discovery by unauthorized users.\nDisclosure of passwords may easily lead to unauthorized access to the database.",
          "__new": "The DoD standard for authentication is DoD-approved PKI certificates.\n\nAuthentication based on User ID and Password may be used only when it is not possible to employ a PKI certificate, and requires Authorizing Official (AO) approval.\n\nIn such cases, passwords need to be protected at all times, and encryption is the standard method for protecting passwords during transmission.\n\nDatabase Management System (DBMS) passwords sent in clear text format across the network are vulnerable to discovery by unauthorized users. Disclosure of passwords may easily lead to unauthorized access to the database."
        },
        "descs": {
          "default__deleted": "The DoD standard for authentication is DoD-approved PKI certificates.\n\n    Authentication based on User ID and Password may be used only when it is\nnot possible to employ a PKI certificate, and requires Authorizing Official\n(AO) approval.\n\n    In such cases, passwords need to be protected at all times, and encryption\nis the standard method for protecting passwords during transmission.\n\n    Database Management System (DBMS) passwords sent in clear text format\nacross the network are vulnerable to discovery by unauthorized users.\nDisclosure of passwords may easily lead to unauthorized access to the database.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review configuration settings for encrypting passwords in transit across\nthe network. If passwords are not encrypted, this is a finding.\n\n    If it is determined that passwords are passed unencrypted at any point\nalong the transmission path between the source and destination, this is a\nfinding.\n\n    To check, run the following SQL:\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables\n    WHERE VARIABLE_NAME IN ('require_secure_transport') ;\n    If the require_secure_transport VARIABLE_VALUE is not  'ON' (1), this is a\nfinding.\n\n     If 1 (On), then only SSL connections are permitted; next examine the\ncertificate used.\n\n    Run the following command to determine the certificate in use along with\nother details:\n    select @@ssl_ca, @@ssl_capath, @@ssl_cert, @@ssl_cipher, @@ssl_crl,\n@@ssl_crlpath, @@ssl_fips_mode, @@ssl_key;\n\n    If the certificate is not a DoD certificate, or if no certificate is\nlisted, this is a finding.",
            "__new": "Review configuration settings for encrypting passwords in transit across the network. If passwords are not encrypted, this is a finding. \n\nIf it is determined that passwords are passed unencrypted at any point along the transmission path between the source and destination, this is a finding.\n\nTo check, run the following SQL:\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables\nWHERE VARIABLE_NAME IN ('require_secure_transport') ;\nIf the require_secure_transport VARIABLE_VALUE is not  'ON' (1), this is a finding.\n\n If 1 (On), then only SSL connections are permitted; next examine the certificate used.\n\nRun the following command to determine the certificate in use along with other details:\nselect @@ssl_ca, @@ssl_capath, @@ssl_cert, @@ssl_cipher, @@ssl_crl, @@ssl_crlpath, @@ssl_fips_mode, @@ssl_key;\n\nIf the certificate is not a DoD certificate, or if no certificate is listed, this is a finding."
          },
          "fix": {
            "__old": "Configure encryption for transmission of passwords across the network. If\nthe database does not provide encryption for logon events natively, employ\nencryption at the OS or network level.\n\n    Ensure passwords remain encrypted from source to destination.\n\n    connect to MySQL as admin (root)\n    mysql> set persist require_secure_transport=ON;\n\n    Set system variables on the server side specify  DoD approved certificate\nand key files the server uses when permitting clients to establish encrypted\nconnections:\n\n    ssl_ca: The path name of the Certificate Authority (CA) certificate file.\n(ssl_capath is similar but specifies the path name of a directory of CA\ncertificate files.)\n\n    ssl_cert: The path name of the server public key certificate file. This\ncertificate can be sent to the client and authenticated against the CA\ncertificate that it has.\n\n    ssl_key: The path name of the server private key file.\n\n    For example, to enable the server for encrypted connections with\ncertificates, start it with these lines in the my.cnf file, changing the file\nnames as necessary:\n\n    [mysqld]\n    ssl_ca=ca.pem\n    ssl_cert=server-cert.pem\n    ssl_key=server-key.pem",
            "__new": "Configure encryption for transmission of passwords across the network. If the database does not provide encryption for logon events natively, employ encryption at the OS or network level.\n\nEnsure passwords remain encrypted from source to destination.\n\nconnect to MySQL as admin (root)\nmysql> set persist require_secure_transport=ON;\n\nSet system variables on the server side specify  DoD approved certificate and key files the server uses when permitting clients to establish encrypted connections:\n\nssl_ca: The path name of the Certificate Authority (CA) certificate file. (ssl_capath is similar but specifies the path name of a directory of CA certificate files.)\n\nssl_cert: The path name of the server public key certificate file. This certificate can be sent to the client and authenticated against the CA certificate that it has.\n\nssl_key: The path name of the server private key file.\n\nFor example, to enable the server for encrypted connections with certificates, start it with these lines in the my.cnf file, changing the file names as necessary:\n\n[mysqld]\nssl_ca=ca.pem\nssl_cert=server-cert.pem\nssl_key=server-key.pem"
          }
        }
      },
      "SV-235140": {
        "describe__deleted": "  describe 'Manually review users are trained to use alternatives to command line password parameters.' do\n    skip 'Manually review users are trained to use alternatives to command line password parameters.'\n  end",
        "tags": {
          "check_id__added": "C-38359r623540_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235140r638812_rule",
            "__new": "SV-235140r961047_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must obscure feedback of authentication\ninformation during the authentication process to protect the information from\npossible exploitation/use by unauthorized individuals.",
          "__new": "The MySQL Database Server 8.0 must obscure feedback of authentication information during the authentication process to protect the information from possible exploitation/use by unauthorized individuals."
        },
        "desc": {
          "__old": "The DoD standard for authentication is DoD-approved PKI certificates.\n\n    Normally, with PKI authentication, the interaction with the user for\nauthentication will be handled by a software component separate from the\nDatabase Management System (DBMS), such as ActivIdentity ActivClient. However,\nin cases where the DBMS controls the interaction, this requirement applies.\n\n    To prevent the compromise of authentication information such as passwords\nand PINs during the authentication process, the feedback from the system must\nnot provide any information that would allow an unauthorized user to compromise\nthe authentication mechanism.\n\n    Obfuscation of user-provided authentication secrets when typed into the\nsystem is a method used in addressing this risk.\n\n    Displaying asterisks when a user types in a password or a smart card PIN is\nan example of obscuring feedback of authentication secrets.\n\n    For mysql tools, which can accept a plain-text password, and any other\nessential tool with the same limitation:\n    1) Document the need for it, who uses it, and any relevant mitigations, and\nobtain Authorizing Official (AO) approval\n    2) Train all users of the tool in the importance of not using the\nplain-text password option and in how to keep the password hidden by using the\n\"-p\" without the password option. The user will then be prompted and the\npassword obfuscated.\n    3) Make use of OS pluggable password manager integration to protect\npasswords using keyrings",
          "__new": "The DoD standard for authentication is DoD-approved PKI certificates.\n\nNormally, with PKI authentication, the interaction with the user for authentication will be handled by a software component separate from the Database Management System (DBMS), such as ActivIdentity ActivClient. However, in cases where the DBMS controls the interaction, this requirement applies.\n\nTo prevent the compromise of authentication information such as passwords and PINs during the authentication process, the feedback from the system must not provide any information that would allow an unauthorized user to compromise the authentication mechanism. \n\nObfuscation of user-provided authentication secrets when typed into the system is a method used in addressing this risk. \n\nDisplaying asterisks when a user types in a password or a smart card PIN is an example of obscuring feedback of authentication secrets.\n\nFor mysql tools, which can accept a plain-text password, and any other essential tool with the same limitation:\n1) Document the need for it, who uses it, and any relevant mitigations, and obtain Authorizing Official (AO) approval\n2) Train all users of the tool in the importance of not using the plain-text password option and in how to keep the password hidden by using the \"-p\" without the password option. The user will then be prompted and the password obfuscated.\n3) Make use of OS pluggable password manager integration to protect passwords using keyrings"
        },
        "descs": {
          "default__deleted": "The DoD standard for authentication is DoD-approved PKI certificates.\n\n    Normally, with PKI authentication, the interaction with the user for\nauthentication will be handled by a software component separate from the\nDatabase Management System (DBMS), such as ActivIdentity ActivClient. However,\nin cases where the DBMS controls the interaction, this requirement applies.\n\n    To prevent the compromise of authentication information such as passwords\nand PINs during the authentication process, the feedback from the system must\nnot provide any information that would allow an unauthorized user to compromise\nthe authentication mechanism.\n\n    Obfuscation of user-provided authentication secrets when typed into the\nsystem is a method used in addressing this risk.\n\n    Displaying asterisks when a user types in a password or a smart card PIN is\nan example of obscuring feedback of authentication secrets.\n\n    For mysql tools, which can accept a plain-text password, and any other\nessential tool with the same limitation:\n    1) Document the need for it, who uses it, and any relevant mitigations, and\nobtain Authorizing Official (AO) approval\n    2) Train all users of the tool in the importance of not using the\nplain-text password option and in how to keep the password hidden by using the\n\"-p\" without the password option. The user will then be prompted and the\npassword obfuscated.\n    3) Make use of OS pluggable password manager integration to protect\npasswords using keyrings",
          "rationale__deleted": "",
          "check": {
            "__old": "If all interaction with the user for purposes of authentication is handled\nby a software component separate from the MySQL Database Server 8.0, this is\nnot a finding.\n\n    If any application, tool, or feature associated with the MySQL Database\nServer 8.0/database displays any authentication secrets (to include PINs and\npasswords) during or after the authentication process, this is a finding.\n\n    MySQL command line option --password (or -p) obscures feedback on the typed\nin password.\n\n    Ensure users are trained to use alternatives to command line password\nparameters, if they are not, this is a finding.",
            "__new": "If all interaction with the user for purposes of authentication is handled by a software component separate from the MySQL Database Server 8.0, this is not a finding.\n\nIf any application, tool, or feature associated with the MySQL Database Server 8.0/database displays any authentication secrets (to include PINs and passwords) during or after the authentication process, this is a finding.\n\nMySQL command line option --password (or -p) obscures feedback on the typed in password. \n\nEnsure users are trained to use alternatives to command line password parameters, if they are not, this is a finding."
          },
          "fix": {
            "__old": "Modify and configure each non-compliant application, tool, or feature\nassociated with the MySQL Database Server 8.0/database so that it does not\ndisplay authentication secrets.\n\n    Use -p (--password) without providing a password for the mysql command line\ntool.\n\n    Configure or modify applications to prohibit display of passwords in clear\ntext.\n\n    Use OS pluggable password manager integration to protect passwords using\nkeyrings. Following is an example:\n    $ /usr/local/mysql/bin/mysql -uroot -p\n    Enter password:\n\n    $ mysqlsh --user=user --password\n    Please provide the password for 'user@localhost':",
            "__new": "Modify and configure each non-compliant application, tool, or feature associated with the MySQL Database Server 8.0/database so that it does not display authentication secrets.\n\nUse -p (--password) without providing a password for the mysql command line tool.\n\nConfigure or modify applications to prohibit display of passwords in clear text.\n\nUse OS pluggable password manager integration to protect passwords using keyrings. Following is an example:\n$ /usr/local/mysql/bin/mysql -uroot -p\nEnter password:\n\n$ mysqlsh --user=user --password\nPlease provide the password for 'user@localhost':"
          }
        }
      },
      "SV-235141": {
        "describe__deleted": "  describe 'Manually validate appropriate access controls are in place to restrict the access of those users to objects and data\nthey are authorized to see' do\n    skip 'Manually validate appropriate access controls are in place to restrict the access of those users to objects and data\n    they are authorized to see'\n  end",
        "tags": {
          "check_id__added": "C-38360r623543_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235141r638812_rule",
            "__new": "SV-235141r960792_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must enforce approved authorizations for\nlogical access to information and system resources in accordance with\napplicable access control policies.",
          "__new": "The MySQL Database Server 8.0 must enforce approved authorizations for logical access to information and system resources in accordance with applicable access control policies."
        },
        "desc": {
          "__old": "Authentication with a DoD-approved PKI certificate does not\nnecessarily imply authorization to access the Database Management System\n(DBMS). To mitigate the risk of unauthorized access to sensitive information by\nentities that have been issued certificates by DoD-approved PKIs, all DoD\nsystems, including databases, must be properly configured to implement access\ncontrol policies.\n\n    Successful authentication must not automatically give an entity access to\nan asset or security boundary. Authorization procedures and controls must be\nimplemented to ensure each authenticated entity also has a validated and\ncurrent authorization. Authorization is the process of determining whether an\nentity, once authenticated, is permitted to access a specific asset.\nInformation systems use access control policies and enforcement mechanisms to\nimplement this requirement.\n\n    Access control policies include identity-based policies, role-based\npolicies, and attribute-based policies. Access enforcement mechanisms include\naccess control lists, access control matrices, and cryptography. These policies\nand mechanisms must be employed by the application to control access between\nusers (or processes acting on behalf of users) and objects (e.g., devices,\nfiles, records, processes, programs, and domains) in the information system.\n\n    This requirement is applicable to access control enforcement applications,\na category that includes database management systems. If the DBMS does not\nfollow applicable policy when approving access, it may be in conflict with\nnetworks or other applications in the information system. This may result in\nusers either gaining or being denied access inappropriately and in conflict\nwith applicable policy.",
          "__new": "Authentication with a DoD-approved PKI certificate does not necessarily imply authorization to access the Database Management System (DBMS). To mitigate the risk of unauthorized access to sensitive information by entities that have been issued certificates by DoD-approved PKIs, all DoD systems, including databases, must be properly configured to implement access control policies. \n\nSuccessful authentication must not automatically give an entity access to an asset or security boundary. Authorization procedures and controls must be implemented to ensure each authenticated entity also has a validated and current authorization. Authorization is the process of determining whether an entity, once authenticated, is permitted to access a specific asset. Information systems use access control policies and enforcement mechanisms to implement this requirement. \n\nAccess control policies include identity-based policies, role-based policies, and attribute-based policies. Access enforcement mechanisms include access control lists, access control matrices, and cryptography. These policies and mechanisms must be employed by the application to control access between users (or processes acting on behalf of users) and objects (e.g., devices, files, records, processes, programs, and domains) in the information system. \n\nThis requirement is applicable to access control enforcement applications, a category that includes database management systems. If the DBMS does not follow applicable policy when approving access, it may be in conflict with networks or other applications in the information system. This may result in users either gaining or being denied access inappropriately and in conflict with applicable policy."
        },
        "descs": {
          "default__deleted": "Authentication with a DoD-approved PKI certificate does not\nnecessarily imply authorization to access the Database Management System\n(DBMS). To mitigate the risk of unauthorized access to sensitive information by\nentities that have been issued certificates by DoD-approved PKIs, all DoD\nsystems, including databases, must be properly configured to implement access\ncontrol policies.\n\n    Successful authentication must not automatically give an entity access to\nan asset or security boundary. Authorization procedures and controls must be\nimplemented to ensure each authenticated entity also has a validated and\ncurrent authorization. Authorization is the process of determining whether an\nentity, once authenticated, is permitted to access a specific asset.\nInformation systems use access control policies and enforcement mechanisms to\nimplement this requirement.\n\n    Access control policies include identity-based policies, role-based\npolicies, and attribute-based policies. Access enforcement mechanisms include\naccess control lists, access control matrices, and cryptography. These policies\nand mechanisms must be employed by the application to control access between\nusers (or processes acting on behalf of users) and objects (e.g., devices,\nfiles, records, processes, programs, and domains) in the information system.\n\n    This requirement is applicable to access control enforcement applications,\na category that includes database management systems. If the DBMS does not\nfollow applicable policy when approving access, it may be in conflict with\nnetworks or other applications in the information system. This may result in\nusers either gaining or being denied access inappropriately and in conflict\nwith applicable policy.",
          "rationale__deleted": "",
          "check": {
            "__old": "Check MySQL settings to determine whether users are restricted from\naccessing objects and data they are not authorized to access.\n    Review the system documentation to determine the required levels of\nprotection for DBMS server securables, by type of login.\n\n    Review the permissions actually in place on the server.\n\n    If the actual permissions do not match the documented requirements, this is\na finding.\n\n    The following tables contain access control data. Run these scripts:\n\n    For information about database-level privileges:\n    The server uses the user and db tables in the mysql database at both the\nfirst and second stages of access control.\n    SELECT * FROM mysql.db;\n    SELECT * FROM mysql.user;\n\n    During the second stage of access control, the server performs request\nverification to ensure each client has sufficient privileges for each request\nit issues.\n\n    These provide finer privilege control at the table and column levels.\n    SELECT * FROM mysql.tables_priv;\n    SELECT * FROM mysql.columns_priv;\n\n    For verification of requests that involve stored routines.\n    SELECT * FROM mysql.procs_priv;\n    Information about proxy accounts\n    SELECT * from mysql.proxies_priv;\n\n    Lists current assignments of dynamic global privileges to user accounts.\n    SELECT * from mysql.global_grants;\n    Lists default user roles\n    SELECT * FROM mysql.default_roles;\n\n    Lists edges for role subgraphs, showing roles assigned to other roles\nhierarchy.\n    SELECT * FROM mysql.role_edges;\n\n    To inspect permissions on specific table(s):\n    WITH\n      tableprivs AS (SELECT user, host, 'mysql.tables_priv' as PRIV_SOURCE , DB\nas _db, Table_Name as _obj , ' ' as _col FROM mysql.tables_priv where\nTable_name like '%' ),\n      colprivs AS (SELECT User, Host, 'mysql.columns_priv' as PRIV_SOURCE , DB\nas _db, table_name as _obj , column_name as _col FROM mysql.columns_priv WHERE\nTable_name like '%' )\n    SELECT user,host, PRIV_SOURCE , _db as _db, _obj, _col FROM\n    (\n    SELECT user,host, PRIV_SOURCE, _db, _obj, _col FROM colprivs UNION\n    SELECT user,host, PRIV_SOURCE, _db, _obj, _col FROM tableprivs) as tt group\nby user, host, PRIV_SOURCE, _db, _obj, _col;\n\n    To inspect specific user, role or user using role:\n    Example\n    User or role\n    SHOW GRANTS FOR 'app_developer'@'%';\n    User with Role\n    SHOW GRANTS FOR 'u1'@'localhost' USING 'r1';\n\n    If appropriate access controls are not implemented to restrict access to\nauthorized users and to restrict the access of those users to objects and data\nthey are authorized to see, this is a finding.",
            "__new": "Check MySQL settings to determine whether users are restricted from accessing objects and data they are not authorized to access. \nReview the system documentation to determine the required levels of protection for DBMS server securables, by type of login. \n\nReview the permissions actually in place on the server. \n\nIf the actual permissions do not match the documented requirements, this is a finding. \n\nThe following tables contain access control data. Run these scripts:\n\nFor information about database-level privileges:\nThe server uses the user and db tables in the mysql database at both the first and second stages of access control.\nSELECT * FROM mysql.db;\nSELECT * FROM mysql.user;\n\nDuring the second stage of access control, the server performs request verification to ensure each client has sufficient privileges for each request it issues. \n\nThese provide finer privilege control at the table and column levels.\nSELECT * FROM mysql.tables_priv;\nSELECT * FROM mysql.columns_priv;\n\nFor verification of requests that involve stored routines.\nSELECT * FROM mysql.procs_priv;\nInformation about proxy accounts\nSELECT * from mysql.proxies_priv;\n\nLists current assignments of dynamic global privileges to user accounts.\nSELECT * from mysql.global_grants;\nLists default user roles\nSELECT * FROM mysql.default_roles;\n\nLists edges for role subgraphs, showing roles assigned to other roles hierarchy.\nSELECT * FROM mysql.role_edges;\n\nTo inspect permissions on specific table(s):\nWITH\n  tableprivs AS (SELECT user, host, 'mysql.tables_priv' as PRIV_SOURCE , DB as _db, Table_Name as _obj , ' ' as _col FROM mysql.tables_priv where Table_name like '%' ),\n  colprivs AS (SELECT User, Host, 'mysql.columns_priv' as PRIV_SOURCE , DB as _db, table_name as _obj , column_name as _col FROM mysql.columns_priv WHERE Table_name like '%' )\nSELECT user,host, PRIV_SOURCE , _db as _db, _obj, _col FROM\n(\nSELECT user,host, PRIV_SOURCE, _db, _obj, _col FROM colprivs UNION\nSELECT user,host, PRIV_SOURCE, _db, _obj, _col FROM tableprivs) as tt group by user, host, PRIV_SOURCE, _db, _obj, _col;\n\nTo inspect specific user, role or user using role:\nExample\nUser or role\nSHOW GRANTS FOR 'app_developer'@'%';\nUser with Role\nSHOW GRANTS FOR 'u1'@'localhost' USING 'r1';\n\nIf appropriate access controls are not implemented to restrict access to authorized users and to restrict the access of those users to objects and data they are authorized to see, this is a finding."
          },
          "fix": {
            "__old": "Configure the MySQL Database Server 8.0 settings and access controls to\npermit user access only to objects and data that the user is authorized to view\nor interact with, and to prevent access to all other objects and data.\n\n    Use GRANT, REVOKE, ALTER statements to add and remove permissions on\nserver-level securables, bringing them into line with the documented\nrequirements.",
            "__new": "Configure the MySQL Database Server 8.0 settings and access controls to permit user access only to objects and data that the user is authorized to view or interact with, and to prevent access to all other objects and data.\n\nUse GRANT, REVOKE, ALTER statements to add and remove permissions on server-level securables, bringing them into line with the documented requirements."
          }
        }
      },
      "SV-235142": {
        "describe__deleted": "  describe \"Manually review the MySQL documentation and configuration to determine it is\nconfigured in accordance with #{input('org_name')} security configuration and implementation\nguidance, including STIGs, #{input('org_guidance')}\" do\n    skip \"Manually review the MySQL documentation and configuration to determine it is\n    configured in accordance with #{input('org_name')} security configuration and implementation\n    guidance, including STIGs, #{input('org_guidance')}\"\n  end",
        "tags": {
          "check_id__added": "C-38361r623546_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235142r638812_rule",
            "__new": "SV-235142r961863_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must be configured in accordance with\nthe security configuration settings based on DoD security configuration and\nimplementation guidance, including STIGs, NSA configuration guides, CTOs, DTMs, and IAVMs.",
          "__new": "The MySQL Database Server 8.0 must be configured in accordance with the security configuration settings based on DoD security configuration and implementation guidance, including STIGs, NSA configuration guides, CTOs, DTMs, and IAVMs."
        },
        "desc": {
          "__old": "Configuring the Database Management System (DBMS) to implement\norganization-wide security implementation guides and security checklists\nensures compliance with federal standards and establishes a common security\nbaseline across DoD that reflects the most restrictive security posture\nconsistent with operational requirements.\n\n    In addition to this SRG, sources of guidance on security and information\nassurance exist. These include NSA configuration guides, CTOs, DTMs, and IAVMs.\nThe DBMS must be configured in compliance with guidance from all such relevant\nsources.",
          "__new": "Configuring the Database Management System (DBMS) to implement organization-wide security implementation guides and security checklists ensures compliance with federal standards and establishes a common security baseline across DoD that reflects the most restrictive security posture consistent with operational requirements. \n\nIn addition to this SRG, sources of guidance on security and information assurance exist. These include NSA configuration guides, CTOs, DTMs, and IAVMs. The DBMS must be configured in compliance with guidance from all such relevant sources."
        },
        "descs": {
          "default__deleted": "Configuring the Database Management System (DBMS) to implement\norganization-wide security implementation guides and security checklists\nensures compliance with federal standards and establishes a common security\nbaseline across DoD that reflects the most restrictive security posture\nconsistent with operational requirements.\n\n    In addition to this SRG, sources of guidance on security and information\nassurance exist. These include NSA configuration guides, CTOs, DTMs, and IAVMs.\nThe DBMS must be configured in compliance with guidance from all such relevant\nsources.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the MySQL documentation and configuration to determine it is\nconfigured in accordance with DoD security configuration and implementation\nguidance, including STIGs, NSA configuration guides, CTOs, DTMs, and IAVMs.\n\n    If the MySQL is not configured in accordance with security configuration\nsettings, this is a finding.",
            "__new": "Review the MySQL documentation and configuration to determine it is configured in accordance with DoD security configuration and implementation guidance, including STIGs, NSA configuration guides, CTOs, DTMs, and IAVMs.\n\nIf the MySQL is not configured in accordance with security configuration settings, this is a finding."
          },
          "fix": {
            "__old": "Configure MySQL in accordance with security configuration\nsettings by reviewing the Operation System and MySQL documentation and applying\nthe necessary configuration parameters to meet the configurations required by\nthe STIG, NSA configuration guides, CTOs, DTMs, and IAVMs.",
            "__new": "Configure MySQL in accordance with security configuration settings by reviewing the Operation System and MySQL documentation and applying the necessary configuration parameters to meet the configurations required by the STIG, NSA configuration guidelines, CTOs, DTMs, and IAVMs."
          }
        }
      },
      "SV-235143": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  query_schemas = %(\n  SELECT\n     * \n  FROM\n     information_schema.SCHEMATA \n  where\n     SCHEMA_NAME not in \n     (\n        'mysql',\n        'information_schema',\n        'sys',\n        'performance_schema'\n     );\n  )\n\n  describe 'Defined schemas' do\n    subject { sql_session.query(query_schemas).results.column('schema_name') }\n    it { should_not be_in ['sakila','world','world_x','menagerie'] }\n  end",
        "tags": {
          "check_id__added": "C-38362r623549_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235143r638812_rule",
            "__new": "SV-235143r960963_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "Default demonstration and sample databases, database objects, and\napplications must be removed.",
          "__new": "Default demonstration and sample databases, database objects, and applications must be removed."
        },
        "desc": {
          "__old": "Information systems are capable of providing a wide variety of\nfunctions and services. Some of the functions and services, provided by\ndefault, may not be necessary to support essential organizational operations\n(e.g., key missions, functions).\n\n    It is detrimental for software products to provide, or install by default,\nfunctionality exceeding requirements or mission objectives. Examples include,\nbut are not limited to, installing advertising software, demonstrations, or\nbrowser plugins not related to requirements or providing a wide array of\nfunctionality, not required for every mission, that cannot be disabled.\n\n    Database Management Systems (DBMSs) must adhere to the principles of least\nfunctionality by providing only essential capabilities.\n\n    Demonstration and sample database objects and applications present publicly\nknown attack points for malicious users. These demonstration and sample objects\nare meant to provide simple examples of coding specific functions and are not\ndeveloped to prevent vulnerabilities from being introduced to the DBMS and host\nsystem.",
          "__new": "Information systems are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).\n\nIt is detrimental for software products to provide, or install by default, functionality exceeding requirements or mission objectives. Examples include, but are not limited to, installing advertising software, demonstrations, or browser plugins not related to requirements or providing a wide array of functionality, not required for every mission, that cannot be disabled.\n\nDatabase Management Systems (DBMSs) must adhere to the principles of least functionality by providing only essential capabilities.\n\nDemonstration and sample database objects and applications present publicly known attack points for malicious users. These demonstration and sample objects are meant to provide simple examples of coding specific functions and are not developed to prevent vulnerabilities from being introduced to the DBMS and host system."
        },
        "descs": {
          "default__deleted": "Information systems are capable of providing a wide variety of\nfunctions and services. Some of the functions and services, provided by\ndefault, may not be necessary to support essential organizational operations\n(e.g., key missions, functions).\n\n    It is detrimental for software products to provide, or install by default,\nfunctionality exceeding requirements or mission objectives. Examples include,\nbut are not limited to, installing advertising software, demonstrations, or\nbrowser plugins not related to requirements or providing a wide array of\nfunctionality, not required for every mission, that cannot be disabled.\n\n    Database Management Systems (DBMSs) must adhere to the principles of least\nfunctionality by providing only essential capabilities.\n\n    Demonstration and sample database objects and applications present publicly\nknown attack points for malicious users. These demonstration and sample objects\nare meant to provide simple examples of coding specific functions and are not\ndeveloped to prevent vulnerabilities from being introduced to the DBMS and host\nsystem.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review vendor documentation and vendor websites to identify vendor-provided\ndemonstration or sample databases, database applications, objects, and files.\nNote: MySQL does not include any in MySQL Database Server 8.0.\n\n    Review the MySQL Database Server 8.0 to determine if any of the\ndemonstration and sample databases, database applications, or files are\ninstalled in the database or are included with the MySQL Database Server 8.0\napplication. If any are present in the database or are included with the MySQL\nDatabase Server 8.0 application, this is a finding.\n\n    Check database/schema content of MySQL with the following command:\n    SELECT * FROM information_schema.SCHEMATA where SCHEMA_NAME not in\n('mysql','information_schema', 'sys', 'performance_schema');\n\n    If this system is identified as production, gather a listing of databases\nfrom the server and look for any matching the following general demonstration\ndatabase names:\n    sakila\n    world\n    world_x\n    menagerie\n\n    If any of these databases exist, this is a finding.",
            "__new": "Review vendor documentation and vendor websites to identify vendor-provided demonstration or sample databases, database applications, objects, and files. Note: MySQL does not include any in MySQL Database Server 8.0.\n\nReview the MySQL Database Server 8.0 to determine if any of the demonstration and sample databases, database applications, or files are installed in the database or are included with the MySQL Database Server 8.0 application. If any are present in the database or are included with the MySQL Database Server 8.0 application, this is a finding.\n\nCheck database/schema content of MySQL with the following command:\nSELECT * FROM information_schema.SCHEMATA where SCHEMA_NAME not in ('mysql','information_schema', 'sys', 'performance_schema');\n\nIf this system is identified as production, gather a listing of databases from the server and look for any matching the following general demonstration database names: \nsakila \nworld\nworld_x\nmenagerie\n\nIf any of these databases exist, this is a finding."
          },
          "fix": {
            "__old": "MySQL 8.0 contains no demo databases by default. If demo schemas (aka\ndatabases) were added, remove them by executing:\n\n    mysql -u root -p --execute=\"DROP DATABASE 'schema_name'\"",
            "__new": "MySQL 8.0 contains no demo databases by default. If demo schemas (aka databases) were added, remove them by executing:\n\nmysql -u root -p --execute=\"DROP DATABASE 'schema_name'\""
          }
        }
      },
      "SV-235144": {
        "describe__deleted": "  approved_plugins = input('approved_plugins')\n  approved_components = input('approved_components')\n\n  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n   approved_plugins = input('approved_plugins')\n  else\n   approved_plugins = input('approved_plugins') + ['validate_password','RDS_PROCESSLIST','RDS_EVENTS_THREADS_WAITS_CURRENT']\n  end\n\n  query_plugins = %(\n  SELECT\n     * \n  FROM\n     information_schema.PLUGINS \n  where\n     plugin_library is NOT NULL;\n  )\n\n  describe 'Installed plugins' do\n    subject { sql_session.query(query_plugins).results.column('plugin_name') }\n    it { should be_in approved_plugins }\n  end\n\n\tif !input('aws_rds')\n    query_components = %(\n    SELECT\n      * \n    FROM\n      mysql.component;\n    )\n\n    describe 'Installed components' do\n      subject { sql_session.query(query_components).results.column('component_urn') }\n      it { should be_in approved_components }\n    end\n  end",
        "tags": {
          "check_id__added": "C-38363r623552_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235144r638812_rule",
            "__new": "SV-235144r960963_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "Unused database components, MySQL Database Server 8.0 software, and\ndatabase objects must be removed.",
          "__new": "Unused database components, MySQL Database Server 8.0 software, and database objects must be removed."
        },
        "desc": {
          "__old": "Information systems are capable of providing a wide variety of\nfunctions and services. Some of the functions and services, provided by\ndefault, may not be necessary to support essential organizational operations\n(e.g., key missions, functions).\n\n    It is detrimental for software products to provide, or install by default,\nfunctionality exceeding requirements or mission objectives.\n\n    Database Management Systems (DBMSs) must adhere to the principles of least\nfunctionality by providing only essential capabilities.",
          "__new": "Information systems are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).\n\nIt is detrimental for software products to provide, or install by default, functionality exceeding requirements or mission objectives. \n\nDatabase Management Systems (DBMSs) must adhere to the principles of least functionality by providing only essential capabilities."
        },
        "descs": {
          "default__deleted": "Information systems are capable of providing a wide variety of\nfunctions and services. Some of the functions and services, provided by\ndefault, may not be necessary to support essential organizational operations\n(e.g., key missions, functions).\n\n    It is detrimental for software products to provide, or install by default,\nfunctionality exceeding requirements or mission objectives.\n\n    Database Management Systems (DBMSs) must adhere to the principles of least\nfunctionality by providing only essential capabilities.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the list of components and features installed with the MySQL\nDatabase Server 8.0.\n\n    List options MySQL Plugins/Components\n\n    SELECT * FROM information_schema.PLUGINS where plugin_library is NOT NULL;\n\n    Compare the feature listing against the required plugins listing.\n\n    If any plugins are installed, but are not required, this is a finding.\n\n    SELECT * FROM mysql.component;\n\n    Compare the feature listing against the required components listing.\n\n    If any components are installed, but are not required, this is a finding.",
            "__new": "Review the list of components and features installed with the MySQL Database Server 8.0.\n\nList options MySQL Plugins/Components\n\nSELECT * FROM information_schema.PLUGINS where plugin_library is NOT NULL;\n\nCompare the feature listing against the required plugins listing. \n\nIf any plugins are installed, but are not required, this is a finding.\n\nSELECT * FROM mysql.component;\n\nCompare the feature listing against the required components listing. \n\nIf any components are installed, but are not required, this is a finding."
          },
          "fix": {
            "__old": "Uninstall unused components or features that are installed and can be\nuninstalled. Remove any database objects and applications that are installed to\nsupport them.\n\n    After review of installed plugin components uninstall unused plugins. To do\nthis while the server is running using the UNINSTALL PLUGIN; command:\n\n    Remove any plugin that is loaded at startup from the my.cnf file.\n\n    For example - ddl_rewriter is discovered but are not being used. Follow\nthese removal instructions.\n    Remove this line from my.cnf:\n    plugin-load-add=ddl_rewriter.so\n\n    Remove any plugin that is not loaded at startup using the --plugin-load\nparameter from the my.cnf or on the command line.\n    UNINSTALL PLUGIN <plugin_name>;\n    UNINSTALL PLUGIN ddl_rewriter;\n\n    Remove any component not in use\n    UNINSTALL COMPONENT component_name [, component_name ] ...;\n\n    For example - The audit message emit function is not being called, the\ncomponent is not needed.\n    UNINSTALL COMPONENT \"file://component_audit_api_message_emit\";",
            "__new": "Uninstall unused components or features that are installed and can be uninstalled. Remove any database objects and applications that are installed to support them.\n\nAfter review of installed plugin components uninstall unused plugins. To do this while the server is running using the UNINSTALL PLUGIN; command: \n\nRemove any plugin that is loaded at startup from the my.cnf file.\n\nFor example - ddl_rewriter is discovered but are not being used. Follow these removal instructions.\nRemove this line from my.cnf:\nplugin-load-add=ddl_rewriter.so\n\nRemove any plugin that is not loaded at startup using the --plugin-load parameter from the my.cnf or on the command line. \nUNINSTALL PLUGIN <plugin_name>;\nUNINSTALL PLUGIN ddl_rewriter;\n\nRemove any component not in use\nUNINSTALL COMPONENT component_name [, component_name ] ...;\n\nFor example - The audit message emit function is not being called, the component is not needed.  \nUNINSTALL COMPONENT \"file://component_audit_api_message_emit\";"
          }
        }
      },
      "SV-235145": {
        "describe__deleted": "  approved_plugins = input('approved_plugins')\n  approved_components = input('approved_components')\n\n  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n   approved_plugins = input('approved_plugins')\n  else\n   approved_plugins = input('approved_plugins') + ['validate_password','RDS_PROCESSLIST','RDS_EVENTS_THREADS_WAITS_CURRENT']\n  end\n\n  query_plugins = %(\n  SELECT\n     * \n  FROM\n     information_schema.PLUGINS \n  where\n     plugin_library is NOT NULL;\n  )\n\n  describe 'Installed plugins' do\n    subject { sql_session.query(query_plugins).results.column('plugin_name') }\n    it { should be_in approved_plugins }\n  end\n\n\tif !input('aws_rds')\n    query_components = %(\n    SELECT\n      * \n    FROM\n      mysql.component;\n    )\n\n    describe 'Installed components' do\n      subject { sql_session.query(query_components).results.column('component_urn') }\n      it { should be_in approved_components }\n    end\n  end",
        "tags": {
          "check_id__added": "C-38364r623555_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235145r638812_rule",
            "__new": "SV-235145r960963_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "Unused database components which are integrated in the MySQL Database\nServer 8.0 and cannot be uninstalled must be disabled.",
          "__new": "Unused database components which are integrated in the MySQL Database Server 8.0 and cannot be uninstalled must be disabled."
        },
        "desc": {
          "__old": "Information systems are capable of providing a wide variety of\nfunctions and services. Some of the functions and services, provided by\ndefault, may not be necessary to support essential organizational operations\n(e.g., key missions, functions).\n\n    It is detrimental for software products to provide, or install by default,\nfunctionality exceeding requirements or mission objectives.\n\n    Database Management Systems (DBMSs) must adhere to the principles of least\nfunctionality by providing only essential capabilities.\n\n    Unused, unnecessary DBMS components increase the attack vector for the DBMS\nby introducing additional targets for attack. By minimizing the services and\napplications installed on the system, the number of potential vulnerabilities\nis reduced. Components of the system that are unused and cannot be uninstalled\nmust be disabled. The techniques available for disabling components will vary\nby DBMS product, OS and the nature of the component and may include DBMS\nconfiguration settings, OS service settings, OS file access security, and DBMS\nuser/group permissions.",
          "__new": "Information systems are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).  \n\nIt is detrimental for software products to provide, or install by default, functionality exceeding requirements or mission objectives.  \n\nDatabase Management Systems (DBMSs) must adhere to the principles of least functionality by providing only essential capabilities.\n\nUnused, unnecessary DBMS components increase the attack vector for the DBMS by introducing additional targets for attack. By minimizing the services and applications installed on the system, the number of potential vulnerabilities is reduced. Components of the system that are unused and cannot be uninstalled must be disabled. The techniques available for disabling components will vary by DBMS product, OS and the nature of the component and may include DBMS configuration settings, OS service settings, OS file access security, and DBMS user/group permissions."
        },
        "descs": {
          "default__deleted": "Information systems are capable of providing a wide variety of\nfunctions and services. Some of the functions and services, provided by\ndefault, may not be necessary to support essential organizational operations\n(e.g., key missions, functions).\n\n    It is detrimental for software products to provide, or install by default,\nfunctionality exceeding requirements or mission objectives.\n\n    Database Management Systems (DBMSs) must adhere to the principles of least\nfunctionality by providing only essential capabilities.\n\n    Unused, unnecessary DBMS components increase the attack vector for the DBMS\nby introducing additional targets for attack. By minimizing the services and\napplications installed on the system, the number of potential vulnerabilities\nis reduced. Components of the system that are unused and cannot be uninstalled\nmust be disabled. The techniques available for disabling components will vary\nby DBMS product, OS and the nature of the component and may include DBMS\nconfiguration settings, OS service settings, OS file access security, and DBMS\nuser/group permissions.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the list of components and features installed with the MySQL\nDatabase Server 8.0.\n\n    List options MySQL Plugins/Components\n\n    SELECT * FROM information_schema.PLUGINS where plugin_library is NOT NULL;\n\n    Compare the feature listing against the required plugins listing.\n\n    If any plugins are installed, but are not required, this is a finding.\n\n    SELECT * FROM mysql.component;\n\n    Compare the feature listing against the required components listing.\n\n    If any components are installed, but are not required, this is a finding.",
            "__new": "Review the list of components and features installed with the MySQL Database Server 8.0.\n\nList options MySQL Plugins/Components\n\nSELECT * FROM information_schema.PLUGINS where plugin_library is NOT NULL;\n\nCompare the feature listing against the required plugins listing. \n\nIf any plugins are installed, but are not required, this is a finding.\n\nSELECT * FROM mysql.component;\n\nCompare the feature listing against the required components listing. \n\nIf any components are installed, but are not required, this is a finding."
          },
          "fix": {
            "__old": "Uninstall unused components or features that are installed and can be\nuninstalled. Remove any database objects and applications that are installed to\nsupport them.\n\n    After review of installed plugin components uninstall unused plugins. To do\nthis while the server is running using the UNINSTALL PLUGIN; command:\n\n    Remove any plugin that is loaded at startup from the my.cnf file.\n\n    For example - ddl_rewriter is discovered but are not being used.  Follow\nthese removal instructions.\n    Remove this line from my.cnf:\n    plugin-load-add=ddl_rewriter.so\n\n    Remove any plugin that is not loaded at startup using the --plugin-load\nparameter from the my.cnf or on the command line.\n    UNINSTALL PLUGIN <plugin_name>;\n    UNINSTALL PLUGIN ddl_rewriter;\n\n    Remove any component not in use\n    UNINSTALL COMPONENT component_name [, component_name ] ...;\n\n    For example - The audit message emit function is not being called, the\ncomponent is not needed.\n    UNINSTALL COMPONENT \"file://component_audit_api_message_emit\";",
            "__new": "Uninstall unused components or features that are installed and can be uninstalled. Remove any database objects and applications that are installed to support them.\n\nAfter review of installed plugin components uninstall unused plugins. To do this while the server is running using the UNINSTALL PLUGIN; command: \n\nRemove any plugin that is loaded at startup from the my.cnf file.\n\nFor example - ddl_rewriter is discovered but are not being used.  Follow these removal instructions.\nRemove this line from my.cnf:\nplugin-load-add=ddl_rewriter.so\n\nRemove any plugin that is not loaded at startup using the --plugin-load parameter from the my.cnf or on the command line. \nUNINSTALL PLUGIN <plugin_name>;\nUNINSTALL PLUGIN ddl_rewriter;\n\nRemove any component not in use\nUNINSTALL COMPONENT component_name [, component_name ] ...;\n\nFor example - The audit message emit function is not being called, the component is not needed.  \nUNINSTALL COMPONENT \"file://component_audit_api_message_emit\";"
          }
        }
      },
      "SV-235146": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  mysql_ports = input('mysql_ports')\n  mysql_sockets = input('mysql_sockets')\n\n  query_ports = %(\n  SELECT\n     VARIABLE_NAME,\n     VARIABLE_VALUE \n  FROM\n     performance_schema.global_variables \n  WHERE\n     VARIABLE_NAME in \n     (\n        'port',\n        'mysqlx_port',\n        'admin_port'\n     );\n  )\n\n  query_sockets = %(\n  SELECT\n     VARIABLE_NAME,\n     VARIABLE_VALUE \n  FROM\n     performance_schema.global_variables \n  where\n     VARIABLE_NAME like '%pipe%' \n     or VARIABLE_NAME = 'socket' \n     or VARIABLE_NAME = 'mysqlx_socket';\n  )\n\n  sql_session.query(query_ports).results.rows.each do |row|\n    describe \"MySQL Port: #{row['variable_name']}\" do\n      subject { row['variable_value'] }\n      it { should cmp mysql_ports[row['variable_name']] }\n    end\n  end\n\n  sql_session.query(query_sockets).results.rows.each do |row|\n    describe \"MySQL socket: #{row['variable_name']}\" do\n      subject { row['variable_value'] }\n      it { should be_in mysql_sockets[row['variable_name']] }\n    end\n  end",
        "tags": {
          "check_id__added": "C-38365r623558_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235146r638812_rule",
            "__new": "SV-235146r960966_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must be configured to prohibit or\nrestrict the use of organization-defined functions, ports, protocols, and/or\nservices, as defined in the PPSM CAL and vulnerability assessments.",
          "__new": "The MySQL Database Server 8.0 must be configured to prohibit or restrict the use of organization-defined functions, ports, protocols, and/or services, as defined in the PPSM CAL and vulnerability assessments."
        },
        "desc": {
          "__old": "To prevent unauthorized connection of devices, unauthorized transfer\nof information, or unauthorized tunneling (i.e., embedding of data types within\ndata types), organizations must disable or restrict unused or unnecessary\nphysical and logical ports/protocols/services on information systems.\n\n    Applications are capable of providing a wide variety of functions and\nservices. Some of the functions and services provided by default may not be\nnecessary to support essential organizational operations. Additionally, it is\nsometimes convenient to provide multiple services from a single component\n(e.g., email and web services); however, doing so increases risk over limiting\nthe services provided by any one component.\n\n    To support the requirements and principles of least functionality, the\napplication must support the organizational requirements providing only\nessential capabilities and limiting the use of ports, protocols, and/or\nservices to only those required, authorized, and approved to conduct official\nbusiness or to address authorized quality of life issues.\n\n    Database Management Systems (DBMSs) using ports, protocols, and services\ndeemed unsafe are open to attack through those ports, protocols, and services.\nThis can allow unauthorized access to the database and through the database to\nother components of the information system.",
          "__new": "To prevent unauthorized connection of devices, unauthorized transfer of information, or unauthorized tunneling (i.e., embedding of data types within data types), organizations must disable or restrict unused or unnecessary physical and logical ports/protocols/services on information systems.\n\nApplications are capable of providing a wide variety of functions and services. Some of the functions and services provided by default may not be necessary to support essential organizational operations. Additionally, it is sometimes convenient to provide multiple services from a single component (e.g., email and web services); however, doing so increases risk over limiting the services provided by any one component. \n\nTo support the requirements and principles of least functionality, the application must support the organizational requirements providing only essential capabilities and limiting the use of ports, protocols, and/or services to only those required, authorized, and approved to conduct official business or to address authorized quality of life issues.\n\nDatabase Management Systems (DBMSs) using ports, protocols, and services deemed unsafe are open to attack through those ports, protocols, and services. This can allow unauthorized access to the database and through the database to other components of the information system."
        },
        "descs": {
          "default__deleted": "To prevent unauthorized connection of devices, unauthorized transfer\nof information, or unauthorized tunneling (i.e., embedding of data types within\ndata types), organizations must disable or restrict unused or unnecessary\nphysical and logical ports/protocols/services on information systems.\n\n    Applications are capable of providing a wide variety of functions and\nservices. Some of the functions and services provided by default may not be\nnecessary to support essential organizational operations. Additionally, it is\nsometimes convenient to provide multiple services from a single component\n(e.g., email and web services); however, doing so increases risk over limiting\nthe services provided by any one component.\n\n    To support the requirements and principles of least functionality, the\napplication must support the organizational requirements providing only\nessential capabilities and limiting the use of ports, protocols, and/or\nservices to only those required, authorized, and approved to conduct official\nbusiness or to address authorized quality of life issues.\n\n    Database Management Systems (DBMSs) using ports, protocols, and services\ndeemed unsafe are open to attack through those ports, protocols, and services.\nThis can allow unauthorized access to the database and through the database to\nother components of the information system.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the MySQL Database Server 8.0 settings and local documentation for\nfunctions, ports, protocols, and services that are not approved. If any are\nfound, this is a finding.\n\n    Run the following SQL to list ports:\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables\n    WHERE VARIABLE_NAME in ('port', 'mysqlx_port', 'admin_port');\n\n    The default ports for MySQL for organizational connects are:\n    Classic MySQL - 3306\n    MySQL X - 33060\n    MySQL Admin Port - 33062 (disabled by default)\n\n    If any these are in conflict with guidance, and not explained and approved\nin the system documentation, this is a finding.\n\n    Run the following to determine if a local socket/pipe are in use:\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables where\n    VARIABLE_NAME like '%pipe%' or  VARIABLE_NAME = 'socket' or  VARIABLE_NAME\n= 'mysqlx_socket';\n\n    Values for classic and xprotocol will be returned.\n    For example on Linux:\n    'socket','/tmp/mysql.sock'\n    'mysqlx_socket','/tmp/mysqlx.sock'\n     Windows\n    'named_pipe', 'ON'\n\n    If these are in conflict with guidance, and not explained and approved in\nthe system documentation, this is a finding.",
            "__new": "Review the MySQL Database Server 8.0 settings and local documentation for functions, ports, protocols, and services that are not approved. If any are found, this is a finding.\n\nRun the following SQL to list ports:\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables\nWHERE VARIABLE_NAME in ('port', 'mysqlx_port', 'admin_port');\n\nThe default ports for MySQL for organizational connects are: \nClassic MySQL - 3306 \nMySQL X - 33060\nMySQL Admin Port - 33062 (disabled by default)\n\nIf any these are in conflict with guidance, and not explained and approved in the system documentation, this is a finding.\n\nRun the following to determine if a local socket/pipe are in use:\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables where \nVARIABLE_NAME like '%pipe%' or  VARIABLE_NAME = 'socket' or  VARIABLE_NAME = 'mysqlx_socket';\n\nValues for classic and xprotocol will be returned.\nFor example on Linux:\n'socket','/tmp/mysql.sock'\n'mysqlx_socket','/tmp/mysqlx.sock'\n Windows\n'named_pipe', 'ON'\n\nIf these are in conflict with guidance, and not explained and approved in the system documentation, this is a finding."
          },
          "fix": {
            "__old": "Disable functions, ports, protocols, and services that are not approved.\n\n    Change mysql options related to network, ports, and protocols for the\nserver and additionally consider refining further at user account level.\n\n    vi my.cnf\n    [mysqld]\n    port=<port value>\n    admin_address=<addr>\n    admin_port=<port value>\n    mysqlx_port=<port value>\n    socket={file_name|pipe_name}\n\n    If admin_address is not defined then access via the admin port is disabled.\n\n    Additionally the X Plugin can be disabled at startup by either setting\nmysqlx=0 in the MySQL configuration file, or by passing in either --mysqlx=0 or\n--skip-mysqlx when starting the MySQL server.\n    Restart mysqld",
            "__new": "Disable functions, ports, protocols, and services that are not approved.\n\nChange mysql options related to network, ports, and protocols for the server and additionally consider refining further at user account level.\n\nvi my.cnf\n[mysqld]\nport=<port value>\nadmin_address=<addr>\nadmin_port=<port value>\nmysqlx_port=<port value>\nsocket={file_name|pipe_name}\n\nIf admin_address is not defined then access via the admin port is disabled. \n\nAdditionally the X Plugin can be disabled at startup by either setting mysqlx=0 in the MySQL configuration file, or by passing in either --mysqlx=0 or --skip-mysqlx when starting the MySQL server.\nRestart mysqld"
          }
        }
      },
      "SV-235147": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  query_auth_plugins = %(\n  SELECT\n     plugin_name,\n     plugin_status \n  FROM\n     information_schema.plugins \n  WHERE\n     plugin_name LIKE '%ldap%' \n     OR plugin_name LIKE '%pam%' \n     OR plugin_name LIKE '%authentication_windows %';\n  )\n\n  query_auth_variables = %(\n  SELECT\n     VARIABLE_NAME,\n     VARIABLE_VALUE \n  FROM\n     performance_schema.global_variables \n  WHERE\n     VARIABLE_NAME LIKE 'auth%' ;\n  )\n\n  query_users = %(\n  SELECT\n     user.Host,\n     user.user,\n     user.plugin,\n     user.authentication_string \n  from\n     mysql.user \n  where\n     plugin like 'auth%';\n  )\n\n  describe \"Manually review authentication plugins are configured as per guidance\\n#{sql_session.query(query_auth_plugins).output}\" do\n    skip \"Manually review authentication plugins are configured as per guidance\\n#{sql_session.query(query_auth_plugins).output}\"\n  end\n\n  describe \"Manually review authentication variables are configured as per guidance\\n#{sql_session.query(query_auth_variables).output}\" do\n    skip \"Manually review authentication variables are configured as per guidance\\n#{sql_session.query(query_auth_variables).output}\"\n  end\n\n  describe \"Manually review organizational users are uniquely identified and authenticated\\n#{sql_session.query(query_users).output}\" do\n    skip \"Manually review organizational users are uniquely identified and authenticated\\n#{sql_session.query(query_users).output}\"\n  end",
        "tags": {
          "check_id__added": "C-38366r623561_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235147r638812_rule",
            "__new": "SV-235147r960969_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must uniquely identify and authenticate\norganizational users (or processes acting on behalf of organizational users).",
          "__new": "The MySQL Database Server 8.0 must uniquely identify and authenticate organizational users (or processes acting on behalf of organizational users)."
        },
        "desc": {
          "__old": "To ensure accountability and prevent unauthenticated access,\norganizational users must be identified and authenticated to prevent potential\nmisuse and compromise of the system.\n\n    Organizational users include organizational employees or individuals the\norganization deems to have equivalent status of employees (e.g., contractors).\nOrganizational users (and any processes acting on behalf of users) must be\nuniquely identified and authenticated for all accesses, except the following:\n\n    (i) Accesses explicitly identified and documented by the organization.\nOrganizations document specific user actions that can be performed on the\ninformation system without identification or authentication; and\n    (ii) Accesses that occur through authorized use of group authenticators\nwithout individual authentication. Organizations may require unique\nidentification of individuals in group accounts (e.g., shared privilege\naccounts) or for detailed accountability of individual activity.",
          "__new": "To ensure accountability and prevent unauthenticated access, organizational users must be identified and authenticated to prevent potential misuse and compromise of the system. \n\nOrganizational users include organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors). Organizational users (and any processes acting on behalf of users) must be uniquely identified and authenticated for all accesses, except the following:\n\n(i) Accesses explicitly identified and documented by the organization. Organizations document specific user actions that can be performed on the information system without identification or authentication; and \n(ii) Accesses that occur through authorized use of group authenticators without individual authentication. Organizations may require unique identification of individuals in group accounts (e.g., shared privilege accounts) or for detailed accountability of individual activity."
        },
        "descs": {
          "default__deleted": "To ensure accountability and prevent unauthenticated access,\norganizational users must be identified and authenticated to prevent potential\nmisuse and compromise of the system.\n\n    Organizational users include organizational employees or individuals the\norganization deems to have equivalent status of employees (e.g., contractors).\nOrganizational users (and any processes acting on behalf of users) must be\nuniquely identified and authenticated for all accesses, except the following:\n\n    (i) Accesses explicitly identified and documented by the organization.\nOrganizations document specific user actions that can be performed on the\ninformation system without identification or authentication; and\n    (ii) Accesses that occur through authorized use of group authenticators\nwithout individual authentication. Organizations may require unique\nidentification of individuals in group accounts (e.g., shared privilege\naccounts) or for detailed accountability of individual activity.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review MySQL Database Server 8.0 settings to determine whether\norganizational users are uniquely identified and authenticated when logging\non/connecting to the system.\n\n    Using SQL, search for external authentication plugins:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE '%ldap%' OR PLUGIN_NAME LIKE '%ldap%' OR\nPLUGIN_NAME LIKE '%pam%';\n\n    This listing will show what is enabled.\n\n    In addition to MySQL password-based internal accounts, there is also\nsupport for external accounts:\n    Linux PAM (Pluggable Authentication Modules)\n    Windows Active Directory (only for Windows MySQL servers)\n    Native LDAP\n    auth_socket\n\n    Review the configuration of the plugin; for link of accounts and\npermissions to organizational level, run this SQL:\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables\n    WHERE VARIABLE_NAME LIKE 'auth%' ;\n\n    This will show external configuration setup for authentication using an\norganizational authentication source.\n\n    Review users using organizational authentication.  Review the\n\"authentication_string\" for proper mapping:\n    SELECT `user`.`Host`,\n        `user`.`user`,\n        `user`.`plugin`,\n        `user`.`authentication_string`\n        from mysql.user where plugin like 'auth%';\n\n    If organizational users are not uniquely identified and authenticated, this\nis a finding.\n\n    If accounts are determined to be shared, determine if they are directly\naccessible to end users. If so, this is a finding.",
            "__new": "Review MySQL Database Server 8.0 settings to determine whether organizational users are uniquely identified and authenticated when logging on/connecting to the system. \n\nUsing SQL, search for external authentication plugins:\nSELECT PLUGIN_NAME, PLUGIN_STATUS\n       FROM INFORMATION_SCHEMA.PLUGINS\n       WHERE PLUGIN_NAME LIKE '%ldap%' OR PLUGIN_NAME LIKE '%ldap%' OR PLUGIN_NAME LIKE '%pam%';\n\nThis listing will show what is enabled. \n\nIn addition to MySQL password-based internal accounts, there is also support for external accounts:\nLinux PAM (Pluggable Authentication Modules)\nWindows Active Directory (only for Windows MySQL servers)\nNative LDAP \nauth_socket\n\nReview the configuration of the plugin; for link of accounts and permissions to organizational level, run this SQL:\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables\nWHERE VARIABLE_NAME LIKE 'auth%' ;\n\nThis will show external configuration setup for authentication using an organizational authentication source.\n\nReview users using organizational authentication.  Review the \"authentication_string\" for proper mapping:\nSELECT `user`.`Host`,\n    `user`.`user`,\n    `user`.`plugin`,\n    `user`.`authentication_string`\n    from mysql.user where plugin like 'auth%';\n\nIf organizational users are not uniquely identified and authenticated, this is a finding.\n\nIf accounts are determined to be shared, determine if they are directly accessible to end users. If so, this is a finding."
          },
          "fix": {
            "__old": "Configure MySQL Database Server 8.0 settings to uniquely identify and\nauthenticate all organizational users who log on/connect to the system.\n\n    Remove user-accessible shared accounts and use individual user names.\n\n    Configure applications to ensure successful individual authentication prior\nto shared account access.\n\n    Ensure each user's identity is received and used in audit data in all\nrelevant circumstances.\n\n    Install appropriate auth plugin, for example LDAP.\n    INSTALL PLUGIN authentication_ldap_sasl\n      SONAME 'authentication_ldap_sasl.so';\n    INSTALL PLUGIN authentication_ldap_simple\n      SONAME 'authentication_ldap_simple.so';\n\n    Configure\n    SET PERSIST authentication_ldap_sasl_server_host='127.0.0.1';\n    SET PERSIST authentication_ldap_sasl_bind_base_dn='dc=example,dc=com';\n    SET PERSIST authentication_ldap_simple_server_host='127.0.0.1';\n    SET PERSIST authentication_ldap_simple_bind_base_dn='dc=example,dc=com';\n\n    Create users with proper organizational mapping, for example:\n    CREATE USER 'betsy'@'localhost'\n      IDENTIFIED WITH authentication_ldap_simple\n      BY 'uid=betsy_ldap,ou=People,dc=example,dc=com';\n\n    Assign appropriate roles and grants.",
            "__new": "Configure MySQL Database Server 8.0 settings to uniquely identify and authenticate all organizational users who log on/connect to the system.\n\nRemove user-accessible shared accounts and use individual user names. \n\nConfigure applications to ensure successful individual authentication prior to shared account access. \n\nEnsure each user's identity is received and used in audit data in all relevant circumstances.\n\nInstall appropriate auth plugin, for example LDAP.\nINSTALL PLUGIN authentication_ldap_sasl\n  SONAME 'authentication_ldap_sasl.so';\nINSTALL PLUGIN authentication_ldap_simple\n  SONAME 'authentication_ldap_simple.so';\n\nConfigure\nSET PERSIST authentication_ldap_sasl_server_host='127.0.0.1';\nSET PERSIST authentication_ldap_sasl_bind_base_dn='dc=example,dc=com';\nSET PERSIST authentication_ldap_simple_server_host='127.0.0.1';\nSET PERSIST authentication_ldap_simple_bind_base_dn='dc=example,dc=com';\n\nCreate users with proper organizational mapping, for example:\nCREATE USER 'betsy'@'localhost'\n  IDENTIFIED WITH authentication_ldap_simple\n  BY 'uid=betsy_ldap,ou=People,dc=example,dc=com';\n\nAssign appropriate roles and grants."
          }
        }
      },
      "SV-235148": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  query_ssl_params = %(\n  SELECT @@ssl_fips_mode;\n  )\n\n  ssl_params = sql_session.query(query_ssl_params).results\n\n  if !input('aws_rds')\n    \n    ssl_fips_mode = ssl_params.column('@@ssl_fips_mode').join\n    describe '@@ssl_fips_mode' do\n      it \"should be ON or STRICT. Got #{ssl_fips_mode}\" do\n        expect(ssl_fips_mode).to be_in(['ON', 'STRICT'])\n      end\n    end\n\n  else\n    \n    impact 0.0\n    describe 'Not applicable since ssl_fips_mode is set to 0 (OFF) and cannot be configured in AWS RDS' do\n      skip 'Not applicable since ssl_fips_mode is set to 0 (OFF) and cannot be configured in AWS RDS'\n    end\n    \n  end    \n    ",
        "tags": {
          "check_id__added": "C-38367r863349_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235148r638812_rule",
            "__new": "SV-235148r961050_rule"
          },
          "fix_id": {
            "__old": "F-38330r623565_fix",
            "__new": "F-38330r863350_fix"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must use NIST FIPS 140-2 validated\ncryptographic modules for cryptographic operations.",
          "__new": "The MySQL Database Server 8.0 must use NIST FIPS 140-2 or 140-3 validated cryptographic modules for cryptographic operations."
        },
        "desc": {
          "__old": "Use of weak or not validated cryptographic algorithms undermines the\npurposes of utilizing encryption and digital signatures to protect data. Weak\nalgorithms can be easily broken and not validated cryptographic modules may not\nimplement algorithms correctly. Unapproved cryptographic modules or algorithms\nshould not be relied on for authentication, confidentiality, or integrity. Weak\ncryptography could allow an attacker to gain access to and modify data stored\nin the database as well as the administration settings of the Database\nManagement System (DBMS).\n\n    Applications, including DBMSs, utilizing cryptography are required to use\napproved NIST FIPS 140-2 validated cryptographic modules that meet the\nrequirements of applicable federal laws, Executive Orders, directives,\npolicies, regulations, standards, and guidance.\n\n    The security functions validated as part of FIPS 140-2 for cryptographic\nmodules are described in FIPS 140-2 Annex A.\n\n    NSA Type-X (where X=1, 2, 3, 4) products are NSA-certified, hardware-based\nencryption modules.",
          "__new": "Use of weak or not validated cryptographic algorithms undermines the purposes of utilizing encryption and digital signatures to protect data. Weak algorithms can be easily broken and not validated cryptographic modules may not implement algorithms correctly. Unapproved cryptographic modules or algorithms should not be relied on for authentication, confidentiality, or integrity. Weak cryptography could allow an attacker to gain access to and modify data stored in the database as well as the administration settings of the Database Management System (DBMS).\n\nApplications, including DBMSs, utilizing cryptography are required to use approved NIST FIPS 140-2 or 140-3 validated cryptographic modules that meet the requirements of applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance.  \n\nNSA Type-X (where X=1, 2, 3, 4) products are NSA-certified, hardware-based encryption modules.\n\nThe standard for validating cryptographic modules will transition to the NIST FIPS 140-3 publication.\n\nFIPS 140-2 modules can remain active for up to five years after validation or until September 21, 2026, when the FIPS 140-2 validations will be moved to the historical list. Even on the historical list, CMVP supports the purchase and use of these modules for existing systems. While Federal Agencies decide when they move to FIPS 140-3 only modules, purchasers are reminded that for several years there may be a limited selection of FIPS 140-3 modules from which to choose. CMVP recommends purchasers consider all modules that appear on the Validated Modules Search Page:\nhttps://csrc.nist.gov/projects/cryptographic-module-validation-program/validated-modules\n\nMore information on the FIPS 140-3 transition can be found here: \nhttps://csrc.nist.gov/Projects/fips-140-3-transition-effort/"
        },
        "descs": {
          "default__deleted": "Use of weak or not validated cryptographic algorithms undermines the\npurposes of utilizing encryption and digital signatures to protect data. Weak\nalgorithms can be easily broken and not validated cryptographic modules may not\nimplement algorithms correctly. Unapproved cryptographic modules or algorithms\nshould not be relied on for authentication, confidentiality, or integrity. Weak\ncryptography could allow an attacker to gain access to and modify data stored\nin the database as well as the administration settings of the Database\nManagement System (DBMS).\n\n    Applications, including DBMSs, utilizing cryptography are required to use\napproved NIST FIPS 140-2 validated cryptographic modules that meet the\nrequirements of applicable federal laws, Executive Orders, directives,\npolicies, regulations, standards, and guidance.\n\n    The security functions validated as part of FIPS 140-2 for cryptographic\nmodules are described in FIPS 140-2 Annex A.\n\n    NSA Type-X (where X=1, 2, 3, 4) products are NSA-certified, hardware-based\nencryption modules.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review DBMS configuration to verify it is using NIST FIPS 140-2 validated\ncryptographic modules for cryptographic operations.\n\n    To check for FIPS validated cryptographic modules for all operations, run\nthis script in the database:\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables where variable_name =\n'ssl_fips_mode';\n\n    The result will be either \"ON\" or \"STRICT\". If not, then NIST FIPS\n140-2 validated modules are not being used, and this is a finding.",
            "__new": "Review DBMS configuration to verify it is using NIST FIPS validated cryptographic modules for cryptographic operations.\n\nTo check for FIPS validated cryptographic modules for all operations, run this script in the database: \nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables where variable_name = 'ssl_fips_mode';\n\nThe result will be either \"ON\" or \"STRICT\". If not, then NIST FIPS validated modules are not being used, and this is a finding."
          },
          "fix": {
            "__old": "Utilize NIST FIPS 140-2 validated cryptographic modules for all\ncryptographic operations.\n    See Use MySQL Server OpenSSL FIPS mode. See\nhttps://dev.mysql.com/doc/refman/8.0/en/fips-mode.html\n\n    Turn on MySQL FIPS mode and restart mysqld\n    Edit my.cnf\n    [mysqld]\n    ssl_fips_mode=ON\n\n    or\n    [mysqld]\n    ssl_fips_mode=STRICT\n\n    ON: Enable FIPS mode.\n    STRICT: Enable “strict” FIPS mode.",
            "__new": "Utilize NIST FIPS validated cryptographic modules for all cryptographic operations.\nSee Use MySQL Server OpenSSL FIPS mode. See https://dev.mysql.com/doc/refman/8.0/en/fips-mode.html\n\nTurn on MySQL FIPS mode and restart mysqld\nEdit my.cnf\n[mysqld]\nssl_fips_mode=ON\n\nor\n[mysqld]\nssl_fips_mode=STRICT\n\nON: Enable FIPS mode.\nSTRICT: Enable “strict” FIPS mode."
          }
        }
      },
      "SV-235149": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  query_accounts = %(\n    SELECT\n       host,\n       user \n    FROM\n       mysql.user \n    WHERE\n       user not in \n       (\n          'mysql.infoschema',\n          'mysql.session',\n          'mysql.sys'\n       );\n  )\n\n  accounts = sql_session.query(query_accounts).output\n\n  describe \"Manually review MySQL accounts and determine if any are shared accounts and \n  that they are compliant with the specified requirements.\\n#{accounts}\" do\n    skip \"Manually review MySQL accounts and determine if any are shared accounts and \n    that they are compliant with the specified requirements.\\n#{accounts}\"\n  end",
        "tags": {
          "check_id__added": "C-38368r623567_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235149r638812_rule",
            "__new": "SV-235149r961053_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must uniquely identify and authenticate\nnon-organizational users (or processes acting on behalf of non-organizational\nusers).",
          "__new": "The MySQL Database Server 8.0 must uniquely identify and authenticate non-organizational users (or processes acting on behalf of non-organizational users)."
        },
        "desc": {
          "__old": "Non-organizational users include all information system users other\nthan organizational users, which include organizational employees or\nindividuals the organization deems to have equivalent status of employees\n(e.g., contractors, guest researchers, individuals from allied nations).\n\n    Non-organizational users will be uniquely identified and authenticated for\nall accesses other than those accesses explicitly identified and documented by\nthe organization when related to the use of anonymous access, such as accessing\na web server.\n\n    Accordingly, a risk assessment is used in determining the authentication\nneeds of the organization.\n\n    Scalability, practicality, and security are simultaneously considered in\nbalancing the need to ensure ease of use for access to federal information and\ninformation systems with the need to protect and adequately mitigate risk to\norganizational operations, organizational assets, individuals, other\norganizations, and the Nation.",
          "__new": "Non-organizational users include all information system users other than organizational users, which include organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors, guest researchers, individuals from allied nations). \n\nNon-organizational users will be uniquely identified and authenticated for all accesses other than those accesses explicitly identified and documented by the organization when related to the use of anonymous access, such as accessing a web server.  \n\nAccordingly, a risk assessment is used in determining the authentication needs of the organization. \n\nScalability, practicality, and security are simultaneously considered in balancing the need to ensure ease of use for access to federal information and information systems with the need to protect and adequately mitigate risk to organizational operations, organizational assets, individuals, other organizations, and the Nation."
        },
        "descs": {
          "default__deleted": "Non-organizational users include all information system users other\nthan organizational users, which include organizational employees or\nindividuals the organization deems to have equivalent status of employees\n(e.g., contractors, guest researchers, individuals from allied nations).\n\n    Non-organizational users will be uniquely identified and authenticated for\nall accesses other than those accesses explicitly identified and documented by\nthe organization when related to the use of anonymous access, such as accessing\na web server.\n\n    Accordingly, a risk assessment is used in determining the authentication\nneeds of the organization.\n\n    Scalability, practicality, and security are simultaneously considered in\nbalancing the need to ensure ease of use for access to federal information and\ninformation systems with the need to protect and adequately mitigate risk to\norganizational operations, organizational assets, individuals, other\norganizations, and the Nation.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review MySQL Database Server 8.0 settings to determine if users uniquely\nidentify and authenticate all non-organizational users who log on to the system.\n\n    select host, user FROM mysql.user WHERE user not in ('mysql.infoschema',\n'mysql.session', 'mysql.sys');\n\n    If accounts are determined to be shared, determine if individuals are first\nindividually authenticated.\n\n    If the documentation indicates that this is a public-facing, read-only\n(from the point of view of public users) database that does not require\nindividual authentication, this is not a finding.\n\n    If non-organizational users are not uniquely identified and authenticated,\nthis is a finding.",
            "__new": "Review MySQL Database Server 8.0 settings to determine if users uniquely identify and authenticate all non-organizational users who log on to the system.\n\nselect host, user FROM mysql.user WHERE user not in ('mysql.infoschema', 'mysql.session', 'mysql.sys');\n\nIf accounts are determined to be shared, determine if individuals are first individually authenticated. \n\nIf the documentation indicates that this is a public-facing, read-only (from the point of view of public users) database that does not require individual authentication, this is not a finding. \n\nIf non-organizational users are not uniquely identified and authenticated, this is a finding."
          },
          "fix": {
            "__old": "Configure MySQL Database Server 8.0 settings to uniquely identify and\nauthenticate all non-organizational users who log on to the system.\n\n    Ensure all logins are uniquely identifiable and authenticate all\nnon-organizational users who log on to the system. This likely would be done by\nensuring mapping of MySQL accounts to individual accounts. Verify server\ndocumentation to ensure accounts are documented and unique.",
            "__new": "Configure MySQL Database Server 8.0 settings to uniquely identify and authenticate all non-organizational users who log on to the system.\n\nEnsure all logins are uniquely identifiable and authenticate all non-organizational users who log on to the system. This likely would be done by ensuring mapping of MySQL accounts to individual accounts. Verify server documentation to ensure accounts are documented and unique."
          }
        }
      },
      "SV-235150": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    mysql_administrative_users = input('mysql_administrative_users')\n  else\n    mysql_administrative_users = input('mysql_administrative_users') + ['rdsadmin']\n  end\n\n  query_accounts = %(\n  SELECT\n     user,\n     host,\n     'Global Priv',\n     Select_priv,\n     Insert_priv,\n     Update_priv,\n     Delete_priv,\n     Create_priv,\n     Drop_priv,\n     Reload_priv,\n     Shutdown_priv,\n     Process_priv,\n     File_priv,\n     Grant_priv,\n     References_priv,\n     Index_priv,\n     Alter_priv,\n     Show_db_priv,\n     Super_priv,\n     Create_tmp_table_priv,\n     Lock_tables_priv,\n     Execute_priv,\n     Repl_slave_priv,\n     Repl_client_priv,\n     Create_view_priv,\n     Show_view_priv,\n     Create_routine_priv,\n     Alter_routine_priv,\n     Create_user_priv,\n     Event_priv,\n     Trigger_priv,\n     Create_tablespace_priv,\n     Create_role_priv,\n     Drop_role_priv \n  FROM\n     mysql.user \n  WHERE\n     'Y' IN \n     (\n        Select_priv,\n        Insert_priv,\n        Update_priv,\n        Delete_priv,\n        Create_priv,\n        Drop_priv,\n        Reload_priv,\n        Shutdown_priv,\n        Process_priv,\n        File_priv,\n        Grant_priv,\n        References_priv,\n        Index_priv,\n        Alter_priv,\n        Show_db_priv,\n        Super_priv,\n        Create_tmp_table_priv,\n        Lock_tables_priv,\n        Execute_priv,\n        Repl_slave_priv,\n        Repl_client_priv,\n        Create_view_priv,\n        Show_view_priv,\n        Create_routine_priv,\n        Alter_routine_priv,\n        Create_user_priv,\n        Event_priv,\n        Trigger_priv,\n        Create_tablespace_priv,\n        Create_role_priv,\n        Drop_role_priv\n     )\n     AND user not in \n     (\n        'mysql.infoschema',\n        'mysql.session'\n     );\n     )\n\n  describe 'List of users with Admin privileges' do\n    subject { sql_session.query(query_accounts).results.column('user') }\n    it { should be_in mysql_administrative_users }\n  end",
        "tags": {
          "check_id__added": "C-38369r623570_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235150r638812_rule",
            "__new": "SV-235150r961095_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must separate user functionality\n(including user interface services) from database management functionality.",
          "__new": "The MySQL Database Server 8.0 must separate user functionality (including user interface services) from database management functionality."
        },
        "desc": {
          "__old": "Information system management functionality includes functions\nnecessary to administer databases, network components, workstations, or\nservers, and typically requires privileged user access.\n\n    The separation of user functionality from information system management\nfunctionality is either physical or logical and is accomplished by using\ndifferent computers, different central processing units, different instances of\nthe operating system, different network addresses, combinations of these\nmethods, or other methods, as appropriate.\n\n    An example of this type of separation is observed in web administrative\ninterfaces that use separate authentication methods for users of any other\ninformation system resources.\n\n    This may include isolating the administrative interface on a different\ndomain and with additional access controls.\n\n    If administrative functionality or information regarding DBMS management is\npresented on an interface available for users, information on DBMS settings may\nbe inadvertently made available to the user.",
          "__new": "Information system management functionality includes functions necessary to administer databases, network components, workstations, or servers, and typically requires privileged user access. \n\nThe separation of user functionality from information system management functionality is either physical or logical and is accomplished by using different computers, different central processing units, different instances of the operating system, different network addresses, combinations of these methods, or other methods, as appropriate. \n\nAn example of this type of separation is observed in web administrative interfaces that use separate authentication methods for users of any other information system resources. \n\nThis may include isolating the administrative interface on a different domain and with additional access controls.\n\nIf administrative functionality or information regarding DBMS management is presented on an interface available for users, information on DBMS settings may be inadvertently made available to the user."
        },
        "descs": {
          "default__deleted": "Information system management functionality includes functions\nnecessary to administer databases, network components, workstations, or\nservers, and typically requires privileged user access.\n\n    The separation of user functionality from information system management\nfunctionality is either physical or logical and is accomplished by using\ndifferent computers, different central processing units, different instances of\nthe operating system, different network addresses, combinations of these\nmethods, or other methods, as appropriate.\n\n    An example of this type of separation is observed in web administrative\ninterfaces that use separate authentication methods for users of any other\ninformation system resources.\n\n    This may include isolating the administrative interface on a different\ndomain and with additional access controls.\n\n    If administrative functionality or information regarding DBMS management is\npresented on an interface available for users, information on DBMS settings may\nbe inadvertently made available to the user.",
          "rationale__deleted": "",
          "check": {
            "__old": "Check MySQL settings and documentation to verify that administrative\nfunctionality is separate from user functionality.\n\n    As Database Administrator (DBA) (“root\"), list all roles and permissions\nfor the database:\n\n    > mysql -u root -p\n\n    SELECT user,host, 'Global Priv', Select_priv, Insert_priv, Update_priv,\nDelete_priv, Create_priv,\n        Drop_priv, Reload_priv, Shutdown_priv, Process_priv, File_priv,\n        Grant_priv, References_priv, Index_priv, Alter_priv, Show_db_priv,\n        Super_priv, Create_tmp_table_priv, Lock_tables_priv, Execute_priv,\n        Repl_slave_priv, Repl_client_priv, Create_view_priv, Show_view_priv,\n        Create_routine_priv, Alter_routine_priv, Create_user_priv,\n        Event_priv, Trigger_priv, Create_tablespace_priv, Create_role_priv,\n        Drop_role_priv\n      FROM mysql.user WHERE 'Y' IN\n        (Select_priv, Insert_priv, Update_priv, Delete_priv, Create_priv,\n        Drop_priv, Reload_priv, Shutdown_priv, Process_priv, File_priv,\n        Grant_priv, References_priv, Index_priv, Alter_priv, Show_db_priv,\n        Super_priv, Create_tmp_table_priv, Lock_tables_priv, Execute_priv,\n        Repl_slave_priv, Repl_client_priv, Create_view_priv, Show_view_priv,\n        Create_routine_priv, Alter_routine_priv, Create_user_priv,\n        Event_priv, Trigger_priv, Create_tablespace_priv, Create_role_priv,\n        Drop_role_priv)\n    AND user not in ('mysql.infoschema', 'mysql.session');\n\n    If any non-administrative role has permissions, other than mysql.infoschema\nand mysql.session, this is a finding.\n\n    If administrator and general user functionality are not separated, this is\na finding.",
            "__new": "Check MySQL settings and documentation to verify that administrative functionality is separate from user functionality.\n\nAs Database Administrator (DBA) (“root\"), list all roles and permissions for the database:\n\n> mysql -u root -p\n\nSELECT user,host, 'Global Priv', Select_priv, Insert_priv, Update_priv, Delete_priv, Create_priv,\n    Drop_priv, Reload_priv, Shutdown_priv, Process_priv, File_priv,\n    Grant_priv, References_priv, Index_priv, Alter_priv, Show_db_priv,\n    Super_priv, Create_tmp_table_priv, Lock_tables_priv, Execute_priv,\n    Repl_slave_priv, Repl_client_priv, Create_view_priv, Show_view_priv,\n    Create_routine_priv, Alter_routine_priv, Create_user_priv,\n    Event_priv, Trigger_priv, Create_tablespace_priv, Create_role_priv,\n    Drop_role_priv \n  FROM mysql.user WHERE 'Y' IN\n    (Select_priv, Insert_priv, Update_priv, Delete_priv, Create_priv,\n    Drop_priv, Reload_priv, Shutdown_priv, Process_priv, File_priv,\n    Grant_priv, References_priv, Index_priv, Alter_priv, Show_db_priv,\n    Super_priv, Create_tmp_table_priv, Lock_tables_priv, Execute_priv,\n    Repl_slave_priv, Repl_client_priv, Create_view_priv, Show_view_priv,\n    Create_routine_priv, Alter_routine_priv, Create_user_priv,\n    Event_priv, Trigger_priv, Create_tablespace_priv, Create_role_priv,\n    Drop_role_priv)\nAND user not in ('mysql.infoschema', 'mysql.session');\n\nIf any non-administrative role has permissions, other than mysql.infoschema and mysql.session, this is a finding.\n\nIf administrator and general user functionality are not separated, this is a finding."
          },
          "fix": {
            "__old": "Configure MySQL Database Server 8.0 to separate database administration and\ngeneral user functionality.\n\n    Revoke or remove users with admin and user mixed permissions.\n\n    Review MySQL documentation related to access controls for users and admins:\nhttps://dev.mysql.com/doc/refman/8.0/en/access-control.html.",
            "__new": "Configure MySQL Database Server 8.0 to separate database administration and general user functionality.\n\nRevoke or remove users with admin and user mixed permissions.\n\nReview MySQL documentation related to access controls for users and admins: https://dev.mysql.com/doc/refman/8.0/en/access-control.html."
          }
        }
      },
      "SV-235151": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  query_schemas = %(\n  SELECT\n     SCHEMATA.SCHEMA_NAME \n  FROM\n     information_schema.SCHEMATA \n  where\n     SCHEMA_NAME not in \n     (\n        'mysql',\n        'information_schema',\n        'performance_schema',\n        'sys'\n     );\n  )\n\n  schemas = sql_session.query(query_schemas).output\n\n  describe \"Manually review the database structure to determine where security-related\nfunctionality is stored.\n\n    If security-related database objects or code are not kept separate, this is\na finding.\\n#{schemas}\" do\n    skip \"Manually review the database structure to determine where security-related\n    functionality is stored.\n    \n        If security-related database objects or code are not kept separate, this is\n    a finding.\\n#{schemas}\"\n  end",
        "tags": {
          "check_id__added": "C-38370r623573_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235151r638812_rule",
            "__new": "SV-235151r961131_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must isolate security functions from\nnon-security functions.",
          "__new": "The MySQL Database Server 8.0 must isolate security functions from non-security functions."
        },
        "desc": {
          "__old": "An isolation boundary provides access control and protects the\nintegrity of the hardware, software, and firmware that perform security\nfunctions.\n\n    Security functions are the hardware, software, and/or firmware of the\ninformation system responsible for enforcing the system security policy and\nsupporting the isolation of code and data on which the protection is based.\n\n    Developers and implementers can increase the assurance in security\nfunctions by employing well-defined security policy models; structured,\ndisciplined, and rigorous hardware and software development techniques; and\nsound system/security engineering principles.\n\n    Database Management Systems typically separate security functionality from\nnon-security functionality via separate databases or schemas. Database objects\nor code implementing security functionality should not be commingled with\nobjects or code implementing application logic. When security and non-security\nfunctionality are commingled, users who have access to non-security\nfunctionality may be able to access security functionality.\n\n    The mysql database is the system database. It contains tables that store\ninformation required by the MySQL server as it runs.\n\n    The INFORMATION_SCHEMA provides access to database metadata, information\nabout the MySQL server such as the name of a database or table, the data type\nof a column, or access privileges. Other terms sometimes used for this\ninformation are data dictionary and system catalog.\n\n    The MySQL Performance Schema is a feature for monitoring MySQL Server\nexecution at a low level. The Performance Schema has these characteristics: The\nPerformance Schema provides a way to inspect internal execution of the server\nat runtime. It is implemented using the PERFORMANCE_SCHEMA storage engine and\nthe performance_schema database. The PERFORMANCE_SCHEMA storage engine collects\nevent data using “instrumentation points” in server source code. Tables in the\nPerformance Schema are in-memory tables that use no persistent on-disk storage.\n\n    MySQL 8.0 includes the sys schema, a set of objects that helps DBAs and\ndevelopers interpret data collected by the Performance Schema. The sys schema\nobjects can be used for typical tuning and diagnosis use cases.",
          "__new": "An isolation boundary provides access control and protects the integrity of the hardware, software, and firmware that perform security functions. \n\nSecurity functions are the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based.\n\nDevelopers and implementers can increase the assurance in security functions by employing well-defined security policy models; structured, disciplined, and rigorous hardware and software development techniques; and sound system/security engineering principles. \n\nDatabase Management Systems typically separate security functionality from non-security functionality via separate databases or schemas. Database objects or code implementing security functionality should not be commingled with objects or code implementing application logic. When security and non-security functionality are commingled, users who have access to non-security functionality may be able to access security functionality.\n\nThe mysql database is the system database. It contains tables that store information required by the MySQL server as it runs.\n\nThe INFORMATION_SCHEMA provides access to database metadata, information about the MySQL server such as the name of a database or table, the data type of a column, or access privileges. Other terms sometimes used for this information are data dictionary and system catalog.\n\nThe MySQL Performance Schema is a feature for monitoring MySQL Server execution at a low level. The Performance Schema has these characteristics: The Performance Schema provides a way to inspect internal execution of the server at runtime. It is implemented using the PERFORMANCE_SCHEMA storage engine and the performance_schema database. The PERFORMANCE_SCHEMA storage engine collects event data using “instrumentation points” in server source code. Tables in the Performance Schema are in-memory tables that use no persistent on-disk storage.\n\nMySQL 8.0 includes the sys schema, a set of objects that helps DBAs and developers interpret data collected by the Performance Schema. The sys schema objects can be used for typical tuning and diagnosis use cases."
        },
        "descs": {
          "default__deleted": "An isolation boundary provides access control and protects the\nintegrity of the hardware, software, and firmware that perform security\nfunctions.\n\n    Security functions are the hardware, software, and/or firmware of the\ninformation system responsible for enforcing the system security policy and\nsupporting the isolation of code and data on which the protection is based.\n\n    Developers and implementers can increase the assurance in security\nfunctions by employing well-defined security policy models; structured,\ndisciplined, and rigorous hardware and software development techniques; and\nsound system/security engineering principles.\n\n    Database Management Systems typically separate security functionality from\nnon-security functionality via separate databases or schemas. Database objects\nor code implementing security functionality should not be commingled with\nobjects or code implementing application logic. When security and non-security\nfunctionality are commingled, users who have access to non-security\nfunctionality may be able to access security functionality.\n\n    The mysql database is the system database. It contains tables that store\ninformation required by the MySQL server as it runs.\n\n    The INFORMATION_SCHEMA provides access to database metadata, information\nabout the MySQL server such as the name of a database or table, the data type\nof a column, or access privileges. Other terms sometimes used for this\ninformation are data dictionary and system catalog.\n\n    The MySQL Performance Schema is a feature for monitoring MySQL Server\nexecution at a low level. The Performance Schema has these characteristics: The\nPerformance Schema provides a way to inspect internal execution of the server\nat runtime. It is implemented using the PERFORMANCE_SCHEMA storage engine and\nthe performance_schema database. The PERFORMANCE_SCHEMA storage engine collects\nevent data using “instrumentation points” in server source code. Tables in the\nPerformance Schema are in-memory tables that use no persistent on-disk storage.\n\n    MySQL 8.0 includes the sys schema, a set of objects that helps DBAs and\ndevelopers interpret data collected by the Performance Schema. The sys schema\nobjects can be used for typical tuning and diagnosis use cases.",
          "rationale__deleted": "",
          "check": {
            "__old": "Determine elements of security functionality (lists of permissions,\nadditional authentication information, stored procedures, application specific\nauditing, etc.) which are being housed inside the MySQL server.\n\n    For any elements found, check MySQL to determine if these objects or code\nimplementing security functionality are located in a separate security domain,\nsuch as a separate database, schema, or table created specifically for security\nfunctionality.\n\n    In more generic data terms, MySQL is a single database per instance with\nmultiple schemas. MySQL uses the term database and schema interchangeably.\n\n    Run the following query to list all the user-defined schemas.\n    SELECT\n        `SCHEMATA`.`SCHEMA_NAME`\n    FROM `information_schema`.`SCHEMATA`\n    where `SCHEMA_NAME` not in ('mysql', 'information_schema',\n'performance_schema','sys');\n\n    Review the database structure to determine where security-related\nfunctionality is stored.\n\n    If security-related database objects or code are not kept separate, this is\na finding.",
            "__new": "Determine elements of security functionality (lists of permissions, additional authentication information, stored procedures, application specific auditing, etc.) which are being housed inside the MySQL server.\n\nFor any elements found, check MySQL to determine if these objects or code implementing security functionality are located in a separate security domain, such as a separate database, schema, or table created specifically for security functionality.\n\nIn more generic data terms, MySQL is a single database per instance with multiple schemas. MySQL uses the term database and schema interchangeably. \n\nRun the following query to list all the user-defined schemas.\nSELECT \n    `SCHEMATA`.`SCHEMA_NAME`\nFROM `information_schema`.`SCHEMATA` \nwhere `SCHEMA_NAME` not in ('mysql', 'information_schema', 'performance_schema','sys');\n\nReview the database structure to determine where security-related functionality is stored. \n\nIf security-related database objects or code are not kept separate, this is a finding."
          },
          "fix": {
            "__old": "Check the server documentation, locate security-related database objects\nand code in a separate database, schema, table, or other separate security\ndomain from database objects and code implementing application logic.\n\n    Schemas, also referred to as databases, are analogous to separate\nnamespaces or containers used to store database objects. Security permissions\napply to schemas, making them an important tool for separating and protecting\ndatabase objects based on access rights. Schemas reduce the work required, and\nimprove the flexibility, for security-related administration of a database. A\nMySQL schema is a named container for database objects, which allows objects to\nbe grouped into separate namespaces.\n\n    Where possible, locate security-related database objects and code in a\nseparate database, schema, or other separate security domain from database\nobjects and code implementing application logic. In all cases, use GRANT,\nREVOKE, … , DROP ROLE statements to add and remove permissions on\nadministrative/server-level and schema/database-level, or database object\nsecurity-related objects to provide effective isolation.",
            "__new": "Check the server documentation, locate security-related database objects and code in a separate database, schema, table, or other separate security domain from database objects and code implementing application logic. \n\nSchemas, also referred to as databases, are analogous to separate namespaces or containers used to store database objects. Security permissions apply to schemas, making them an important tool for separating and protecting database objects based on access rights. Schemas reduce the work required, and improve the flexibility, for security-related administration of a database. A MySQL schema is a named container for database objects, which allows objects to be grouped into separate namespaces.\n\nWhere possible, locate security-related database objects and code in a separate database, schema, or other separate security domain from database objects and code implementing application logic. In all cases, use GRANT, REVOKE, … , DROP ROLE statements to add and remove permissions on administrative/server-level and schema/database-level, or database object security-related objects to provide effective isolation."
          }
        }
      },
      "SV-235152": {
        "describe__deleted": "  describe 'Manually review that procedures for the refreshing of development/test data from\nproduction meet organization-defined data transfer policy .' do\n    skip 'Manually review that procedures for the refreshing of development/test data from\n    production meet organization-defined data transfer policy .'\n  end",
        "tags": {
          "check_id__added": "C-38371r623576_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235152r638812_rule",
            "__new": "SV-235152r961149_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "Database contents must be protected from unauthorized and unintended\ninformation transfer by enforcement of a data-transfer policy.",
          "__new": "Database contents must be protected from unauthorized and unintended information transfer by enforcement of a data-transfer policy."
        },
        "desc": {
          "__old": "Applications, including DBMSs, must prevent unauthorized and\nunintended information transfer via shared system resources.\n\n    Data used for the development and testing of applications often involves\ncopying data from production. It is important that specific procedures exist\nfor this process, to include the conditions under which such transfer may take\nplace, where the copies may reside, and the rules for ensuring sensitive data\nare not exposed.\n\n    Copies of sensitive data must not be misplaced or left in a temporary\nlocation without the proper controls.",
          "__new": "Applications, including DBMSs, must prevent unauthorized and unintended information transfer via shared system resources. \n\nData used for the development and testing of applications often involves copying data from production. It is important that specific procedures exist for this process, to include the conditions under which such transfer may take place, where the copies may reside, and the rules for ensuring sensitive data are not exposed.\n\nCopies of sensitive data must not be misplaced or left in a temporary location without the proper controls."
        },
        "descs": {
          "default__deleted": "Applications, including DBMSs, must prevent unauthorized and\nunintended information transfer via shared system resources.\n\n    Data used for the development and testing of applications often involves\ncopying data from production. It is important that specific procedures exist\nfor this process, to include the conditions under which such transfer may take\nplace, where the copies may reside, and the rules for ensuring sensitive data\nare not exposed.\n\n    Copies of sensitive data must not be misplaced or left in a temporary\nlocation without the proper controls.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the procedures for the refreshing of development/test data from\nproduction. Review any scripts or code that exists for the movement of\nproduction data to development/test systems, or to any other location or for\nany other purpose. Verify that copies of production data are not left in\nunprotected locations.\n\n    If the code that exists for data movement does not comply with the\norganization-defined data transfer policy and/or fails to remove any copies of\nproduction data from unprotected locations, this is a finding.",
            "__new": "Review the procedures for the refreshing of development/test data from production. Review any scripts or code that exists for the movement of production data to development/test systems, or to any other location or for any other purpose. Verify that copies of production data are not left in unprotected locations. \n\nIf the code that exists for data movement does not comply with the organization-defined data transfer policy and/or fails to remove any copies of production data from unprotected locations, this is a finding."
          },
          "fix": {
            "__old": "Modify any code used for moving data from production to\ndevelopment/test systems to comply with the organization-defined data transfer\npolicy, and to ensure copies of production data are not left in unsecured\nlocations.",
            "__new": "Modify any code used for moving data from production to development/test systems to comply with the organization-defined data transfer policy, and to ensure copies of production data are not left in unsecured locations."
          }
        }
      },
      "SV-235153": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  query_locations = %(\n  SELECT\n     VARIABLE_NAME,\n     VARIABLE_VALUE \n  FROM\n     performance_schema.global_variables \n  WHERE\n     VARIABLE_NAME LIKE '%dir' \n     or VARIABLE_NAME LIKE '%file' \n  order by\n     VARIABLE_NAME;\n  )\n\n  locations = sql_session.query(query_locations).output\n\n  describe \"Manually review access to database files must be limited to relevant processes and to\nauthorized, administrative users.\\n#{locations}\" do\n    skip \"Manually review access to database files must be limited to relevant processes and to\n    authorized, administrative users.\\n#{locations}\"\n  end",
        "tags": {
          "check_id__added": "C-38372r623579_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235153r638812_rule",
            "__new": "SV-235153r961149_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "Access to database files must be limited to relevant processes and to\nauthorized, administrative users.",
          "__new": "Access to database files must be limited to relevant processes and to authorized, administrative users."
        },
        "desc": {
          "__old": "Applications, including DBMSs, must prevent unauthorized and\nunintended information transfer via shared system resources. Permitting only\nDBMS processes and authorized, administrative users to have access to the files\nwhere the database resides helps ensure that those files are not shared\ninappropriately and are not open to backdoor access and manipulation.\n\n    As a general rule, distributed files and resources should follow the\nprincipal of least privilege, which requires that users, processes, programs,\nand other system components only have access to information and resources\nrequired for their legitimate purpose.",
          "__new": "Applications, including DBMSs, must prevent unauthorized and unintended information transfer via shared system resources. Permitting only DBMS processes and authorized, administrative users to have access to the files where the database resides helps ensure that those files are not shared inappropriately and are not open to backdoor access and manipulation.\n\nAs a general rule, distributed files and resources should follow the principal of least privilege, which requires that users, processes, programs, and other system components only have access to information and resources required for their legitimate purpose."
        },
        "descs": {
          "default__deleted": "Applications, including DBMSs, must prevent unauthorized and\nunintended information transfer via shared system resources. Permitting only\nDBMS processes and authorized, administrative users to have access to the files\nwhere the database resides helps ensure that those files are not shared\ninappropriately and are not open to backdoor access and manipulation.\n\n    As a general rule, distributed files and resources should follow the\nprincipal of least privilege, which requires that users, processes, programs,\nand other system components only have access to information and resources\nrequired for their legitimate purpose.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the permissions granted to users via the operating system/file\nsystem on the instance files, database files, database redo, undo, archive, bin\nand audit log files, and database backup files.\n\n    If any user/role who is not an authorized system administrator with a need\nto know or database administrator with a need to know, or a system account for\nrunning DBMS processes permitted to read/view any of these files, this is a\nfinding.\n\n    Note: When the instance and database directories are created by mysql\ninstallations packages, the permissions are secure and should not be changed.\n\n    Run ls -l on the various files and directory. Permissions should be limited\nto the mysql user and mysql group.\n\n    Use the following queries/commands to find the locations of instance\ndirectory, database directory, transaction logs directory, archive logs\ndirectory, audit logs directory, and backup files location.\n\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables\n    WHERE VARIABLE_NAME LIKE '%dir' or VARIABLE_NAME LIKE '%file' order by\nVARIABLE_NAME;\n\n    Regarding Linux default installation:\n    Proper permissions are shown below. If the permissions are more permissive\nfor a Location Type, this is a finding.\n\n    The following table shows directory and file permissions for the generic\nbinary distribution installation of MySQL Enterprise Edition for Linux x86-64\non Oracle Linux that is described in this guide.\n\n    As indicated previously, most of the MySQL installation can be owned by\nroot. The exceptions are the data directory, the error log file, the\nmysql-files directory, the pid file, and the socket file, to which the mysql\nuser must have write access. Files and resources to which the mysql user\nrequires read access include configuration files (/etc/my.cnf) and the MySQL\nbinaries (for example /usr/local/mysql/bin).\n\n    Desc/Typical Location                   Owner                Directory\n File\n\n            Permissions     Permissions\n    ---------------------                                -----\n   -----------           -----------\n    Client and utility programs directory\n    /usr/local/mysql/bin                      root                    drwxr-xr-x\n    mysqld server\n    /usr/local/mysql/bin                      root                   drwxr-xr-x\n     -rwxr-xr-x\n    MySQL configuration file\n    /etc/my.cnf                                      root\ndrwxr-xr-x      -rw-r--r--\n    Data directory\n    /usr/local/mysql/data                   mysql                drwxr-x---\n    Error log file\n     <directory where audit log files are located>/host_name.err\n                                                               mysql\n    drwxr-x---      -rw-------\n    secure_file_priv directory\n    /usr/local/mysql/mysql-files        mysql                drwxr-x---\n    mysqld systemd service file\n    /usr/lib/systemd/system/mysqld.service\n                                                               root\n      drwxr-xr-x     -rw-r--r--\n    systemd tmpfiles configuration file\n    /usr/lib/tmpfiles.d/mysql.conf   root                   drwxr-xr-x\n-rw-r--r--\n    pid file\n     <directory where audit log files are located>/mysqld.pid\n                                                              mysql\n    drwxr-x---      -rw-r-----\n    socket file\n    /tmp/mysql.sock                           mysql                 drwxrwxrwt\nsrwxrwxrwx\n    Unix manual pages directory\n    /usr/local/mysql/man                  root                   drwxr-xr-x\n    Include Header files directory\n    /usr/local/mysql/include             root                   drwxr-xr-x\n    Libraries directory\n    /usr/local/mysql/lib                      root                   drwxr-xr-x\n    Miscellaneous support files directory\n    /usr/local/mysql/support-files   root                   drwxr-xr-x\n    Miscellaneous files directory\n    /usr/local/mysql/share                root                   drwxr-xr-x",
            "__new": "Review the permissions granted to users via the operating system/file system on the instance files, database files, database redo, undo, archive, bin and audit log files, and database backup files.\n\nIf any user/role who is not an authorized system administrator with a need to know or database administrator with a need to know, or a system account for running DBMS processes permitted to read/view any of these files, this is a finding.\n\nNote: When the instance and database directories are created by mysql installations packages, the permissions are secure and should not be changed.\n\nRun ls -l on the various files and directory. Permissions should be limited to the mysql user and mysql group.\n\nUse the following queries/commands to find the locations of instance directory, database directory, transaction logs directory, archive logs directory, audit logs directory, and backup files location.\n\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables\nWHERE VARIABLE_NAME LIKE '%dir' or VARIABLE_NAME LIKE '%file' order by  VARIABLE_NAME;\n\nRegarding Linux default installation:\nProper permissions are shown below. If the permissions are more permissive for a Location Type, this is a finding.\n\nThe following table shows directory and file permissions for the generic binary distribution installation of MySQL Enterprise Edition for Linux x86-64 on Oracle Linux that is described in this guide.\n\nAs indicated previously, most of the MySQL installation can be owned by root. The exceptions are the data directory, the error log file, the mysql-files directory, the pid file, and the socket file, to which the mysql user must have write access. Files and resources to which the mysql user requires read access include configuration files (/etc/my.cnf) and the MySQL binaries (for example /usr/local/mysql/bin).\n\nDesc/Typical Location                   Owner                Directory       File\n                                                                                        Permissions     Permissions\n---------------------                                -----                     -----------           -----------\nClient and utility programs directory\n/usr/local/mysql/bin                      root                    drwxr-xr-x\nmysqld server   \n/usr/local/mysql/bin                      root                   drwxr-xr-x      -rwxr-xr-x\nMySQL configuration file        \n/etc/my.cnf                                      root                  drwxr-xr-x      -rw-r--r--\nData directory  \n/usr/local/mysql/data                   mysql                drwxr-x---\nError log file  \n <directory where audit log files are located>/host_name.err     \n                                                           mysql                drwxr-x---      -rw-------\nsecure_file_priv directory      \n/usr/local/mysql/mysql-files        mysql                drwxr-x---\nmysqld systemd service file     \n/usr/lib/systemd/system/mysqld.service  \n                                                           root                   drwxr-xr-x     -rw-r--r--\nsystemd tmpfiles configuration file     \n/usr/lib/tmpfiles.d/mysql.conf   root                   drwxr-xr-x      -rw-r--r--\npid file        \n <directory where audit log files are located>/mysqld.pid        \n                                                          mysql                 drwxr-x---      -rw-r-----\nsocket file     \n/tmp/mysql.sock                           mysql                 drwxrwxrwt srwxrwxrwx\nUnix manual pages directory     \n/usr/local/mysql/man                  root                   drwxr-xr-x\nInclude Header files directory  \n/usr/local/mysql/include             root                   drwxr-xr-x\nLibraries directory     \n/usr/local/mysql/lib                      root                   drwxr-xr-x\nMiscellaneous support files directory   \n/usr/local/mysql/support-files   root                   drwxr-xr-x\nMiscellaneous files directory   \n/usr/local/mysql/share                root                   drwxr-xr-x"
          },
          "fix": {
            "__old": "Configure the permissions granted by the operating system/file\nsystem on the database files, database log files, and database backup files so\nthat only relevant system accounts and authorized system administrators and\ndatabase administrators with a need to know are permitted to read/view these\nfiles. Remove any unauthorized permission grants from MySQL data, audit,\ncertificate, key, or other directories.",
            "__new": "Configure the permissions granted by the operating system/file system on the database files, database log files, and database backup files so that only relevant system accounts and authorized system administrators and database administrators with a need to know are permitted to read/view these files. Remove any unauthorized permission grants from MySQL data, audit, certificate, key, or other directories."
          }
        }
      },
      "SV-235154": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  query_ssl_params = %(\n  SELECT @@require_secure_transport,\n         @@ssl_fips_mode;\n  )\n\n  ssl_params = sql_session.query(query_ssl_params).results\n\n  if !input('aws_rds')\n    \n    ssl_fips_mode = ssl_params.column('@@ssl_fips_mode').join\n    describe '@@ssl_fips_mode' do\n      it \"shoud be ON or STRICT. Got #{ssl_fips_mode}\" do\n        expect(ssl_fips_mode).to be_in(['ON', 'STRICT'])\n      end\n    end\n  \n    require_secure_transport = ssl_params.column('@@require_secure_transport').join\n    describe '@@require_secure_transport' do\n      it \"should be 1 or ON. Got #{require_secure_transport}\" do\n        expect(require_secure_transport).to be_in(['1', 'ON'])\n      end\n    end\n\n  else\n    \n    impact 0.0\n    describe 'Not applicable since ssl_fips_mode is set to 0 (OFF) and cannot be configured in AWS RDS' do\n      skip 'Not applicable since ssl_fips_mode is set to 0 (OFF) and cannot be configured in AWS RDS'\n    end\n    \n  end    \n    ",
        "tags": {
          "check_id__added": "C-38373r623582_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235154r638812_rule",
            "__new": "SV-235154r961119_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must maintain the authenticity of\ncommunications sessions by guarding against man-in-the-middle attacks that\nguess at Session ID values.",
          "__new": "The MySQL Database Server 8.0 must maintain the authenticity of communications sessions by guarding against man-in-the-middle attacks that guess at Session ID values."
        },
        "desc": {
          "__old": "One class of man-in-the-middle, or session hijacking, attack involves\nthe adversary guessing at valid session identifiers based on patterns in\nidentifiers already known.\n\n    The preferred technique for thwarting guesses at Session IDs is the\ngeneration of unique session identifiers using a FIPS 140-2 approved random\nnumber generator.\n\n    However, it is recognized that available DBMS products do not all implement\nthe preferred technique yet may have other protections against session\nhijacking. Therefore, other techniques are acceptable, provided they are\ndemonstrated to be effective.",
          "__new": "One class of man-in-the-middle, or session hijacking, attack involves the adversary guessing at valid session identifiers based on patterns in identifiers already known.\n\nThe preferred technique for thwarting guesses at Session IDs is the generation of unique session identifiers using a FIPS 140-2 or 140-3 approved random number generator.\n\nHowever, it is recognized that available DBMS products do not all implement the preferred technique yet may have other protections against session hijacking. Therefore, other techniques are acceptable, provided they are demonstrated to be effective."
        },
        "descs": {
          "default__deleted": "One class of man-in-the-middle, or session hijacking, attack involves\nthe adversary guessing at valid session identifiers based on patterns in\nidentifiers already known.\n\n    The preferred technique for thwarting guesses at Session IDs is the\ngeneration of unique session identifiers using a FIPS 140-2 approved random\nnumber generator.\n\n    However, it is recognized that available DBMS products do not all implement\nthe preferred technique yet may have other protections against session\nhijacking. Therefore, other techniques are acceptable, provided they are\ndemonstrated to be effective.",
          "rationale__deleted": "",
          "check": {
            "__old": "Determine if MySQL is configured to require SSL.\n\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables\n    WHERE VARIABLE_NAME like 'require_secure_transport';\n\n    If require_secure_transport is not \"ON\", this is a finding.\n\n    Determine if MySQL is configured to require the use of FIPS compliant\nalgorithms.\n\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables\n    WHERE VARIABLE_NAME = 'ssl_fips_mode';\n\n    If ssl_fips_mode is not \"ON\", this is a finding.",
            "__new": "Determine if MySQL is configured to require SSL.  \n\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables\nWHERE VARIABLE_NAME like 'require_secure_transport';\n\nIf require_secure_transport is not \"ON\", this is a finding.\n\nDetermine if MySQL is configured to require the use of FIPS compliant algorithms. \n\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables\nWHERE VARIABLE_NAME = 'ssl_fips_mode';\n\nIf ssl_fips_mode is not \"ON\", this is a finding."
          },
          "fix": {
            "__old": "Connect as a mysql administrator\nmysql> set persist require_secure_transport=ON;\n\nTurn on MySQL FIPS mode (ON or STRICT)  and restart mysqld\nEdit my.cnf\n[mysqld]\nssl_fips_mode=ON\nor\nssl_fips_mode=STRICT",
            "__new": "Connect as a mysql administrator \nmysql> set persist require_secure_transport=ON;\n\nTurn on MySQL FIPS mode (ON or STRICT)  and restart mysqld\nEdit my.cnf\n[mysqld]\nssl_fips_mode=ON\nor\nssl_fips_mode=STRICT"
          }
        }
      },
      "SV-235155": {
        "describe__deleted": "  if !input('aws_rds')\n    sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n    query_encryption_params = %(\n    SELECT\n       VARIABLE_NAME,\n       VARIABLE_VALUE \n    FROM\n       performance_schema.global_variables \n    WHERE\n       VARIABLE_NAME like '%encrypt%';\n    )\n\n    encryption_params = sql_session.query(query_encryption_params).results.rows.map{|x| {x['variable_name']=> x['variable_value']}}.reduce({}, :merge)\n\n    describe \"Encryption Param:\" do\n      subject { encryption_params }\n      its(['audit_log_encryption']) { should cmp 'AES' }\n      its(['binlog_encryption']) { should cmp 'ON' }\n      its(['innodb_redo_log_encrypt']) { should cmp 'ON' }\n      its(['innodb_undo_log_encrypt']) { should cmp 'ON' }\n      its(['table_encryption_privilege_check']) { should cmp 'ON' }\n    end\n\n    query_general_log = %(\n    SELECT\n       VARIABLE_NAME,\n       VARIABLE_VALUE \n    FROM\n       performance_schema.global_variables \n    WHERE\n       VARIABLE_NAME like 'general_log';\n    )\n\n    describe \"general_log config\" do\n      subject { sql_session.query(query_general_log).results.column('variable_value').join }\n      it { should cmp 'OFF' }\n    end\n\n    query_tablespaces = %(\n    SELECT\n       INNODB_TABLESPACES.NAME,\n       INNODB_TABLESPACES.ENCRYPTION \n    FROM\n       information_schema.INNODB_TABLESPACES;\n    )\n\n    tablespaces = sql_session.query(query_tablespaces).results.rows\n\n    tablespaces.each do |tablespace|\n        describe \"Tablespace #{tablespace['name']} encryption\" do\n          subject { tablespace }\n          its(['encryption']) { should cmp 'Y' }\n        end\n    end\n    \n  else\n    \n    impact 0.0\n    describe 'Not applicable since these requirements are handled within AWS RDS' do\n      skip 'Not applicable since these requirements are handled within AWS RDS'\n    end\n    \n  end    \n  ",
        "tags": {
          "check_id__added": "C-38374r810830_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235155r638812_rule",
            "__new": "SV-235155r961128_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must protect the confidentiality and\nintegrity of all information at rest.",
          "__new": "The MySQL Database Server 8.0 must protect the confidentiality and integrity of all information at rest."
        },
        "desc": {
          "__old": "This control is intended to address the confidentiality and integrity\nof information at rest in non-mobile devices and covers user information and\nsystem information. Information at rest refers to the state of information when\nit is located on a secondary storage device (e.g., disk drive, tape drive)\nwithin an organizational information system. Applications and application users\ngenerate information throughout the course of their application use.\n\n    User data generated, as well as application-specific configuration data,\nneeds to be protected. Organizations may choose to employ different mechanisms\nto achieve confidentiality and integrity protections, as appropriate.\n\n    If the confidentiality and integrity of application data is not protected,\nthe data will be open to compromise and unauthorized modification.",
          "__new": "This control is intended to address the confidentiality and integrity of information at rest in non-mobile devices and covers user information and system information. Information at rest refers to the state of information when it is located on a secondary storage device (e.g., disk drive, tape drive) within an organizational information system. Applications and application users generate information throughout the course of their application use. \n\nUser data generated, as well as application-specific configuration data, needs to be protected. Organizations may choose to employ different mechanisms to achieve confidentiality and integrity protections, as appropriate. \n\nIf the confidentiality and integrity of application data is not protected, the data will be open to compromise and unauthorized modification."
        },
        "descs": {
          "default__deleted": "This control is intended to address the confidentiality and integrity\nof information at rest in non-mobile devices and covers user information and\nsystem information. Information at rest refers to the state of information when\nit is located on a secondary storage device (e.g., disk drive, tape drive)\nwithin an organizational information system. Applications and application users\ngenerate information throughout the course of their application use.\n\n    User data generated, as well as application-specific configuration data,\nneeds to be protected. Organizations may choose to employ different mechanisms\nto achieve confidentiality and integrity protections, as appropriate.\n\n    If the confidentiality and integrity of application data is not protected,\nthe data will be open to compromise and unauthorized modification.",
          "rationale__deleted": "",
          "check": {
            "__old": "Apply appropriate controls to protect the confidentiality and integrity of\ndata at rest in the database.\n\n    Using SQL determine if all data-at-rest is encrypted.\n\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables where variable_name =\n'audit_log_encryption';\n\n    If \"audit_log_encryption\" is not set to \"AES\", this is a finding.\n\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables where variable_name =\n'binlog_encryption';\n\n    If \"binlog_encrypt\" is not set to \"ON\", this is a finding.\n\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables where variable_name =\n'innodb_redo_log_encrypt';\n\n    If \"innodb_redo_log_encrypt\" is not set to \"ON\", this is a finding.\n\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables where variable_name =\n'innodb_undo_log_encrypt';\n\n    If \"innodb_undo_log_encrypt\" is not set to \"ON\", this is a finding.\n\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables\n    WHERE VARIABLE_NAME like 'general_log';\n\n    If \"general_log\"is not \"OFF\", this is a finding.\n\n    Find encryption status for all mysql table and tablespaces.\n    SELECT\n        `INNODB_TABLESPACES`.`NAME`,\n        `INNODB_TABLESPACES`.`ENCRYPTION`\n    FROM `information_schema`.`INNODB_TABLESPACES`;\n\n    If any tablespace is not ENCRYPTION set to \"Y (yes)\", this is a finding.\n\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables where variable_name =\n'table_encryption_privilege_check';\n\n    If \"innodb_redo_log_encrypt\" is not set to \"ON\", this is a finding.",
            "__new": "If the application owner and Authorizing Official have determined that encryption of data at rest is NOT required, this is not a finding.\n\nReview settings to ensure appropriate controls are applied to protect the confidentiality and integrity of data at rest in the database.\n\nUsing SQL determine if all data-at-rest is encrypted.\n\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables where variable_name = 'audit_log_encryption';\n\nIf \"audit_log_encryption\" is not set to \"AES\", this is a finding.\n\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables where variable_name = 'binlog_encryption';\n\nIf \"binlog_encrypt\" is not set to \"ON\", this is a finding.\n\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables where variable_name = 'innodb_redo_log_encrypt';\n\nIf \"innodb_redo_log_encrypt\" is not set to \"ON\", this is a finding.\n\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables where variable_name = 'innodb_undo_log_encrypt';\n\nIf \"innodb_undo_log_encrypt\" is not set to \"ON\", this is a finding.\n\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables\nWHERE VARIABLE_NAME like 'general_log';\n\nIf \"general_log\"is not \"OFF\", this is a finding.\n\nFind encryption status for all mysql table and tablespaces.\nSELECT\n    `INNODB_TABLESPACES`.`NAME`,\n    `INNODB_TABLESPACES`.`ENCRYPTION`\nFROM `information_schema`.`INNODB_TABLESPACES`;\n\nIf any tablespace other than innodb_temporary does not have ENCRYPTION set to \"Y (yes)\", this is a finding.\n\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables where variable_name = 'table_encryption_privilege_check';\n\nIf \"innodb_redo_log_encrypt\" is not set to \"ON\", this is a finding."
          },
          "fix": {
            "__old": "Apply appropriate MySQL Database 8.0 controls to protect the\nconfidentiality and integrity of data at rest in the database.\n\n    sudo vi /etc/my.cnf\n    [mysqld]\n    audit-log=FORCE_PLUS_PERMANENT\n    audit-log-format=JSON\n    audit-log-encryption=AES\n\n    Turn on binlog encryption\n    set persist binlog_encryption=ON;\n\n    Turn on undo and redo log encryption\n    set persist innodb_redo_log_encrypt=ON;\n    set persist innodb_undo_log_encrypt=ON;\n\n    Enable encryption for a new file-per-table tablespace, specify the\nENCRYPTION option in a CREATE TABLE statement.\n    The following example assumes that innodb_file_per_table is enabled.\n    mysql> CREATE TABLE t1 (c1 INT) ENCRYPTION='Y';\n\n    To enable encryption for an existing file-per-table tablespace, specify the\nENCRYPTION option in an ALTER TABLE statement.\n    mysql> ALTER TABLE t1 ENCRYPTION='Y';\n\n    To disable encryption for file-per-table tablespace, set ENCRYPTION='N'\nusing ALTER TABLE.\n    mysql> ALTER TABLE t1 ENCRYPTION='N';\n\n    Disable the general_log\n    SET PERSIST general_log = 'OFF';",
            "__new": "Apply appropriate MySQL Database 8.0 controls to protect the confidentiality and integrity of data at rest in the database.\n\nsudo vi /etc/my.cnf\n[mysqld]\naudit-log=FORCE_PLUS_PERMANENT\naudit-log-format=JSON\naudit-log-encryption=AES\n\nTurn on binlog encryption\nset persist binlog_encryption=ON;\n\nTurn on undo and redo log encryption\nset persist innodb_redo_log_encrypt=ON;\nset persist innodb_undo_log_encrypt=ON;\n\nEnable encryption for a new file-per-table tablespace, specify the ENCRYPTION option in a CREATE TABLE statement. \nThe following example assumes that innodb_file_per_table is enabled.\nmysql> CREATE TABLE t1 (c1 INT) ENCRYPTION='Y';\n\nTo enable encryption for an existing file-per-table tablespace, specify the ENCRYPTION option in an ALTER TABLE statement.\nmysql> ALTER TABLE t1 ENCRYPTION='Y';\n\nTo disable encryption for file-per-table tablespace, set ENCRYPTION='N' using ALTER TABLE.\nmysql> ALTER TABLE t1 ENCRYPTION='N';\n\nDisable the general_log\nSET PERSIST general_log = 'OFF';"
          }
        }
      },
      "SV-235156": {
        "describe__deleted": "  describe 'Manualy review MySQL Database Server 8.0 code (stored procedures, functions,\ntriggers), application code, settings, column and field definitions, triggers,\nand constraints to determine whether the database is protected against invalid\ninput.' do\n    skip 'Manualy review MySQL Database Server 8.0 code (stored procedures, functions,\n    triggers), application code, settings, column and field definitions, triggers,\n    and constraints to determine whether the database is protected against invalid\n    input.'\n  end",
        "tags": {
          "check_id__added": "C-38375r623588_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235156r638812_rule",
            "__new": "SV-235156r961158_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must check the validity of all data\ninputs except those specifically identified by the organization.",
          "__new": "The MySQL Database Server 8.0 must check the validity of all data inputs except those specifically identified by the organization."
        },
        "desc": {
          "__old": "Invalid user input occurs when a user inserts data or characters into\nan application's data entry fields and the application is unprepared to process\nthat data. This results in unanticipated application behavior, potentially\nleading to an application or information system compromise. Invalid user input\nis one of the primary methods employed when attempting to compromise an\napplication.\n\n    With respect to database management systems, one class of threat is known\nas SQL Injection, or more generally, code injection. It takes advantage of the\ndynamic execution capabilities of various programming languages, including\ndialects of SQL. Potentially, the attacker can gain unauthorized access to\ndata, including security settings, and severely corrupt or destroy the database.\n\n    Even when no such hijacking takes place, invalid input that gets recorded\nin the database, whether accidental or malicious, reduces the reliability and\nusability of the system. Available protections include data types, referential\nconstraints, uniqueness constraints, range checking, and application-specific\nlogic. Application-specific logic can be implemented within the database in\nstored procedures and triggers, where appropriate.",
          "__new": "Invalid user input occurs when a user inserts data or characters into an application's data entry fields and the application is unprepared to process that data. This results in unanticipated application behavior, potentially leading to an application or information system compromise. Invalid user input is one of the primary methods employed when attempting to compromise an application.\n\nWith respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.\n\nEven when no such hijacking takes place, invalid input that gets recorded in the database, whether accidental or malicious, reduces the reliability and usability of the system. Available protections include data types, referential constraints, uniqueness constraints, range checking, and application-specific logic. Application-specific logic can be implemented within the database in stored procedures and triggers, where appropriate."
        },
        "descs": {
          "default__deleted": "Invalid user input occurs when a user inserts data or characters into\nan application's data entry fields and the application is unprepared to process\nthat data. This results in unanticipated application behavior, potentially\nleading to an application or information system compromise. Invalid user input\nis one of the primary methods employed when attempting to compromise an\napplication.\n\n    With respect to database management systems, one class of threat is known\nas SQL Injection, or more generally, code injection. It takes advantage of the\ndynamic execution capabilities of various programming languages, including\ndialects of SQL. Potentially, the attacker can gain unauthorized access to\ndata, including security settings, and severely corrupt or destroy the database.\n\n    Even when no such hijacking takes place, invalid input that gets recorded\nin the database, whether accidental or malicious, reduces the reliability and\nusability of the system. Available protections include data types, referential\nconstraints, uniqueness constraints, range checking, and application-specific\nlogic. Application-specific logic can be implemented within the database in\nstored procedures and triggers, where appropriate.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review MySQL Database Server 8.0 code (stored procedures, functions,\ntriggers), application code, settings, column and field definitions, triggers,\nand constraints to determine whether the database is protected against invalid\ninput. If code exists that allows invalid data to be acted upon or input into\nthe database, this is a finding.\n\n    If column/field definitions do not exist in the database, this is a finding.\n\n    If columns/fields do not contain constraints and validity checking where\nrequired, this is a finding.\n\n    Where a column/field is noted in the system documentation as necessarily\nfree-form, even though its name and context suggest that it should be strongly\ntyped and constrained, the absence of these protections is not a finding.\n\n    Where a column/field is clearly identified by name, caption or context as\nNotes, Comments, Description, Text, etc., the absence of these protections is\nnot a finding.\n\n    MySQL Workbench Schema and Table Inspectors are effective tools for\nperforming the review process, as are the MySQL Information Schema, and MySQL\nSchema tables.",
            "__new": "Review MySQL Database Server 8.0 code (stored procedures, functions, triggers), application code, settings, column and field definitions, triggers, and constraints to determine whether the database is protected against invalid input. If code exists that allows invalid data to be acted upon or input into the database, this is a finding.\n\nIf column/field definitions do not exist in the database, this is a finding.\n\nIf columns/fields do not contain constraints and validity checking where required, this is a finding.\n\nWhere a column/field is noted in the system documentation as necessarily free-form, even though its name and context suggest that it should be strongly typed and constrained, the absence of these protections is not a finding.\n\nWhere a column/field is clearly identified by name, caption or context as Notes, Comments, Description, Text, etc., the absence of these protections is not a finding.\n\nMySQL Workbench Schema and Table Inspectors are effective tools for performing the review process, as are the MySQL Information Schema, and MySQL Schema tables."
          },
          "fix": {
            "__old": "Use parameterized queries, constraints, foreign keys, etc., to validate\ndata input.\n\n    Modify MySQL SQL Server to properly use the correct column data types as\nrequired in the database.",
            "__new": "Use parameterized queries, constraints, foreign keys, etc., to validate data input.\n\nModify MySQL SQL Server to properly use the correct column data types as required in the database."
          }
        }
      },
      "SV-235157": {
        "describe__deleted": "  describe 'Manually review MySQL source code (trigger procedures, functions) and application\nsource code, to identify cases of dynamic code execution.' do\n    skip 'Manually review MySQL source code (trigger procedures, functions) and application\n    source code, to identify cases of dynamic code execution.'\n  end",
        "tags": {
          "check_id__added": "C-38376r623591_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235157r638812_rule",
            "__new": "SV-235157r961158_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 and associated applications must reserve\nthe use of dynamic code execution for situations that require it.",
          "__new": "The MySQL Database Server 8.0 and associated applications must reserve the use of dynamic code execution for situations that require it."
        },
        "desc": {
          "__old": "With respect to database management systems, one class of threat is\nknown as SQL Injection, or more generally, code injection. It takes advantage\nof the dynamic execution capabilities of various programming languages,\nincluding dialects of SQL. In such cases, the attacker deduces the manner in\nwhich SQL statements are being processed, either from inside knowledge or by\nobserving system behavior in response to invalid inputs. When the attacker\nidentifies scenarios where SQL queries are being assembled by application code\n(which may be within the database or separate from it) and executed\ndynamically, the attacker is then able to craft input strings that subvert the\nintent of the query. Potentially, the attacker can gain unauthorized access to\ndata, including security settings, and severely corrupt or destroy the database.\n\n    The principal protection against code injection is not to use dynamic\nexecution except where it provides necessary functionality that cannot be\nutilized otherwise. Use strongly typed data items rather than general-purpose\nstrings as input parameters to task-specific, pre-compiled stored procedures\nand functions (and triggers).",
          "__new": "With respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. In such cases, the attacker deduces the manner in which SQL statements are being processed, either from inside knowledge or by observing system behavior in response to invalid inputs. When the attacker identifies scenarios where SQL queries are being assembled by application code (which may be within the database or separate from it) and executed dynamically, the attacker is then able to craft input strings that subvert the intent of the query. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.\n\nThe principal protection against code injection is not to use dynamic execution except where it provides necessary functionality that cannot be utilized otherwise. Use strongly typed data items rather than general-purpose strings as input parameters to task-specific, pre-compiled stored procedures and functions (and triggers)."
        },
        "descs": {
          "default__deleted": "With respect to database management systems, one class of threat is\nknown as SQL Injection, or more generally, code injection. It takes advantage\nof the dynamic execution capabilities of various programming languages,\nincluding dialects of SQL. In such cases, the attacker deduces the manner in\nwhich SQL statements are being processed, either from inside knowledge or by\nobserving system behavior in response to invalid inputs. When the attacker\nidentifies scenarios where SQL queries are being assembled by application code\n(which may be within the database or separate from it) and executed\ndynamically, the attacker is then able to craft input strings that subvert the\nintent of the query. Potentially, the attacker can gain unauthorized access to\ndata, including security settings, and severely corrupt or destroy the database.\n\n    The principal protection against code injection is not to use dynamic\nexecution except where it provides necessary functionality that cannot be\nutilized otherwise. Use strongly typed data items rather than general-purpose\nstrings as input parameters to task-specific, pre-compiled stored procedures\nand functions (and triggers).",
          "rationale__deleted": "",
          "check": {
            "__old": "Review MySQL source code (trigger procedures, functions) and application\nsource code, to identify cases of dynamic code execution. Any user input should\nbe handled through prepared statements or calls that bind parameters versus\ngenerating SQL.\n\n    If dynamic code execution is employed in circumstances where the objective\ncould practically be satisfied by static execution with strongly typed\nparameters, this is a finding.",
            "__new": "Review MySQL source code (trigger procedures, functions) and application source code, to identify cases of dynamic code execution. Any user input should be handled through prepared statements or calls that bind parameters versus generating SQL.\n\nIf dynamic code execution is employed in circumstances where the objective could practically be satisfied by static execution with strongly typed parameters, this is a finding."
          },
          "fix": {
            "__old": "Where dynamic code execution is employed in circumstances where\nthe objective could practically be satisfied by static execution with strongly\ntyped parameters, modify the code to do so.",
            "__new": "Where dynamic code execution is employed in circumstances where the objective could practically be satisfied by static execution with strongly typed parameters, modify the code to do so."
          }
        }
      },
      "SV-235158": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n\n    query_firewall_mode = %(SHOW GLOBAL VARIABLES LIKE 'mysql_firewall_mode';)\n\n    query_firewall_users = %(\n    SELECT\n       * \n    FROM\n       INFORMATION_SCHEMA.MYSQL_FIREWALL_USERS;\n    )\n\n    describe 'mysql_firewall_mode' do\n      subject { sql_session.query(query_firewall_mode).results.column('value').join }\n      it { should cmp 'ON' }\n    end\n\n      # Enable the MySQL Enterprise Firewall by running this script, which is located in the mysql home share sub directory. Sub directory accessible?\n      if sql_session.query(query_firewall_mode).results.column('value').join.eql?('ON')\n        describe 'List of MYSQL_FIREWALL_USERS' do\n          subject { sql_session.query(query_firewall_users).results }\n          it { should_not be_empty }\n        end\n\n        sql_session.query(query_firewall_users).results.rows.each do |fw_user|\n          describe \"USERHOST #{fw_user['userhost']}\" do\n            subject { fw_user }\n            its(['mode']) { should be_in ['LEARNING', 'DETECTING', 'PROTECTING'] }\n          end\n        end\n      end\n\n  else\n    \n    impact 0.0\n    describe 'Not applicable since the feature is not available in AWS RDS' do\n      skip 'Not applicable since the feature is not available in AWS RDS'\n    end  \n    \n  end\n  ",
        "tags": {
          "check_id__added": "C-38377r623594_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235158r638812_rule",
            "__new": "SV-235158r961158_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 and associated applications, when making\nuse of dynamic code execution, must scan input data for invalid values that may\nindicate a code injection attack.",
          "__new": "The MySQL Database Server 8.0 and associated applications, when making use of dynamic code execution, must scan input data for invalid values that may indicate a code injection attack."
        },
        "desc": {
          "__old": "With respect to database management systems, one class of threat is\nknown as SQL Injection, or more generally, code injection. It takes advantage\nof the dynamic execution capabilities of various programming languages,\nincluding dialects of SQL. In such cases, the attacker deduces the manner in\nwhich SQL statements are being processed, either from inside knowledge or by\nobserving system behavior in response to invalid inputs. When the attacker\nidentifies scenarios where SQL queries are being assembled by application code\n(which may be within the database or separate from it) and executed\ndynamically, the attacker is then able to craft input strings that subvert the\nintent of the query. Potentially, the attacker can gain unauthorized access to\ndata, including security settings, and severely corrupt or destroy the database.\n\n    The principal protection against code injection is not to use dynamic\nexecution except where it provides necessary functionality that cannot be\nutilized otherwise. Use strongly typed data items rather than general-purpose\nstrings as input parameters to task-specific, pre-compiled stored procedures\nand functions (and triggers).\n\n    When dynamic execution is necessary, ways to mitigate the risk include the\nfollowing, which should be implemented both in the on-screen application and at\nthe database level, in the stored procedures:\n    -- Allow strings as input only when necessary.\n    -- Rely on data typing to validate numbers, dates, etc. Do not accept\ninvalid values. If substituting other values for them, think carefully about\nwhether this could be subverted.\n    -- Limit the size of input strings to what is truly necessary.\n    -- If single quotes/apostrophes, double quotes, semicolons, equal signs,\nangle brackets, or square brackets will never be valid as input, reject them.\n    -- If comment markers will never be valid as input, reject them. In SQL,\nthese are -- or /*  */\n    -- If HTML and XML tags, entities, comments, etc., will never be valid,\nreject them.\n    -- If wildcards are present, reject them unless truly necessary. In SQL\nthese are the underscore and the percentage sign, and the word \"ESCAPE\" is\nalso a clue that wildcards are in use.\n    -- If SQL key words, such as SELECT, INSERT, UPDATE, DELETE, CREATE, ALTER,\nDROP, ESCAPE, UNION, GRANT, REVOKE, DENY, MODIFY will never be valid, reject\nthem. Use case-insensitive comparisons when    searching for these. Bear in\nmind that some of these words, particularly Grant (as a person's name), could\nalso be valid input.\n    -- If there are range limits on the values that may be entered, enforce\nthose limits.\n    -- Institute procedures for inspection of programs for correct use of\ndynamic coding, by a party other than the developer.\n    -- Conduct rigorous testing of program modules that use dynamic coding,\nsearching for ways to subvert the intended use.\n    -- Record the inspection and testing in the system documentation.\n    -- Bear in mind that all this applies not only to screen input, but also to\nthe values in an incoming message to a web service or to a stored procedure\ncalled by a software component that has not itself been hardened in these ways.\nNot only can the caller be subject to such vulnerabilities; it may itself be\nthe attacker.\n\n    The MySQL Firewall runs within the MySQL server and enables database\nadministrators to permit or deny SQL statement execution based on matching\nagainst whitelists of accepted statement patterns. This hardens MySQL Server\nagainst attacks such as SQL injection or attempts to exploit applications by\nusing them outside of their legitimate query workload characteristics.",
          "__new": "With respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. In such cases, the attacker deduces the manner in which SQL statements are being processed, either from inside knowledge or by observing system behavior in response to invalid inputs. When the attacker identifies scenarios where SQL queries are being assembled by application code (which may be within the database or separate from it) and executed dynamically, the attacker is then able to craft input strings that subvert the intent of the query. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.\n\nThe principal protection against code injection is not to use dynamic execution except where it provides necessary functionality that cannot be utilized otherwise. Use strongly typed data items rather than general-purpose strings as input parameters to task-specific, pre-compiled stored procedures and functions (and triggers).\n\nWhen dynamic execution is necessary, ways to mitigate the risk include the following, which should be implemented both in the on-screen application and at the database level, in the stored procedures:\n-- Allow strings as input only when necessary. \n-- Rely on data typing to validate numbers, dates, etc. Do not accept invalid values. If substituting other values for them, think carefully about whether this could be subverted.\n-- Limit the size of input strings to what is truly necessary.\n-- If single quotes/apostrophes, double quotes, semicolons, equal signs, angle brackets, or square brackets will never be valid as input, reject them.\n-- If comment markers will never be valid as input, reject them. In SQL, these are -- or /*  */ \n-- If HTML and XML tags, entities, comments, etc., will never be valid, reject them.\n-- If wildcards are present, reject them unless truly necessary. In SQL these are the underscore and the percentage sign, and the word \"ESCAPE\" is also a clue that wildcards are in use.\n-- If SQL key words, such as SELECT, INSERT, UPDATE, DELETE, CREATE, ALTER, DROP, ESCAPE, UNION, GRANT, REVOKE, DENY, MODIFY will never be valid, reject them. Use case-insensitive comparisons when    searching for these. Bear in mind that some of these words, particularly Grant (as a person's name), could also be valid input. \n-- If there are range limits on the values that may be entered, enforce those limits.\n-- Institute procedures for inspection of programs for correct use of dynamic coding, by a party other than the developer.\n-- Conduct rigorous testing of program modules that use dynamic coding, searching for ways to subvert the intended use.\n-- Record the inspection and testing in the system documentation.\n-- Bear in mind that all this applies not only to screen input, but also to the values in an incoming message to a web service or to a stored procedure called by a software component that has not itself been hardened in these ways. Not only can the caller be subject to such vulnerabilities; it may itself be the attacker.\n\nThe MySQL Firewall runs within the MySQL server and enables database administrators to permit or deny SQL statement execution based on matching against whitelists of accepted statement patterns. This hardens MySQL Server against attacks such as SQL injection or attempts to exploit applications by using them outside of their legitimate query workload characteristics."
        },
        "descs": {
          "default__deleted": "With respect to database management systems, one class of threat is\nknown as SQL Injection, or more generally, code injection. It takes advantage\nof the dynamic execution capabilities of various programming languages,\nincluding dialects of SQL. In such cases, the attacker deduces the manner in\nwhich SQL statements are being processed, either from inside knowledge or by\nobserving system behavior in response to invalid inputs. When the attacker\nidentifies scenarios where SQL queries are being assembled by application code\n(which may be within the database or separate from it) and executed\ndynamically, the attacker is then able to craft input strings that subvert the\nintent of the query. Potentially, the attacker can gain unauthorized access to\ndata, including security settings, and severely corrupt or destroy the database.\n\n    The principal protection against code injection is not to use dynamic\nexecution except where it provides necessary functionality that cannot be\nutilized otherwise. Use strongly typed data items rather than general-purpose\nstrings as input parameters to task-specific, pre-compiled stored procedures\nand functions (and triggers).\n\n    When dynamic execution is necessary, ways to mitigate the risk include the\nfollowing, which should be implemented both in the on-screen application and at\nthe database level, in the stored procedures:\n    -- Allow strings as input only when necessary.\n    -- Rely on data typing to validate numbers, dates, etc. Do not accept\ninvalid values. If substituting other values for them, think carefully about\nwhether this could be subverted.\n    -- Limit the size of input strings to what is truly necessary.\n    -- If single quotes/apostrophes, double quotes, semicolons, equal signs,\nangle brackets, or square brackets will never be valid as input, reject them.\n    -- If comment markers will never be valid as input, reject them. In SQL,\nthese are -- or /*  */\n    -- If HTML and XML tags, entities, comments, etc., will never be valid,\nreject them.\n    -- If wildcards are present, reject them unless truly necessary. In SQL\nthese are the underscore and the percentage sign, and the word \"ESCAPE\" is\nalso a clue that wildcards are in use.\n    -- If SQL key words, such as SELECT, INSERT, UPDATE, DELETE, CREATE, ALTER,\nDROP, ESCAPE, UNION, GRANT, REVOKE, DENY, MODIFY will never be valid, reject\nthem. Use case-insensitive comparisons when    searching for these. Bear in\nmind that some of these words, particularly Grant (as a person's name), could\nalso be valid input.\n    -- If there are range limits on the values that may be entered, enforce\nthose limits.\n    -- Institute procedures for inspection of programs for correct use of\ndynamic coding, by a party other than the developer.\n    -- Conduct rigorous testing of program modules that use dynamic coding,\nsearching for ways to subvert the intended use.\n    -- Record the inspection and testing in the system documentation.\n    -- Bear in mind that all this applies not only to screen input, but also to\nthe values in an incoming message to a web service or to a stored procedure\ncalled by a software component that has not itself been hardened in these ways.\nNot only can the caller be subject to such vulnerabilities; it may itself be\nthe attacker.\n\n    The MySQL Firewall runs within the MySQL server and enables database\nadministrators to permit or deny SQL statement execution based on matching\nagainst whitelists of accepted statement patterns. This hardens MySQL Server\nagainst attacks such as SQL injection or attempts to exploit applications by\nusing them outside of their legitimate query workload characteristics.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review MySQL Database Server 8.0 source code (stored procedures, functions,\nand triggers) and application source code to identify cases of dynamic code\nexecution.\n\n    Determine if the MySQL Enterprise Firewall is installed and trained to\nrecognize normal behavior and block or alert of abnormal requests. Run the\nfollowing command:\n    SHOW GLOBAL VARIABLES LIKE 'mysql_firewall_mode';\n\n    Review firewall users and Mode.\n    SELECT * FROM INFORMATION_SCHEMA.MYSQL_FIREWALL_USERS;\n    If no rows are returned and no firewall allow lists are active, this is a\nfinding.\n\n    If LEARNING is returned, the firewall is building an allow list for the\nuserhost user.\n\n    If PROTECTING is returned, the firewall will only permit SQL on the allow\nlist for the userhost user to execute.\n\n    If DETECTING is returned, the firewall will write to the firewall log SQL\nnot on the allow list for the userhost user to execute.\n\n    If dynamic code execution is employed without protective measures against\ncode injection, this is a finding.",
            "__new": "Review MySQL Database Server 8.0 source code (stored procedures, functions, and triggers) and application source code to identify cases of dynamic code execution.\n\nDetermine if the MySQL Enterprise Firewall is installed and trained to recognize normal behavior and block or alert of abnormal requests. Run the following command:\nSHOW GLOBAL VARIABLES LIKE 'mysql_firewall_mode';\n\nReview firewall users and Mode.\nSELECT * FROM INFORMATION_SCHEMA.MYSQL_FIREWALL_USERS;\nIf no rows are returned and no firewall allow lists are active, this is a finding.\n\nIf LEARNING is returned, the firewall is building an allow list for the userhost user.\n\nIf PROTECTING is returned, the firewall will only permit SQL on the allow list for the userhost user to execute.\n\nIf DETECTING is returned, the firewall will write to the firewall log SQL not on the allow list for the userhost user to execute.\n \nIf dynamic code execution is employed without protective measures against code injection, this is a finding."
          },
          "fix": {
            "__old": "Where dynamic code execution is used, modify the code to implement\nprotections against code injection.\n\n    Enable the MySQL Enterprise Firewall by running this script, which is\nlocated in the mysql home share sub directory.\n    mysql -u root -p mysql < linux_install_firewall.sql\n\n    Train the firewall for users where dynamic code injection is possible, for\nexamples applications that allow user input.\n\n    CALL mysql.sp_set_firewall_mode('fwuser@localhost', 'RECORDING');\n\n    Once the allowlist for the user/host has been captured, the firewall can be\nplaced in PROTECTING (active blocking) or DETECTING(logging) mode.\n    CALL mysql.sp_set_firewall_mode('fwuser@localhost', 'PROTECTING');\n    CALL mysql.sp_set_firewall_mode('fwuser@localhost', 'DETECTING');",
            "__new": "Where dynamic code execution is used, modify the code to implement protections against code injection. \n\nEnable the MySQL Enterprise Firewall by running this script, which is located in the mysql home share sub directory.   \nmysql -u root -p mysql < linux_install_firewall.sql\n\nTrain the firewall for users where dynamic code injection is possible, for examples applications that allow user input.\n\nCALL mysql.sp_set_firewall_mode('fwuser@localhost', 'RECORDING');\n\nOnce the allowlist for the user/host has been captured, the firewall can be placed in PROTECTING (active blocking) or DETECTING(logging) mode.\nCALL mysql.sp_set_firewall_mode('fwuser@localhost', 'PROTECTING');\nCALL mysql.sp_set_firewall_mode('fwuser@localhost', 'DETECTING');"
          }
        }
      },
      "SV-235159": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  mycnf = input('mycnf')\n  \n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n  \n  audit_log_plugin_status = sql_session.query(audit_log_plugin)\n\n  query_audit_log_filter = %(\n  SELECT\n     audit_log_filter.NAME,\n     audit_log_filter.FILTER\n  FROM\n     mysql.audit_log_filter;\n  )\n\n  audit_log_filter_entries = sql_session.query(query_audit_log_filter)\n\n  query_audit_log_user = %(\n  SELECT\n     audit_log_user.USER,\n     audit_log_user.HOST,\n     audit_log_user.FILTERNAME\n  FROM\n     mysql.audit_log_user;\n  )\n\n  audit_log_user_entries = sql_session.query(query_audit_log_user)\n\n  query_server_audit_events = %(SHOW variables LIKE 'server_audit_events';)\n\n  server_audit_events_setting = sql_session.query(query_server_audit_events)\n\n\n  if !input('aws_rds')\n\n    describe ini(mycnf) do\n      its ('mysqld.plugin-load-add') { should cmp 'audit_log.so' }\n      its ('mysqld.audit-log') { should cmp 'FORCE_PLUS_PERMANENT' }\n    end\n\n    describe 'Audit Log Plugin status' do\n      subject { audit_log_plugin_status.results.column('plugin_status').join }\n      it { should cmp 'ACTIVE' }\n    end\n\n    describe 'List of entries in Table: audit_log_filter' do\n      subject { audit_log_filter_entries.results }\n      it { should_not be_empty }\n    end\n\n    describe 'List of entries in Table: audit_log_user' do\n      subject { audit_log_user_entries.results }\n      it { should_not be_empty }\n    end\n    \n  else\n    \n    describe 'Audit Log Plugin status' do\n      subject { audit_log_plugin_status.results.column('plugin_status') }\n      it { should cmp 'ACTIVE' }\n    end\n\n    describe 'Community Server server_audit_events settings' do\n      subject { Set[server_audit_events_setting.results.column('value')[0].split(',')] }\n      it { should cmp Set['CONNECT,QUERY'.split(',')] }\n    end\n    \n  end\n    ",
        "tags": {
          "check_id__added": "C-38378r623597_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235159r638812_rule",
            "__new": "SV-235159r960888_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must initiate session auditing upon\nstartup.",
          "__new": "The MySQL Database Server 8.0 must initiate session auditing upon startup."
        },
        "desc": {
          "__old": "Session auditing is for use when a user's activities are under\ninvestigation. To be sure of capturing all activity during those periods when\nsession auditing is in use, it needs to be in operation for the whole time the\nDatabase Management System (DBMS) is running.",
          "__new": "Session auditing is for use when a user's activities are under investigation. To be sure of capturing all activity during those periods when session auditing is in use, it needs to be in operation for the whole time the Database Management System (DBMS) is running."
        },
        "descs": {
          "default__deleted": "Session auditing is for use when a user's activities are under\ninvestigation. To be sure of capturing all activity during those periods when\nsession auditing is in use, it needs to be in operation for the whole time the\nDatabase Management System (DBMS) is running.",
          "rationale__deleted": "",
          "check": {
            "__old": "Determine if an audit is configured and enabled.\n\n    The my.cnf file will set the variable audit_file.\n\n    Review the my.cnf file for the following entries:\n    [mysqld]\n    plugin-load-add=audit_log.so\n    audit-log=FORCE_PLUS_PERMANENT\n\n    If these entries are not present. This is a finding.\n\n    Execute the following query:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'audit%';\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for SERVER_AUDIT should return ACTIVE.]\n\n    The status of the \"audit_log plugin\" must be \"active\". If it is not\n\"active\", this is a finding.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used and configured to \naudit all CONNECT and QUERY events.\nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the CONNECT and QUERY events are enabled:\n    SHOW variables LIKE 'server_audit_events';\n    +---------------------+---------------+\n    | Variable_name       | Value         |\n    +---------------------+---------------+\n    | server_audit_events | CONNECT,QUERY |\n    +---------------------+---------------+\n  \t1 row in set (0.00 sec)    \n  \tThe value for server_audit_events should return CONNECT,QUERY.]\n  \n    Review audit filters and associated users by running the following queries:\n    SELECT `audit_log_filter`.`NAME`,\n        `audit_log_filter`.`FILTER`\n    FROM `mysql`.`audit_log_filter`;\n\n    SELECT `audit_log_user`.`USER`,\n        `audit_log_user`.`HOST`,\n        `audit_log_user`.`FILTERNAME`\n    FROM `mysql`.`audit_log_user`;\n\n    All currently defined audits for the MySQL server instance will be listed.\nIf no audits are returned, this is a finding.",
            "__new": "Determine if an audit is configured and enabled. \n\nThe my.cnf file will set the variable audit_file.\n\nReview the my.cnf file for the following entries:\n[mysqld]\nplugin-load-add=audit_log.so\naudit-log=FORCE_PLUS_PERMANENT\n\nIf these entries are not present. This is a finding.\n\nExecute the following query: \nSELECT PLUGIN_NAME, PLUGIN_STATUS\n       FROM INFORMATION_SCHEMA.PLUGINS\n       WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the \"audit_log plugin\" must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n    `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n    `audit_log_user`.`HOST`,\n    `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding."
          },
          "fix": {
            "__old": "Configure the MySQL Audit to automatically start during system startup.\nAdd to the my.cnf:\n\n[mysqld]\nplugin-load-add=audit_log.so\naudit-log=FORCE_PLUS_PERMANENT\naudit-log-format=JSON",
            "__new": "Configure the MySQL Audit to automatically start during system startup.  \nAdd to the my.cnf: \n\n[mysqld]\nplugin-load-add=audit_log.so\naudit-log=FORCE_PLUS_PERMANENT\naudit-log-format=JSON"
          }
        }
      },
      "SV-235160": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_admins = input('audit_admins')\n  else\n    audit_admins = input('audit_admins') + [\"'rdsadmin'@'localhost'\"]\n  end\n\n  query_audit_admins = %(\n  SELECT\n     * \n  FROM\n     information_schema.user_privileges \n  WHERE\n     privilege_type = 'AUDIT_ADMIN';\n  )\n\n  describe 'AUDIT_ADMINs defined' do\n    subject { sql_session.query(query_audit_admins).results.column('grantee') }\n    it { should be_in audit_admins }\n  end",
        "tags": {
          "check_id__added": "C-38379r623600_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235160r638812_rule",
            "__new": "SV-235160r960939_rule"
          },
          "nist": [
            [
              "-",
              "AU-9"
            ],
            [
              "+",
              "AU-9 a"
            ]
          ]
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must protect its audit features from\nunauthorized access.",
          "__new": "The MySQL Database Server 8.0 must protect its audit features from unauthorized access."
        },
        "desc": {
          "__old": "Protecting audit data also includes identifying and protecting the\ntools used to view and manipulate log data.\n\n    Depending upon the log format and application, system and application log\ntools may provide the only means to manipulate and manage application and\nsystem log data. It is, therefore, imperative that access to audit tools be\ncontrolled and protected from unauthorized access.\n\n    Applications providing tools to interface with audit data will leverage\nuser permissions and roles identifying the user accessing the tools and the\ncorresponding rights the user enjoys to make access decisions regarding the\naccess to audit tools.\n\n    Audit tools include, but are not limited to, OS-provided audit tools,\nvendor-provided audit tools, and open source audit tools needed to successfully\nview and manipulate audit information system activity and records.\n\n    If an attacker were to gain access to audit tools, he could analyze audit\nlogs for system weaknesses or weaknesses in the auditing itself. An attacker\ncould also manipulate logs to hide evidence of malicious activity.",
          "__new": "Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. \n\nDepending upon the log format and application, system and application log tools may provide the only means to manipulate and manage application and system log data. It is, therefore, imperative that access to audit tools be controlled and protected from unauthorized access. \n\nApplications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys to make access decisions regarding the access to audit tools.\n\nAudit tools include, but are not limited to, OS-provided audit tools, vendor-provided audit tools, and open source audit tools needed to successfully view and manipulate audit information system activity and records. \n\nIf an attacker were to gain access to audit tools, he could analyze audit logs for system weaknesses or weaknesses in the auditing itself. An attacker could also manipulate logs to hide evidence of malicious activity."
        },
        "descs": {
          "default__deleted": "Protecting audit data also includes identifying and protecting the\ntools used to view and manipulate log data.\n\n    Depending upon the log format and application, system and application log\ntools may provide the only means to manipulate and manage application and\nsystem log data. It is, therefore, imperative that access to audit tools be\ncontrolled and protected from unauthorized access.\n\n    Applications providing tools to interface with audit data will leverage\nuser permissions and roles identifying the user accessing the tools and the\ncorresponding rights the user enjoys to make access decisions regarding the\naccess to audit tools.\n\n    Audit tools include, but are not limited to, OS-provided audit tools,\nvendor-provided audit tools, and open source audit tools needed to successfully\nview and manipulate audit information system activity and records.\n\n    If an attacker were to gain access to audit tools, he could analyze audit\nlogs for system weaknesses or weaknesses in the auditing itself. An attacker\ncould also manipulate logs to hide evidence of malicious activity.",
          "rationale__deleted": "",
          "check": {
            "__old": "Check users with permissions to administer MySQL Auditing.\n\n    select * from information_schema.user_privileges where privilege_type =\n'AUDIT_ADMIN';\n\n    If unauthorized accounts have these the AUDIT_ADMIN privilege, this is a\nfinding.",
            "__new": "Check users with permissions to administer MySQL Auditing.\n\nselect * from information_schema.user_privileges where privilege_type = 'AUDIT_ADMIN';\n\nIf unauthorized accounts have these the AUDIT_ADMIN privilege, this is a finding."
          },
          "fix": {
            "__old": "Remove audit-related permissions from individuals and roles not authorized\nto have them.\n\n    REVOKE AUDIT_ADMIN on *.* FROM <user>;",
            "__new": "Remove audit-related permissions from individuals and roles not authorized to have them. \n\nREVOKE AUDIT_ADMIN on *.* FROM <user>;"
          }
        }
      },
      "SV-235161": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_admins = input('audit_admins')\n  else\n    audit_admins = input('audit_admins') + [\"'rdsadmin'@'localhost'\"]\n  end\n\n  query_audit_admins = %(\n  SELECT\n     * \n  FROM\n     information_schema.user_privileges \n  WHERE\n     privilege_type = 'AUDIT_ADMIN';\n  )\n\n  query_keyring_plugins = %(\n  SELECT\n     * \n  FROM\n     information_schema.PLUGINS \n  where\n     plugin_name like 'keyring%';\n  )\n\n  audit_log_encryption = %(\n  SELECT\n     VARIABLE_NAME,\n     VARIABLE_VALUE \n  FROM\n     performance_schema.global_variables \n  WHERE\n     VARIABLE_NAME LIKE 'audit_log_encryption' ;\n  )\n\n  describe 'AUDIT_ADMINs defined' do\n    subject { sql_session.query(query_audit_admins).results.column('grantee') }\n    it { should be_in audit_admins }\n  end\n\n  if !input('aws_rds')\n\n    describe \"List of installed keyring plugins\" do\n      subject { sql_session.query(query_keyring_plugins).results.column('variable_value') }\n      it { should_not be_empty }\n    end\n\n    describe \"audit_log_encryption config\" do\n      subject { sql_session.query(audit_log_encryption).results.column('variable_value') }\n      it { should cmp 'AES' }\n    end\n    \n  end\n  ",
        "tags": {
          "check_id__added": "C-38380r623603_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235161r638812_rule",
            "__new": "SV-235161r960942_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must protect its audit configuration\nfrom unauthorized modification.",
          "__new": "The MySQL Database Server 8.0 must protect its audit configuration from unauthorized modification."
        },
        "desc": {
          "__old": "Protecting audit data also includes identifying and protecting the\ntools used to view and manipulate log data. Therefore, protecting audit tools\nis necessary to prevent unauthorized operation on audit data.\n\n    Applications providing tools to interface with audit data will leverage\nuser permissions and roles identifying the user accessing the tools and the\ncorresponding rights the user enjoys in order make access decisions regarding\nthe modification of audit tools.\n\n    Audit tools include, but are not limited to, vendor-provided and open\nsource audit tools needed to successfully view and manipulate audit information\nsystem activity and records. Audit tools include custom queries and report\ngenerators.",
          "__new": "Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. Therefore, protecting audit tools is necessary to prevent unauthorized operation on audit data.\n\nApplications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the modification of audit tools.\n\nAudit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators."
        },
        "descs": {
          "default__deleted": "Protecting audit data also includes identifying and protecting the\ntools used to view and manipulate log data. Therefore, protecting audit tools\nis necessary to prevent unauthorized operation on audit data.\n\n    Applications providing tools to interface with audit data will leverage\nuser permissions and roles identifying the user accessing the tools and the\ncorresponding rights the user enjoys in order make access decisions regarding\nthe modification of audit tools.\n\n    Audit tools include, but are not limited to, vendor-provided and open\nsource audit tools needed to successfully view and manipulate audit information\nsystem activity and records. Audit tools include custom queries and report\ngenerators.",
          "rationale__deleted": "",
          "check": {
            "__old": "Check users with permissions to administer MySQL Auditing.\n\n    select * from information_schema.user_privileges where privilege_type =\n'AUDIT_ADMIN';\n\n    If unauthorized accounts have the AUDIT_ADMIN privilege, this is a finding.\n\n    Check that a keyring plugin is installed.\n    SELECT * FROM information_schema.PLUGINS where plugin_name like 'keyring%';\n\n    If no keyring is installed, this is a finding.\n\n    Check if the audit files are encrypted.\n\n    To check for data encryption at rest settings in MySQL:\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables where variable_name =\n'audit_log_encryption';\n\n    If \"audit_log_encryption\" is not set to \"AES\", this is a finding.",
            "__new": "Check users with permissions to administer MySQL Auditing.\n\nselect * from information_schema.user_privileges where privilege_type = 'AUDIT_ADMIN';\n\nIf unauthorized accounts have the AUDIT_ADMIN privilege, this is a finding.\n\nCheck that a keyring plugin is installed.\nSELECT * FROM information_schema.PLUGINS where plugin_name like 'keyring%';\n\nIf no keyring is installed, this is a finding.\n\nCheck if the audit files are encrypted.\n\nTo check for data encryption at rest settings in MySQL:\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables where variable_name = 'audit_log_encryption';\n\nIf \"audit_log_encryption\" is not set to \"AES\", this is a finding."
          },
          "fix": {
            "__old": "Remove audit-related permissions from individuals and roles not authorized\nto have them.\n\n    REVOKE AUDIT_ADMIN on *.* FROM <user>;\n\n    Set audit log format to use AES encryption.\n    sudo vi /etc/my.cnf\n    [mysqld]\n    early-plugin-load=keyring_file.so\n    audit-log=FORCE_PLUS_PERMANENT\n    audit-log-format=JSON\n    audit-log-encryption=AES\n\n    Note: First instantiate the keyring plugin which is needed to store the\naudit encryption key.\n    The example above has an \"early-plugin-load=keyring_file.so\" entry in the\nmy.cnf file.\n    A keyring plugin must be present before adding the\n\"audit-log-encryption=AES\" entry or the database will not start.\n\n    Below are valid key ring plugins:\n\n    For dev test - not encrypted\n    early-plugin-load=keyring_file.so\n\n    Encrypted file\n    early-plugin-load=keyring_encrypted_file.so\n    keyring_encrypted_file_data=/usr/local/mysql/mysql-keyring/keyring-encrypted\n    keyring_encrypted_file_password=password\n\n    KMIP\n    early-plugin-load=keyring_okv.so\n    keyring_okv_conf_dir=/usr/local/mysql/mysql-keyring-okv\n\n    Oracle Cloud Vault\n    early-plugin-load=keyring_oci.so\n    keyring_oci_user=ocid1.user.oc1..longAlphaNumericString\n    keyring_oci_tenancy=ocid1.tenancy.oc1..longAlphaNumericString\n    keyring_oci_compartment=ocid1.compartment.oc1..longAlphaNumericString\n\nkeyring_oci_virtual_vault=ocid1.vault.oc1.iad.shortAlphaNumericString.longAlphaNumericString\n\nkeyring_oci_master_key=ocid1.key.oc1.iad.shortAlphaNumericString.longAlphaNumericString\n\nkeyring_oci_encryption_endpoint=shortAlphaNumericString-crypto.kms.us-ashburn-1.oraclecloud.com\n\nkeyring_oci_management_endpoint=shortAlphaNumericString-management.kms.us-ashburn-1.oraclecloud.com\n    keyring_oci_vaults_endpoint=vaults.us-ashburn-1.oci.oraclecloud.com\n    keyring_oci_secrets_endpoint=secrets.vaults.us-ashburn-1.oci.oraclecloud.com\n    keyring_oci_key_file=file_name\n    keyring_oci_key_fingerprint=12:34:56:78:90:ab:cd:ef:12:34:56:78:90:ab:cd:ef\n\n    Hashicorp\n    early-plugin-load=keyring_hashicorp.so\n    keyring_hashicorp_role_id='ee3b495c-d0c9-11e9-8881-8444c71c32aa'\n    keyring_hashicorp_secret_id='0512af29-d0ca-11e9-95ee-0010e00dd718'\n    keyring_hashicorp_store_path='/v1/kv/mysql'",
            "__new": "Remove audit-related permissions from individuals and roles not authorized to have them. \n\nREVOKE AUDIT_ADMIN on *.* FROM <user>;\n\nSet audit log format to use AES encryption.\nsudo vi /etc/my.cnf\n[mysqld]\nearly-plugin-load=keyring_file.so\naudit-log=FORCE_PLUS_PERMANENT\naudit-log-format=JSON\naudit-log-encryption=AES\n\nNote: First instantiate the keyring plugin which is needed to store the audit encryption key.\nThe example above has an \"early-plugin-load=keyring_file.so\" entry in the my.cnf file.  \nA keyring plugin must be present before adding the \"audit-log-encryption=AES\" entry or the database will not start.\n\nBelow are valid key ring plugins: \n\nFor dev test - not encrypted\nearly-plugin-load=keyring_file.so\n\nEncrypted file\nearly-plugin-load=keyring_encrypted_file.so\nkeyring_encrypted_file_data=/usr/local/mysql/mysql-keyring/keyring-encrypted\nkeyring_encrypted_file_password=password\n\nKMIP\nearly-plugin-load=keyring_okv.so\nkeyring_okv_conf_dir=/usr/local/mysql/mysql-keyring-okv\n\nOracle Cloud Vault\nearly-plugin-load=keyring_oci.so\nkeyring_oci_user=ocid1.user.oc1..longAlphaNumericString\nkeyring_oci_tenancy=ocid1.tenancy.oc1..longAlphaNumericString\nkeyring_oci_compartment=ocid1.compartment.oc1..longAlphaNumericString\nkeyring_oci_virtual_vault=ocid1.vault.oc1.iad.shortAlphaNumericString.longAlphaNumericString\nkeyring_oci_master_key=ocid1.key.oc1.iad.shortAlphaNumericString.longAlphaNumericString\nkeyring_oci_encryption_endpoint=shortAlphaNumericString-crypto.kms.us-ashburn-1.oraclecloud.com\nkeyring_oci_management_endpoint=shortAlphaNumericString-management.kms.us-ashburn-1.oraclecloud.com\nkeyring_oci_vaults_endpoint=vaults.us-ashburn-1.oci.oraclecloud.com\nkeyring_oci_secrets_endpoint=secrets.vaults.us-ashburn-1.oci.oraclecloud.com\nkeyring_oci_key_file=file_name\nkeyring_oci_key_fingerprint=12:34:56:78:90:ab:cd:ef:12:34:56:78:90:ab:cd:ef\n\nHashicorp\nearly-plugin-load=keyring_hashicorp.so\nkeyring_hashicorp_role_id='ee3b495c-d0c9-11e9-8881-8444c71c32aa'\nkeyring_hashicorp_secret_id='0512af29-d0ca-11e9-95ee-0010e00dd718'\nkeyring_hashicorp_store_path='/v1/kv/mysql'"
          }
        }
      },
      "SV-235162": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_admins = input('audit_admins')\n  else\n    audit_admins = input('audit_admins') + [\"'rdsadmin'@'localhost'\"]\n  end\n\n  query_audit_admins = %(\n  SELECT\n     * \n  FROM\n     information_schema.user_privileges \n  WHERE\n     privilege_type = 'AUDIT_ADMIN';\n  )\n\n  describe 'AUDIT_ADMINs defined' do\n    subject { sql_session.query(query_audit_admins).results.column('grantee') }\n    it { should be_in audit_admins }\n  end",
        "tags": {
          "check_id__added": "C-38381r623606_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235162r638812_rule",
            "__new": "SV-235162r960945_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must protect its audit features from\nunauthorized removal.",
          "__new": "The MySQL Database Server 8.0 must protect its audit features from unauthorized removal."
        },
        "desc": {
          "__old": "Protecting audit data also includes identifying and protecting the\ntools used to view and manipulate log data. Therefore, protecting audit tools\nis necessary to prevent unauthorized operation on audit data.\n\n    Applications providing tools to interface with audit data will leverage\nuser permissions and roles identifying the user accessing the tools and the\ncorresponding rights the user enjoys in order make access decisions regarding\nthe deletion of audit tools.\n\n    Audit tools include, but are not limited to, vendor-provided and open\nsource audit tools needed to successfully view and manipulate audit information\nsystem activity and records. Audit tools include custom queries and report\ngenerators.",
          "__new": "Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. Therefore, protecting audit tools is necessary to prevent unauthorized operation on audit data.\n\nApplications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the deletion of audit tools.\n\nAudit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators."
        },
        "descs": {
          "default__deleted": "Protecting audit data also includes identifying and protecting the\ntools used to view and manipulate log data. Therefore, protecting audit tools\nis necessary to prevent unauthorized operation on audit data.\n\n    Applications providing tools to interface with audit data will leverage\nuser permissions and roles identifying the user accessing the tools and the\ncorresponding rights the user enjoys in order make access decisions regarding\nthe deletion of audit tools.\n\n    Audit tools include, but are not limited to, vendor-provided and open\nsource audit tools needed to successfully view and manipulate audit information\nsystem activity and records. Audit tools include custom queries and report\ngenerators.",
          "rationale__deleted": "",
          "check": {
            "__old": "Check users with permissions to administer MySQL Auditing.\n\n    select * from information_schema.user_privileges where privilege_type =\n'AUDIT_ADMIN';\n\n    If unauthorized accounts have these the AUDIT_ADMIN privilege, this is a\nfinding.",
            "__new": "Check users with permissions to administer MySQL Auditing.\n\nselect * from information_schema.user_privileges where privilege_type = 'AUDIT_ADMIN';\n\nIf unauthorized accounts have these the AUDIT_ADMIN privilege, this is a finding."
          },
          "fix": {
            "__old": "This requirement is a permanent finding and cannot be fixed. An\nappropriate mitigation for the system must be implemented, but this finding\ncannot be considered fixed.",
            "__new": "This requirement is a permanent finding and cannot be fixed. An appropriate mitigation for the system must be implemented, but this finding cannot be considered fixed."
          }
        }
      },
      "SV-235163": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  query_table_privileges = %(\n  SELECT\n     * \n  FROM\n     information_schema.TABLE_PRIVILEGES \n  where\n     (\n        table_schema = 'mysql' \n        and table_name = 'plugin'\n     )\n     or \n     (\n        table_schema = 'mysql' \n        and table_name = 'component'\n     );\n  )\n\n  query_privileges = %(\n  SELECT\n     * \n  FROM\n     information_schema.user_privileges \n  WHERE\n     privilege_type = 'INSERT' \n     or privilege_type = 'DELETE';\n  )\n\n  describe 'Manually Review Server documentation to determine the authorized owner and users or\ngroups with modify rights for this SQL instance`s binary files. Additionally\ncheck the owner and users or groups with modify rights for shared software\nlibrary paths on disk.' do\n    skip 'Manually Review Server documentation to determine the authorized owner and users or\n    groups with modify rights for this SQL instance`s binary files. Additionally\n    check the owner and users or groups with modify rights for shared software\n    library paths on disk.'\n  end\n\n\n  describe \"Manually review table specific privileges.\\n#{sql_session.query(query_table_privileges).output}\" do\n    skip \"Manually review table specific privileges.\\n#{sql_session.query(query_table_privileges).output}\"\n  end\n\n  describe \"Manually review INSERT and DELETE privileges.\\n#{sql_session.query(query_privileges).output}\" do\n    skip \"Manually review INSERT and DELETE privileges.\\n#{sql_session.query(query_privileges).output}\"\n  end",
        "tags": {
          "check_id__added": "C-38382r623609_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235163r638812_rule",
            "__new": "SV-235163r960960_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must limit privileges to change software\nmodules, to include stored procedures, functions and triggers, and links to\nsoftware external to the MySQL Database Server 8.0.",
          "__new": "The MySQL Database Server 8.0 must limit privileges to change software modules, to include stored procedures, functions and triggers, and links to software external to the MySQL Database Server 8.0."
        },
        "desc": {
          "__old": "If the system were to allow any user to make changes to software\nlibraries, then those changes might be implemented without undergoing the\nappropriate testing and approvals that are part of a robust change management\nprocess.\n\n    Accordingly, only qualified and authorized individuals will be allowed to\nobtain access to information system components for purposes of initiating\nchanges, including upgrades and modifications.\n\n    Unmanaged changes that occur to the database software libraries or\nconfiguration can lead to unauthorized or compromised installations.",
          "__new": "If the system were to allow any user to make changes to software libraries, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nAccordingly, only qualified and authorized individuals will be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.\n\nUnmanaged changes that occur to the database software libraries or configuration can lead to unauthorized or compromised installations."
        },
        "descs": {
          "default__deleted": "If the system were to allow any user to make changes to software\nlibraries, then those changes might be implemented without undergoing the\nappropriate testing and approvals that are part of a robust change management\nprocess.\n\n    Accordingly, only qualified and authorized individuals will be allowed to\nobtain access to information system components for purposes of initiating\nchanges, including upgrades and modifications.\n\n    Unmanaged changes that occur to the database software libraries or\nconfiguration can lead to unauthorized or compromised installations.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review Server documentation to determine the authorized owner and users or\ngroups with modify rights for this SQL instance's binary files. Additionally\ncheck the owner and users or groups with modify rights for shared software\nlibrary paths on disk.\n\n    If any unauthorized users are granted modify rights, this is a finding.\n\n    A plugin located in a plugin library file can be loaded at runtime with the\nINSTALL PLUGIN statement. The statement also registers the plugin in the\nmysql.plugin table to cause the server to load it on subsequent restarts. For\nthis reason, INSTALL PLUGIN requires the INSERT privilege for the mysql.plugin\ntable, and UNINSTALL requires DELETE.\n\n    Run the following statement to check for table specific privileges:\n    SELECT * FROM information_schema.TABLE_PRIVILEGES where\n(table_schema='mysql' and table_name=`plugin`) or (table_schema='mysql' and\ntable_name='component');\n\n    If privilege_type is INSERT or DELETE for an unauthorized user, this is a\nfinding.\n\n    Run the following statement to check for global privileges:\n    select * from  information_schema.user_privileges where\nprivilege_type='INSERT' or privilege_type='DELETE';\n\n    If privilege_type is INSERT or DELETE for an unauthorized user, this is a\nfinding.",
            "__new": "Review Server documentation to determine the authorized owner and users or groups with modify rights for this SQL instance's binary files. Additionally check the owner and users or groups with modify rights for shared software library paths on disk. \n\nIf any unauthorized users are granted modify rights, this is a finding. \n\nA plugin located in a plugin library file can be loaded at runtime with the INSTALL PLUGIN statement. The statement also registers the plugin in the mysql.plugin table to cause the server to load it on subsequent restarts. For this reason, INSTALL PLUGIN requires the INSERT privilege for the mysql.plugin table, and UNINSTALL requires DELETE.\n\nRun the following statement to check for table specific privileges:\nSELECT * FROM information_schema.TABLE_PRIVILEGES where (table_schema='mysql' and table_name=`plugin`) or (table_schema='mysql' and table_name='component';)\n\nIf privilege_type is INSERT or DELETE for an unauthorized user, this is a finding.\n\nRun the following statement to check for global privileges:\nselect * from  information_schema.user_privileges where privilege_type='INSERT' or privilege_type='DELETE';\n\nIf privilege_type is INSERT or DELETE for an unauthorized user, this is a finding."
          },
          "fix": {
            "__old": "Remove permissions from users who should not have insert or\nupdate access to the mysql.plugin or mysql.component table.",
            "__new": "Remove permissions from users who should not have insert or update access to the mysql.plugin or mysql.component table."
          }
        }
      },
      "SV-235164": {
        "describe__deleted": "  describe 'Manually review procedures for controlling and granting access to use of the DBMS\nsoftware installation account.' do\n    skip 'Manually review procedures for controlling and granting access to use of the DBMS\n    software installation account.'\n  end",
        "tags": {
          "check_id__added": "C-38383r623612_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235164r638812_rule",
            "__new": "SV-235164r960960_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 software installation account must be\nrestricted to authorized users.",
          "__new": "The MySQL Database Server 8.0 software installation account must be restricted to authorized users."
        },
        "desc": {
          "__old": "When dealing with change control issues, it must be noted any changes\nto the hardware, software, and/or firmware components of the information system\nand/or application can have significant effects on the overall security of the\nsystem.\n\n    If the system were to allow any user to make changes to software libraries,\nthose changes might be implemented without undergoing the appropriate testing\nand approvals that are part of a robust change management process.\n\n    Accordingly, only qualified and authorized individuals must be allowed\naccess to information system components for purposes of initiating changes,\nincluding upgrades and modifications.\n\n    DBA and other privileged administrative or application owner accounts are\ngranted privileges that allow actions that can have a great impact on database\nsecurity and operation. It is especially important to grant privileged access\nto only those persons who are qualified and authorized to use them.",
          "__new": "When dealing with change control issues, it must be noted any changes to the hardware, software, and/or firmware components of the information system and/or application can have significant effects on the overall security of the system. \n\nIf the system were to allow any user to make changes to software libraries, those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nAccordingly, only qualified and authorized individuals must be allowed access to information system components for purposes of initiating changes, including upgrades and modifications.\n\nDBA and other privileged administrative or application owner accounts are granted privileges that allow actions that can have a great impact on database security and operation. It is especially important to grant privileged access to only those persons who are qualified and authorized to use them."
        },
        "descs": {
          "default__deleted": "When dealing with change control issues, it must be noted any changes\nto the hardware, software, and/or firmware components of the information system\nand/or application can have significant effects on the overall security of the\nsystem.\n\n    If the system were to allow any user to make changes to software libraries,\nthose changes might be implemented without undergoing the appropriate testing\nand approvals that are part of a robust change management process.\n\n    Accordingly, only qualified and authorized individuals must be allowed\naccess to information system components for purposes of initiating changes,\nincluding upgrades and modifications.\n\n    DBA and other privileged administrative or application owner accounts are\ngranted privileges that allow actions that can have a great impact on database\nsecurity and operation. It is especially important to grant privileged access\nto only those persons who are qualified and authorized to use them.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review procedures for controlling and granting access to use of the DBMS\nsoftware installation account.\n\n    If access or use of this account is not restricted to the minimum number of\npersonnel required, or if unauthorized access to the account has been granted,\nthis is a finding.",
            "__new": "Review procedures for controlling and granting access to use of the DBMS software installation account.\n\nIf access or use of this account is not restricted to the minimum number of personnel required, or if unauthorized access to the account has been granted, this is a finding."
          },
          "fix": {
            "__old": "Develop, document, and implement procedures to restrict and\ntrack use of the MySQL Database Server 8.0 software installation account.",
            "__new": "Develop, document, and implement procedures to restrict and track use of the MySQL Database Server 8.0 software installation account."
          }
        }
      },
      "SV-235165": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  query_directory_variables = %(\n  show variables \n  where\n     variable_name like '%dir%';\n  )\n\n  query_configuration_variables = %(\n  SELECT\n     t1.*,\n     VARIABLE_VALUE \n  FROM\n     performance_schema.variables_info t1 \n     JOIN\n        performance_schema.global_variables t2 \n        ON t2.VARIABLE_NAME = t1.VARIABLE_NAME \n  where\n     length(t1.variable_path) > 0;\n   )\n\n\n  describe \"Review the MySQL Database Server 8.0  software library directory and note\nother root directories located on the same disk directory or any subdirectories.\n\n    If any non-MySQL Database Server 8.0 software directories exist on the\ndatadir, basedir, or other non tmpdir directories, examine or investigate their\nuse.\\n#{sql_session.query(query_directory_variables).output}\" do\n    skip \"Review the MySQL Database Server 8.0  software library directory and note\n    other root directories located on the same disk directory or any subdirectories.\n    \n        If any non-MySQL Database Server 8.0 software directories exist on the\n    datadir, basedir, or other non tmpdir directories, examine or investigate their\n    use.\\n#{sql_session.query(query_directory_variables).output}\"\n  end\n\n  describe \"Manually review result of VARIABLE_PATH shows that configuration values are not stored\nin files dedicated directories separate from the host os or other applications,\nthis is a finding.\\n#{sql_session.query(query_configuration_variables).output}\" do\n    skip \"Manually review result of VARIABLE_PATH shows that configuration values are not stored\n  in files dedicated directories separate from the host os or other applications,\n  this is a finding.\\n#{sql_session.query(query_configuration_variables).output}\"\n  end",
        "tags": {
          "check_id__added": "C-38384r623615_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235165r638812_rule",
            "__new": "SV-235165r960960_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "Database software, including MySQL Database Server 8.0 configuration\nfiles, must be stored in dedicated directories, or DASD pools (remove),\nseparate from the host OS and other applications.",
          "__new": "Database software, including MySQL Database Server 8.0 configuration files, must be stored in dedicated directories, or DASD pools (remove), separate from the host OS and other applications."
        },
        "desc": {
          "__old": "When dealing with change control issues, it should be noted any\nchanges to the hardware, software, and/or firmware components of the\ninformation system and/or application can potentially have significant effects\non the overall security of the system.\n\n    Multiple applications can provide a cumulative negative effect. A\nvulnerability and subsequent exploit to one application can lead to an exploit\nof other applications sharing the same security context. For example, an\nexploit to a web server process that leads to unauthorized administrative\naccess to host system directories can most likely lead to a compromise of all\napplications hosted by the same system. Database software not installed using\ndedicated directories both threatens and is threatened by other hosted\napplications. Access controls defined for one application may by default\nprovide access to the other application's database objects or directories. Any\nmethod that provides any level of separation of security context assists in the\nprotection between applications.",
          "__new": "When dealing with change control issues, it should be noted any changes to the hardware, software, and/or firmware components of the information system and/or application can potentially have significant effects on the overall security of the system. \n\nMultiple applications can provide a cumulative negative effect. A vulnerability and subsequent exploit to one application can lead to an exploit of other applications sharing the same security context. For example, an exploit to a web server process that leads to unauthorized administrative access to host system directories can most likely lead to a compromise of all applications hosted by the same system. Database software not installed using dedicated directories both threatens and is threatened by other hosted applications. Access controls defined for one application may by default provide access to the other application's database objects or directories. Any method that provides any level of separation of security context assists in the protection between applications."
        },
        "descs": {
          "default__deleted": "When dealing with change control issues, it should be noted any\nchanges to the hardware, software, and/or firmware components of the\ninformation system and/or application can potentially have significant effects\non the overall security of the system.\n\n    Multiple applications can provide a cumulative negative effect. A\nvulnerability and subsequent exploit to one application can lead to an exploit\nof other applications sharing the same security context. For example, an\nexploit to a web server process that leads to unauthorized administrative\naccess to host system directories can most likely lead to a compromise of all\napplications hosted by the same system. Database software not installed using\ndedicated directories both threatens and is threatened by other hosted\napplications. Access controls defined for one application may by default\nprovide access to the other application's database objects or directories. Any\nmethod that provides any level of separation of security context assists in the\nprotection between applications.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the MySQL Database Server 8.0  software library directory and note\nother root directories located on the same disk directory or any subdirectories.\n\n    To list directory variables run:\n    show variables where variable_name like '%dir%';\n\n    If any non-MySQL Database Server 8.0 software directories exist on the\ndatadir, basedir, or other non tmpdir directories, examine or investigate their\nuse.\n\n    If any of the directories are used by other applications, including\nthird-party applications that use the MySQL Database Server 8.0, this is a\nfinding.\n\n    Only applications that are required for the functioning and administration,\nnot use, of the MySQL Database Server 8.0 should be located in the same disk\ndirectory as the DBMS software libraries.\n\n    If other applications are located in the same directory as the DBMS, this\nis a finding.\n\n    To determine where the mysql configuration file(s) are being stored and\nwhich configuration file(s) was used for which variables, run the following\ncommand:\n    SELECT t1.*, VARIABLE_VALUE\n           FROM performance_schema.variables_info t1\n           JOIN performance_schema.global_variables t2\n             ON t2.VARIABLE_NAME=t1.VARIABLE_NAME where\nlength(t1.variable_path) > 0;\n\n    If result of VARIABLE_PATH shows that configuration values are not stored\nin files dedicated directories separate from the host os or other applications,\nthis is a finding.",
            "__new": "Review the MySQL Database Server 8.0  software library directory and note other root directories located on the same disk directory or any subdirectories.\n\nTo list directory variables run:\nshow variables where variable_name like '%dir%';\n\nIf any non-MySQL Database Server 8.0 software directories exist on the datadir, basedir, or other non tmpdir directories, examine or investigate their use. \n\nIf any of the directories are used by other applications, including third-party applications that use the MySQL Database Server 8.0, this is a finding.\n\nOnly applications that are required for the functioning and administration, not use, of the MySQL Database Server 8.0 should be located in the same disk directory as the DBMS software libraries. \n\nIf other applications are located in the same directory as the DBMS, this is a finding.\n\nTo determine where the mysql configuration file(s) are being stored and which configuration file(s) was used for which variables, run the following command:\nSELECT t1.*, VARIABLE_VALUE \n       FROM performance_schema.variables_info t1 \n       JOIN performance_schema.global_variables t2 \n         ON t2.VARIABLE_NAME=t1.VARIABLE_NAME where length(t1.variable_path) > 0;\n\nIf result of VARIABLE_PATH shows that configuration values are not stored in files dedicated directories separate from the host os or other applications, this is a finding."
          },
          "fix": {
            "__old": "Install all applications on directories separate from the DBMS software\nlibrary directory. Relocate any directories or reinstall other application\nsoftware that currently shares the DBMS software library directory.\n\n    If it is determined that configuration (options files) are inappropriately\nlocated, take the steps to move and protect these files and reconfigure mysqld\nstartup commands to point to new the file location by setting the\n\"--defaults-file\" to point to the new location and filename for the mysql\nconfiguration file.",
            "__new": "Install all applications on directories separate from the DBMS software library directory. Relocate any directories or reinstall other application software that currently shares the DBMS software library directory.\n\nIf it is determined that configuration (options files) are inappropriately located, take the steps to move and protect these files and reconfigure mysqld startup commands to point to new the file location by setting the \"--defaults-file\" to point to the new location and filename for the mysql configuration file."
          }
        }
      },
      "SV-235166": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  table_names = sql_session.query('SELECT * FROM INFORMATION_SCHEMA.TABLES;').results.column('table_name')\n\n  if table_names.include?('SCHEMA_PRIVILEGES')\n    describe \"Manually review SCHEMA_PRIVILEGES.\\n#{sql_session.query('SELECT * FROM information_schema.SCHEMA_PRIVILEGES;').output}\" do\n      skip \"Manually review SCHEMA_PRIVILEGES.\\n#{sql_session.query('SELECT * FROM information_schema.SCHEMA_PRIVILEGES;').output}\"\n    end\n  end\n\n  if table_names.include?('TABLE_PRIVILEGES')\n    describe \"Manually review TABLE_PRIVILEGES.\\n#{sql_session.query('SELECT * FROM information_schema.TABLE_PRIVILEGES;').output}\" do\n      skip \"Manually review TABLE_PRIVILEGES.\\n#{sql_session.query('SELECT * FROM information_schema.TABLE_PRIVILEGES;').output}\"\n    end\n  end\n\n  if table_names.include?('COLUMN_PRIVILEGES')\n    describe \"Manually review COLUMN_PRIVILEGES.\\n#{sql_session.query('SELECT * FROM information_schema.COLUMN_PRIVILEGES;').output}\" do\n      skip \"Manually review COLUMN_PRIVILEGES.\\n#{sql_session.query('SELECT * FROM information_schema.COLUMN_PRIVILEGES;').output}\"\n    end\n  end\n\n  if table_names.include?('USER_PRIVILEGES')\n    describe \"Manually review USER_PRIVILEGES.\\n#{sql_session.query('SELECT * FROM information_schema.USER_PRIVILEGES;').output}\" do\n      skip \"Manually review USER_PRIVILEGES.\\n#{sql_session.query('SELECT * FROM information_schema.USER_PRIVILEGES;').output}\"\n    end\n  end\n\n  if table_names.include?('ROLE_COLUMN_GRANTS')\n    describe \"Manually review ROLE_COLUMN_GRANTS.\\n#{sql_session.query('SELECT * FROM information_schema.ROLE_COLUMN_GRANTS;').output}\" do\n      skip \"Manually review ROLE_COLUMN_GRANTS.\\n#{sql_session.query('SELECT * FROM information_schema.ROLE_COLUMN_GRANTS;').output}\"\n    end\n  end\n\n  if table_names.include?('ROLE_TABLE_GRANTS')\n    describe \"Manually review ROLE_TABLE_GRANTS.\\n#{sql_session.query('SELECT * FROM information_schema.ROLE_TABLE_GRANTS;').output}\" do\n      skip \"Manually review ROLE_TABLE_GRANTS.\\n#{sql_session.query('SELECT * FROM information_schema.ROLE_TABLE_GRANTS;').output}\"\n    end\n  end",
        "tags": {
          "check_id__added": "C-38385r623618_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235166r638812_rule",
            "__new": "SV-235166r960960_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The role(s)/group(s) used to modify database structure (including but\nnot necessarily limited to tables, indexes, storage, etc.) and logic modules\n(stored procedures, functions, triggers, links to software external to the\nMySQL Database Server 8.0, etc.) must be restricted to authorized users.",
          "__new": "The role(s)/group(s) used to modify database structure (including but not necessarily limited to tables, indexes, storage, etc.) and logic modules (stored procedures, functions, triggers, links to software external to the MySQL Database Server 8.0, etc.) must be restricted to authorized users."
        },
        "desc": {
          "__old": "If the DBMS were to allow any user to make changes to database\nstructure or logic, then those changes might be implemented without undergoing\nthe appropriate testing and approvals that are part of a robust change\nmanagement process.\n\n    Accordingly, only qualified and authorized individuals will be allowed to\nobtain access to information system components for purposes of initiating\nchanges, including upgrades and modifications.\n\n    Unmanaged changes that occur to the database software libraries or\nconfiguration can lead to unauthorized or compromised installations.",
          "__new": "If the DBMS were to allow any user to make changes to database structure or logic, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nAccordingly, only qualified and authorized individuals will be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.\n\nUnmanaged changes that occur to the database software libraries or configuration can lead to unauthorized or compromised installations."
        },
        "descs": {
          "default__deleted": "If the DBMS were to allow any user to make changes to database\nstructure or logic, then those changes might be implemented without undergoing\nthe appropriate testing and approvals that are part of a robust change\nmanagement process.\n\n    Accordingly, only qualified and authorized individuals will be allowed to\nobtain access to information system components for purposes of initiating\nchanges, including upgrades and modifications.\n\n    Unmanaged changes that occur to the database software libraries or\nconfiguration can lead to unauthorized or compromised installations.",
          "rationale__deleted": "",
          "check": {
            "__old": "MySQL database objects do not have an owner. MySQL is a single instance and\nsingle database with multiple schemas (aliased to be called either schema or\ndatabase). Permissions are based on schemas and schema objects and privileges\ninclude grants to objects or grants to allow users to further grants access to\nobjects. To reiterate, there is not an object owner just rights assigned to\nschemas and the objects within them.\n\n    To determine rights to objects via schema, table, or user privileges run\nthe following:\n    SELECT * FROM `information_schema`.`SCHEMA_PRIVILEGES`;\n    SELECT * FROM `information_schema`.`TABLE_PRIVILEGES`;\n    SELECT * FROM `information_schema`.`COLUMN_PRIVILEGES`;\n    SELECT * FROM `information_schema`.`USER_PRIVILEGES`;\n    SELECT * FROM `information_schema`.`ROLE_COLUMN_GRANTS`;\n    SELECT * FROM `information_schema`.`ROLE_TABLE_GRANTS`;\n\n    On a per-user basis, for example:\n    show grants for 'test'@'%';\n\n    If any database objects are found to have access by users not authorized to\nthe database objects, this is a finding.",
            "__new": "MySQL database objects do not have an owner. MySQL is a single instance and single database with multiple schemas (aliased to be called either schema or database). Permissions are based on schemas and schema objects and privileges include grants to objects or grants to allow users to further grants access to objects. To reiterate, there is not an object owner just rights assigned to schemas and the objects within them.\n\nTo determine rights to objects via schema, table, or user privileges run the following:\nSELECT * FROM `information_schema`.`SCHEMA_PRIVILEGES`;\nSELECT * FROM `information_schema`.`TABLE_PRIVILEGES`;\nSELECT * FROM `information_schema`.`COLUMN_PRIVILEGES`;\nSELECT * FROM `information_schema`.`USER_PRIVILEGES`;\nSELECT * FROM `information_schema`.`ROLE_COLUMN_GRANTS`;\nSELECT * FROM `information_schema`.`ROLE_TABLE_GRANTS`;\n\nOn a per-user basis, for example:\nshow grants for 'test'@'%'; \n\nIf any database objects are found to have access by users not authorized to the database objects, this is a finding."
          },
          "fix": {
            "__old": "Assign ownership of authorized objects to authorized object owner accounts.\n\nReview user accounts with the GRANT OPTION.\n\nREVOKE GRANT OPTION to limit users with grant privileges.",
            "__new": "Assign ownership of authorized objects to authorized object owner accounts.\n\nReview user accounts with the GRANT OPTION. \n\nREVOKE GRANT OPTION to limit users with grant privileges."
          }
        }
      },
      "SV-235167": {
        "describe__deleted": "  mysql_ports = input('mysql_ports')\n  mysql_sockets = input('mysql_sockets')\n\n  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  query_ports = %(\n  SELECT\n     VARIABLE_NAME,\n     VARIABLE_VALUE \n  FROM\n     performance_schema.global_variables \n  WHERE\n     VARIABLE_NAME in \n     (\n        'port',\n        'mysqlx_port',\n        'admin_port'\n     );\n  )\n\n  query_sockets = %(\n  SELECT\n     VARIABLE_NAME,\n     VARIABLE_VALUE \n  FROM\n     performance_schema.global_variables \n  where\n     VARIABLE_NAME like '%pipe%' \n     or VARIABLE_NAME = 'socket' \n     or VARIABLE_NAME = 'mysqlx_socket';\n  )\n\n  sql_session.query(query_ports).results.rows.each do |row|\n    describe \"MySQL Port: #{row['variable_name']}\" do\n      subject { row['variable_value'] }\n      it { should cmp mysql_ports[row['variable_name']] }\n    end\n  end\n\n  sql_session.query(query_sockets).results.rows.each do |row|\n    describe \"MySQL socket: #{row['variable_name']}\" do\n      subject { row['variable_value'] }\n      it { should be_in mysql_sockets[row['variable_name']] }\n    end\n  end",
        "tags": {
          "check_id__added": "C-38386r623621_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235167r638812_rule",
            "__new": "SV-235167r961470_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must disable network functions, ports,\nprotocols, and services deemed by the organization to be nonsecure, in accord\nwith the Ports, Protocols, and Services Management (PPSM) guidance.",
          "__new": "The MySQL Database Server 8.0 must disable network functions, ports, protocols, and services deemed by the organization to be nonsecure, in accord with the Ports, Protocols, and Services Management (PPSM) guidance."
        },
        "desc": {
          "__old": "Use of nonsecure network functions, ports, protocols, and services\nexposes the system to avoidable threats.",
          "__new": "Use of nonsecure network functions, ports, protocols, and services exposes the system to avoidable threats."
        },
        "descs": {
          "default__deleted": "Use of nonsecure network functions, ports, protocols, and services\nexposes the system to avoidable threats.",
          "rationale__deleted": "",
          "check": {
            "__old": "The server must only use approved network communication libraries, ports,\nand protocols.\n\n    Obtain a list of all approved network libraries, communication ports, and\nprotocols from the server documentation.\n\n    Verify that the protocols are enabled for the instance.\n\n    Run the following SQL to list ports:\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables\n    WHERE VARIABLE_NAME in ('port', 'mysqlx_port', 'admin_port');\n\n    The default ports for MySQL for organizational connects are:\n    Classic MySQL Protocol - 3306, MySQL X Protocol 33060, MySQL Admin Port\n(disabled by default)\n\n    If these are in conflict with guidance, and not explained and approved in\nthe system documentation, this is a finding.\n\n    Run the following to determine if a local socker/pipe are in use:\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables where\n    VARIABLE_NAME like '%pipe%' or  VARIABLE_NAME = 'socket' or  VARIABLE_NAME\n= 'mysqlx_socket';\n\n    Values are for classic and xprotocol will be returned.\n    For example on Linux\n    'socket','/tmp/mysql.sock'\n    'mysqlx_socket','/tmp/mysqlx.sock'\n     Windows\n    'named_pipe', 'ON';\n\n    If these are in conflict with guidance, and not explained and approved in\nthe system documentation, this is a finding.\n\n    Run the following statement to inspect port settings:\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables\n    WHERE VARIABLE_NAME LIKE '%port%' or VARIABLE_NAME LIKE '%port' order by\nVARIABLE_NAME;\n\n    Linux local socket\n    select @@socket;\n\n    Windows local pipe\n    select @@named_pipe;\n\n    If any ports or protocols are used that are not specifically approved in\nthe server documentation, this is a finding.",
            "__new": "The server must only use approved network communication libraries, ports, and protocols. \n\nObtain a list of all approved network libraries, communication ports, and protocols from the server documentation. \n\nVerify that the protocols are enabled for the instance. \n\nRun the following SQL to list ports:\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables\nWHERE VARIABLE_NAME in ('port', 'mysqlx_port', 'admin_port');\n\nThe default ports for MySQL for organizational connects are:\nClassic MySQL Protocol - 3306, MySQL X Protocol 33060, MySQL Admin Port (disabled by default)\n\nIf these are in conflict with guidance, and not explained and approved in the system documentation, this is a finding.\n\nRun the following to determine if a local socker/pipe are in use:\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables where \nVARIABLE_NAME like '%pipe%' or  VARIABLE_NAME = 'socket' or  VARIABLE_NAME = 'mysqlx_socket';\n\nValues are for classic and xprotocol will be returned.\nFor example on Linux\n'socket','/tmp/mysql.sock'\n'mysqlx_socket','/tmp/mysqlx.sock'\n Windows\n'named_pipe', 'ON';\n\nIf these are in conflict with guidance, and not explained and approved in the system documentation, this is a finding.\n\nRun the following statement to inspect port settings:\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables\nWHERE VARIABLE_NAME LIKE '%port%' or VARIABLE_NAME LIKE '%port' order by  VARIABLE_NAME;\n\nLinux local socket \nselect @@socket;\n\nWindows local pipe\nselect @@named_pipe;\n\nIf any ports or protocols are used that are not specifically approved in the server documentation, this is a finding."
          },
          "fix": {
            "__old": "Disable each prohibited network function, port, protocol, or service\nprohibited by the PPSM guidance.\n\n    Change mysql options related to network, ports, and protocols for the\nserver and additionally consider refining further at user account level.\n\n    To set ports properly, edit the mysql configuration file and change ports\nor protocol settings.\n\n    vi my.cnf\n    [mysqld]\n    port=<port value>\n    admin_port=<port value>\n    mysqlx_port=<port value>\n    socket=/path/to/socket\n\n    To turn off TCP/IP:\n\n    skip_networking=ON\n\n    If admin_address is not defined then access via the admin port is disabled.\n\n    Additionally the X Plugin can be disabled at startup/restart by either\nsetting mysqlx=0 in the MySQL configuration file, or by passing in either\n\"--mysqlx=0\" or \"--skip-mysqlx\" when starting the MySQL server.",
            "__new": "Disable each prohibited network function, port, protocol, or service prohibited by the PPSM guidance.\n\nChange mysql options related to network, ports, and protocols for the server and additionally consider refining further at user account level.\n\nTo set ports properly, edit the mysql configuration file and change ports or protocol settings.\n\nvi my.cnf\n[mysqld]\nport=<port value>\nadmin_port=<port value>\nmysqlx_port=<port value>\nsocket=/path/to/socket\n\nTo turn off TCP/IP:\n\nskip_networking=ON\n\nIf admin_address is not defined then access via the admin port is disabled. \n\nAdditionally the X Plugin can be disabled at startup/restart by either setting mysqlx=0 in the MySQL configuration file, or by passing in either \"--mysqlx=0\" or \"--skip-mysqlx\" when starting the MySQL server."
          }
        }
      },
      "SV-235168": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    mysql_administrative_users = input('mysql_administrative_users')\n  else\n    mysql_administrative_users = input('mysql_administrative_users') + ['rdsadmin']\n  end\n\n  query_users = %(\n  SELECT\n     user.Host,\n     user.User \n  FROM\n     mysql.user \n  where\n     Create_routine_priv = 'Y' \n     OR Alter_routine_priv = 'Y';\n  )\n\n  query_schema_permissions = %(\n  SELECT\n     db.Host,\n     db.User,\n     db.Db \n  FROM\n     mysql.db \n  where\n     db.Create_routine_priv = 'Y' \n     OR db.Alter_routine_priv = 'Y';\n  )\n\n  describe \"List of authorized to create, alter,\nor replace stored procedures and functions.\" do\n    subject { sql_session.query(query_users).results.column('user') }\n    it { should be_in mysql_administrative_users }\n  end\n\n  describe \"List of users or role permissions returned are authorized to modify the\nspecified object or type.\" do\n    subject { sql_session.query(query_schema_permissions).results.column('user') }\n    it { should be_in mysql_administrative_users }\n  end",
        "tags": {
          "check_id__added": "C-38387r998292_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235168r638812_rule",
            "__new": "SV-235168r998293_rule"
          },
          "cci": [
            [
              "-",
              "CCI-001812"
            ],
            [
              "+",
              "CCI-003980"
            ]
          ]
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must prohibit user installation of logic\nmodules (stored procedures, functions, triggers, views, etc.) without explicit\nprivileged status.",
          "__new": "The MySQL Database Server 8.0 must prohibit user installation of logic modules (stored procedures, functions, triggers, views, etc.) without explicit privileged status."
        },
        "desc": {
          "__old": "Allowing regular users to install software, without explicit\nprivileges, creates the risk that untested or potentially malicious software\nwill be installed on the system. Explicit privileges (escalated or\nadministrative privileges) provide the regular user with explicit capabilities\nand control that exceed the rights of a regular user.\n\n    Database Management System (DBMS) functionality and the nature and\nrequirements of databases will vary; so while users are not permitted to\ninstall unapproved software, there may be instances where the organization\nallows the user to install approved software packages such as from an approved\nsoftware repository. The requirements for production servers will be more\nrestrictive than those used for development and research.\n\n    The DBMS must enforce software installation by users based upon what types\nof software installations are permitted (e.g., updates and security patches to\nexisting software) and what types of installations are prohibited (e.g.,\nsoftware whose pedigree with regard to being potentially malicious is unknown\nor suspect) by the organization.\n\n    In the case of a DBMS, this requirement covers stored procedures,\nfunctions, triggers, views, etc.",
          "__new": "Allowing regular users to install software, without explicit privileges, creates the risk that untested or potentially malicious software will be installed on the system. Explicit privileges (escalated or administrative privileges) provide the regular user with explicit capabilities and control that exceed the rights of a regular user.\n\nDatabase Management System (DBMS) functionality and the nature and requirements of databases will vary; so while users are not permitted to install unapproved software, there may be instances where the organization allows the user to install approved software packages such as from an approved software repository. The requirements for production servers will be more restrictive than those used for development and research.\n\nThe DBMS must enforce software installation by users based upon what types of software installations are permitted (e.g., updates and security patches to existing software) and what types of installations are prohibited (e.g., software whose pedigree with regard to being potentially malicious is unknown or suspect) by the organization. \n\nIn the case of a DBMS, this requirement covers stored procedures, functions, triggers, views, etc."
        },
        "descs": {
          "default__deleted": "Allowing regular users to install software, without explicit\nprivileges, creates the risk that untested or potentially malicious software\nwill be installed on the system. Explicit privileges (escalated or\nadministrative privileges) provide the regular user with explicit capabilities\nand control that exceed the rights of a regular user.\n\n    Database Management System (DBMS) functionality and the nature and\nrequirements of databases will vary; so while users are not permitted to\ninstall unapproved software, there may be instances where the organization\nallows the user to install approved software packages such as from an approved\nsoftware repository. The requirements for production servers will be more\nrestrictive than those used for development and research.\n\n    The DBMS must enforce software installation by users based upon what types\nof software installations are permitted (e.g., updates and security patches to\nexisting software) and what types of installations are prohibited (e.g.,\nsoftware whose pedigree with regard to being potentially malicious is unknown\nor suspect) by the organization.\n\n    In the case of a DBMS, this requirement covers stored procedures,\nfunctions, triggers, views, etc.",
          "rationale__deleted": "",
          "check": {
            "__old": "MySQL requires users (other than root) to be explicitly granted the CREATE\nROUTINE privilege in order to install logical modules.\n\n    To obtain a listing of users and roles who are authorized to create, alter,\nor replace stored procedures and functions from the server documentation.\n\n    Execute the following query:\n\n    For server level permissions\n    SELECT `user`.`Host`,\n        `user`.`User`\n    FROM `mysql`.`user`\n     where     `Create_routine_priv`='Y' OR\n        `Alter_routine_priv` = 'Y';\n\n    If any users or role permissions returned are not authorized to modify the\nspecified object or type, this is a finding.\n\n    If any user or role membership is not authorized, this is a finding.\n\n    For database schema level permission (db is the schema name)\n    SELECT `db`.`Host`,\n        `db`.`User`,\n        `db`.`Db`\n    FROM `mysql`.`db` where     `db`.`Create_routine_priv`='Y' OR\n        `db`.`Alter_routine_priv` = 'Y';\n\n    If any users or role permissions returned are not authorized to modify the\nspecified object or type, this is a finding.\n\n    If any user or role membership is not authorized, this is a finding.",
            "__new": "MySQL requires users (other than root) to be explicitly granted the CREATE ROUTINE privilege in order to install logical modules.\n\nTo obtain a listing of users and roles who are authorized to create, alter, or replace stored procedures and functions from the server documentation.\n\nExecute the following query for server level permissions:\n\nSELECT `user`.`Host`,\n    `user`.`User`\nFROM `mysql`.`user`\n where     `Create_routine_priv`='Y' OR\n    `Alter_routine_priv` = 'Y';\n\nIf any users or role permissions returned are not authorized to modify the specified object or type, this is a finding. \n\nIf any user or role membership is not authorized, this is a finding.\n\nExecute the following query for database schema level permission (db is the schema name):\nSELECT `db`.`Host`,\n    `db`.`User`,\n    `db`.`Db`\nFROM `mysql`.`db` where     `db`.`Create_routine_priv`='Y' OR\n    `db`.`Alter_routine_priv` = 'Y';\n\nIf any users or role permissions returned are not authorized to modify the specified object or type, this is a finding. \n\nIf any user or role membership is not authorized, this is a finding."
          },
          "fix": {
            "__old": "MySQL requires users (other than root) to be explicitly granted the CREATE\nROUTINE privilege in order to install logical modules.\n\n    Check user grants using the SHOW GRANTS and look for appropriate assignment\nof CREATE ROUTINE.\n\n    For example - REVOKE CREATE ROUTINE ON mydb.* TO 'someuser'@'somehost';",
            "__new": "MySQL requires users (other than root) to be explicitly granted the CREATE ROUTINE privilege in order to install logical modules. \n\nCheck user grants using the SHOW GRANTS and look for appropriate assignment of CREATE ROUTINE. \n\nFor example - REVOKE CREATE ROUTINE ON mydb.* TO 'someuser'@'somehost';"
          }
        }
      },
      "SV-235169": {
        "describe__deleted": "  if !input('aws_rds')\n\n    mycnf = input('mycnf')\n    mysqld_auto_cnf = input('mysqld_auto_cnf')\n\n    describe file(mycnf) do\n      it { should_not be_more_permissive_than('0644') }\n    end\n\n    describe file(mysqld_auto_cnf) do\n      its('owner') { should eq 'mysql' }\n      it { should_not be_more_permissive_than('0640') }\n    end\n    \n  else\n    impact 0.0\n    describe 'Not applicable since these requirements are handled within AWS RDS' do\n      skip 'Not applicable since these requirements are handled within AWS RDS'\n    end\n  end",
        "tags": {
          "check_id__added": "C-38388r623627_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235169r638812_rule",
            "__new": "SV-235169r961461_rule"
          },
          "nist": [
            [
              "-",
              "CM-5 (1)"
            ],
            [
              "+",
              "CM-5 (1) (a)"
            ]
          ]
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must enforce access restrictions\nassociated with changes to the configuration of the MySQL Database Server 8.0\nor database(s).",
          "__new": "The MySQL Database Server 8.0 must enforce access restrictions associated with changes to the configuration of the MySQL Database Server 8.0 or database(s)."
        },
        "desc": {
          "__old": "Failure to provide logical access restrictions associated with changes\nto configuration may have significant effects on the overall security of the\nsystem.\n\n    When dealing with access restrictions pertaining to change control, it\nshould be noted that any changes to the hardware, software, and/or firmware\ncomponents of the information system can potentially have significant effects\non the overall security of the system.\n\n    Accordingly, only qualified and authorized individuals should be allowed to\nobtain access to system components for the purposes of initiating changes,\nincluding upgrades and modifications.",
          "__new": "Failure to provide logical access restrictions associated with changes to configuration may have significant effects on the overall security of the system. \n\nWhen dealing with access restrictions pertaining to change control, it should be noted that any changes to the hardware, software, and/or firmware components of the information system can potentially have significant effects on the overall security of the system. \n\nAccordingly, only qualified and authorized individuals should be allowed to obtain access to system components for the purposes of initiating changes, including upgrades and modifications."
        },
        "descs": {
          "default__deleted": "Failure to provide logical access restrictions associated with changes\nto configuration may have significant effects on the overall security of the\nsystem.\n\n    When dealing with access restrictions pertaining to change control, it\nshould be noted that any changes to the hardware, software, and/or firmware\ncomponents of the information system can potentially have significant effects\non the overall security of the system.\n\n    Accordingly, only qualified and authorized individuals should be allowed to\nobtain access to system components for the purposes of initiating changes,\nincluding upgrades and modifications.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the security configuration of the MySQL Database Server 8.0 and\ndatabase(s). If it does not enforce access restrictions associated with changes\nto the configuration of the MySQL Database Server 8.0 or database(s), this is a\nfinding.\n\n    MySQL configuration can be set two ways:\n    1) The mysql configuration file. This file must be owned and permissions to\nread or write to it limited to the mysql OS user only.\n    2) Via a SET command within the server itself. These commands may be\nlimited by limiting \"server administration\" privileges. User privileges can\nbe shown using the SHOW GRANTS [FOR user]. This data is written to\nmysqld-auto.cnf file.\n\n    See the mysql secure configuration guide for more information.\n\n    Run the following command to check the mysql the linux permissions on\nmy.cnf:\n    ls -l /etc/my.cnf\n\n    The permissions must be:\n    File or Resource                Location        Owner   Directory\nPermissions   File Permissions\n    MySQL configuration file        /etc/my.cnf     root    drwxr-xr-x\n    -rw-r--r--\n\n    If the permissions are more permissive than the above, this is a finding.\n\n    As of mysql 8.0 configuration variables can also be set and changed using\npersist system variable settings that save to a file named mysqld-auto.cnf\n    This file is in the mysql data dir. See the example below.\n\n    sudo ls -l\n/usr/local/mysql-commercial-8.0.16-macos10.14-x86_64/data/mysqld-auto.cnf\n    -rw-r-----  1 _mysql  _mysql  2721 May 13 14:00\n/usr/local/mysql-commercial-8.0.16-macos10.14-x86_64/data/mysqld-auto.cnf\n\n    If the permissions of the mysqld-auto.cnf are more permissive, this is a\nfinding.",
            "__new": "Review the security configuration of the MySQL Database Server 8.0 and database(s). If it does not enforce access restrictions associated with changes to the configuration of the MySQL Database Server 8.0 or database(s), this is a finding.\n\nMySQL configuration can be set two ways:  \n1) The mysql configuration file. This file must be owned and permissions to read or write to it limited to the mysql OS user only. \n2) Via a SET command within the server itself. These commands may be limited by limiting \"server administration\" privileges. User privileges can be shown using the SHOW GRANTS [FOR user]. This data is written to mysqld-auto.cnf file.\n\nSee the mysql secure configuration guide for more information.\n\nRun the following command to check the mysql the linux permissions on my.cnf: \nls -l /etc/my.cnf\n\nThe permissions must be:\nFile or Resource                Location        Owner   Directory Permissions   File Permissions\nMySQL configuration file        /etc/my.cnf     root    drwxr-xr-x              -rw-r--r--\n\nIf the permissions are more permissive than the above, this is a finding.\n\nAs of mysql 8.0 configuration variables can also be set and changed using persist system variable settings that save to a file named mysqld-auto.cnf\nThis file is in the mysql data dir. See the example below.\n\nsudo ls -l /usr/local/mysql-commercial-8.0.16-macos10.14-x86_64/data/mysqld-auto.cnf\n-rw-r-----  1 _mysql  _mysql  2721 May 13 14:00 /usr/local/mysql-commercial-8.0.16-macos10.14-x86_64/data/mysqld-auto.cnf\n\nIf the permissions of the mysqld-auto.cnf are more permissive, this is a finding."
          },
          "fix": {
            "__old": "Configure the MySQL Database Server 8.0 to enforce access restrictions\nassociated with changes to the configuration of the MySQL Database Server 8.0\nor database(s).\n\n    Check and change file permissions on the MySQL Configuration file so the\nmysql OS user owns and file and is the only user with read-write permissions.\nUse the SHOW GRANTS statements to audit who has SUPER permissions and remove\nany users with excess privileges.\n\n    For my.cnf, change ownership and permissions to:\n    File or Resource                Location        Owner   Directory\nPermissions   File Permissions\n    MySQL configuration file        /etc/my.cnf     root    drwxr-xr-x\n    -rw-r--r--\n\n    The mysqld-auto.cnf is created and managed by the mysql instance, as such\npermissions should be correct. If not correct, change \"owner\" to \"mysql\"\nand \"rw r\" to \"640\".",
            "__new": "Configure the MySQL Database Server 8.0 to enforce access restrictions associated with changes to the configuration of the MySQL Database Server 8.0 or database(s).\n\nCheck and change file permissions on the MySQL Configuration file so the mysql OS user owns and file and is the only user with read-write permissions. Use the SHOW GRANTS statements to audit who has SUPER permissions and remove any users with excess privileges.\n\nFor my.cnf, change ownership and permissions to:\nFile or Resource                Location        Owner   Directory Permissions   File Permissions\nMySQL configuration file        /etc/my.cnf     root    drwxr-xr-x              -rw-r--r--\n\nThe mysqld-auto.cnf is created and managed by the mysql instance, as such permissions should be correct. If not correct, change \"owner\" to \"mysql\" and \"rw r\" to \"640\"."
          }
        }
      },
      "SV-235170": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'audit_log' ;\n    )\n  else\n    audit_log_plugin = %(\n    SELECT\n       PLUGIN_NAME,\n       plugin_status \n    FROM\n       INFORMATION_SCHEMA.PLUGINS \n    WHERE\n       PLUGIN_NAME LIKE 'SERVER_AUDIT' ;\n    )\n  end\n  \n  audit_log_plugin_status = sql_session.query(audit_log_plugin)\n\n  query_audit_log_filter = %(\n  SELECT\n     audit_log_filter.NAME,\n     audit_log_filter.FILTER\n  FROM\n     mysql.audit_log_filter;\n  )\n\n  audit_log_filter_entries = sql_session.query(query_audit_log_filter)\n\n  query_audit_log_user = %(\n  SELECT\n     audit_log_user.USER,\n     audit_log_user.HOST,\n     audit_log_user.FILTERNAME\n  FROM\n     mysql.audit_log_user;\n  )\n\n  audit_log_user_entries = sql_session.query(query_audit_log_user)\n\n  query_server_audit_events = %(SHOW variables LIKE 'server_audit_events';)\n\n  server_audit_events_setting = sql_session.query(query_server_audit_events)\n\n\n  if !input('aws_rds')\n  \n    # Following code design will allow for adaptive tests in this partially automatable control\n    # If ANY of the automatable tests FAIL, the control will report automated statues\n    # If ALL automatable tests PASS, MANUAL review statuses are reported to ensure full compliance\n\n    if !audit_log_plugin_status.results.column('plugin_status').join.eql?('ACTIVE') or\n       audit_log_filter_entries.results.empty? or\n       audit_log_user_entries.results.empty?\n\n      describe 'Audit Log Plugin status' do\n        subject { audit_log_plugin_status.results.column('plugin_status') }\n        it { should cmp 'ACTIVE' }\n      end\n\n      describe 'List of entries in Table: audit_log_filter' do\n        subject { audit_log_filter_entries.results }\n        it { should_not be_empty }\n      end\n\n      describe 'List of entries in Table: audit_log_user' do\n        subject { audit_log_user_entries.results }\n        it { should_not be_empty }\n      end\n    end\n\n    describe \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\" do\n      skip \"Manually validate `audit_log` plugin is active:\\n #{audit_log_plugin_status.output}\"\n    end\n    describe \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\" do\n      skip \"Manually review table `audit_log_filter` contains required entries:\\n #{audit_log_filter_entries.output}\"\n    end\n    describe \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\" do\n      skip \"Manually review table `audit_log_user` contains required entries:\\n #{audit_log_user_entries.output}\"\n    end \n    \n  else\n    \n    describe 'Audit Log Plugin status' do\n      subject { audit_log_plugin_status.results.column('plugin_status') }\n      it { should cmp 'ACTIVE' }\n    end\n\n    describe 'Community Server server_audit_events settings' do\n      subject { Set[server_audit_events_setting.results.column('value')[0].split(',')] }\n      it { should cmp Set['CONNECT,QUERY'.split(',')] }\n    end\n    \n  end\n    ",
        "tags": {
          "check_id__added": "C-38389r998294_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235170r638812_rule",
            "__new": "SV-235170r998296_rule"
          },
          "fix_id": {
            "__old": "F-38352r623631_fix",
            "__new": "F-38352r998295_fix"
          },
          "cci": [
            [
              "-",
              "CCI-001814"
            ],
            [
              "+",
              "CCI-003938"
            ]
          ],
          "nist": [
            [
              "-",
              "CM-5 (1)"
            ],
            [
              "+",
              "CM-5 (1) (b)"
            ]
          ]
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must produce audit records of its\nenforcement of access restrictions associated with changes to the configuration\nof the MySQL Database Server 8.0 or database(s).",
          "__new": "The MySQL Database Server 8.0 must produce audit records of its enforcement of access restrictions associated with changes to the configuration of the MySQL Database Server 8.0 or database(s)."
        },
        "desc": {
          "__old": "Without auditing the enforcement of access restrictions against\nchanges to configuration, it would be difficult to identify attempted attacks\nand an audit trail would not be available for forensic investigation for\nafter-the-fact actions.\n\n    Enforcement actions are the methods or mechanisms used to prevent\nunauthorized changes to configuration settings. Enforcement action methods may\nbe as simple as denying access to a file based on the application of file\npermissions (access restriction). Audit items may consist of lists of actions\nblocked by access restrictions or changes identified after the fact.",
          "__new": "Without auditing the enforcement of access restrictions against changes to configuration, it would be difficult to identify attempted attacks and an audit trail would not be available for forensic investigation for after-the-fact actions. \n\nEnforcement actions are the methods or mechanisms used to prevent unauthorized changes to configuration settings. Enforcement action methods may be as simple as denying access to a file based on the application of file permissions (access restriction). Audit items may consist of lists of actions blocked by access restrictions or changes identified after the fact."
        },
        "descs": {
          "default__deleted": "Without auditing the enforcement of access restrictions against\nchanges to configuration, it would be difficult to identify attempted attacks\nand an audit trail would not be available for forensic investigation for\nafter-the-fact actions.\n\n    Enforcement actions are the methods or mechanisms used to prevent\nunauthorized changes to configuration settings. Enforcement action methods may\nbe as simple as denying access to a file based on the application of file\npermissions (access restriction). Audit items may consist of lists of actions\nblocked by access restrictions or changes identified after the fact.",
          "rationale__deleted": "",
          "check": {
            "__old": "Determine if an audit is configured to capture denied actions.\n\n    Check if MySQL audit is configured and enabled. The my.cnf file will set\nthe variable audit_file.\n\n    To further check, execute the following query:\n\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n          FROM INFORMATION_SCHEMA.PLUGINS\n          WHERE PLUGIN_NAME LIKE 'audit%';\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used. \nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the plugin installation by running:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE 'SERVER%';\n    The value for SERVER_AUDIT should return ACTIVE.]\n\n    The status of the audit_log plugin must be \"active\". If it is not\n\"active\", this is a finding.\n\n[NOTE: The STIG guidance is based on MySQL 8 Enterprise Edition. \nCommunity Server (also used by AWS RDS) has reduced or different features. \nFor Community Server, the MariaDB audit plugin may be used and configured to \naudit all CONNECT and QUERY events.\nThis InSpec profile is adapted to measure accordingly when using Community Server:\n    Verify the CONNECT and QUERY events are enabled:\n    SHOW variables LIKE 'server_audit_events';\n    +---------------------+---------------+\n    | Variable_name       | Value         |\n    +---------------------+---------------+\n    | server_audit_events | CONNECT,QUERY |\n    +---------------------+---------------+\n  \t1 row in set (0.00 sec)    \n  \tThe value for server_audit_events should return CONNECT,QUERY.]\n\n    Review audit filters and associated users by running the following queries:\n    SELECT `audit_log_filter`.`NAME`,\n       `audit_log_filter`.`FILTER`\n    FROM `mysql`.`audit_log_filter`;\n\n    SELECT `audit_log_user`.`USER`,\n       `audit_log_user`.`HOST`,\n       `audit_log_user`.`FILTERNAME`\n    FROM `mysql`.`audit_log_user`;\n\n    All currently defined audits for the MySQL server instance will be listed.\nIf no audits are returned, this is a finding.\n\n    Connect and run commands as a low-privilege user. For example attempt to\nchange system variables, user name, or another user's password, all of which\nshould fail:\n    set persist wait_timeout=28000;\n    rename user passme to cantchange;\n    SET PASSWORD FOR passme = 'sfsdfsdf';\n\n    Review the audit log and inspect event data containing identity and user\nsubject details by running the Linux command:\n    sudo cat  <directory where audit log files are located>/audit.log\n    For example if the values returned by \"select @@datadir, @@audit_log_file;\n\" are  /usr/local/mysql/data/,  audit.log\n    sudo cat  /usr/local/mysql/data/audit.log\n\n    { \"timestamp\": \"2020-08-31 20:10:21\", \"id\": 1, \"class\":\n\"general\", \"event\": \"status\", \"connection_id\": 38, \"account\": {\n\"user\": \"fewconnects\", \"host\": \"localhost\" }, \"login\": { \"user\":\n\"fewconnects\", \"os\": \"\", \"ip\": \"127.0.0.1\", \"proxy\": \"\" },\n\"general_data\": { \"command\": \"Query\", \"sql_command\": \"set_option\",\n\"query\": \"set persist wait_timeout=28000\", \"status\": 1227 } },\n    { \"timestamp\": \"2020-08-31 20:10:48\", \"id\": 1, \"class\":\n\"general\", \"event\": \"status\", \"connection_id\": 38, \"account\": {\n\"user\": \"fewconnects\", \"host\": \"localhost\" }, \"login\": { \"user\":\n\"fewconnects\", \"os\": \"\", \"ip\": \"127.0.0.1\", \"proxy\": \"\" },\n\"general_data\": { \"command\": \"Query\", \"sql_command\": \"rename_user\",\n\"query\": \"rename user passme to cantchange\", \"status\": 1227 } },\n    , \"host\": \"localhost\" }, \"login\": { \"user\": \"fewconnects\",\n\"os\": \"\", \"ip\": \"127.0.0.1\", \"proxy\": \"\" }, \"general_data\": {\n\"command\": \"Query\", \"sql_command\": \"set_password\", \"query\": \"SET\nPASSWORD FOR `passme`@`%`=<secret>\", \"status\": 1044 } },\n    Note each has a non-zero status, 1227, 1227, and 1044 respectively.\n\n    If the audit log does not contain records of its enforcement of access\nrestrictions associated with changes to the configuration of the DBMS or\ndatabase(s), this is a finding.",
            "__new": "Determine if an audit is configured to capture denied actions.\n\nCheck if MySQL audit is configured and enabled. The my.cnf file will set the variable audit_file.\n\nTo further check, execute the following query: \n\nSELECT PLUGIN_NAME, PLUGIN_STATUS\n      FROM INFORMATION_SCHEMA.PLUGINS\n      WHERE PLUGIN_NAME LIKE 'audit%';\n\nThe status of the audit_log plugin must be \"active\". If it is not \"active\", this is a finding.\n\nReview audit filters and associated users by running the following queries:\nSELECT `audit_log_filter`.`NAME`,\n   `audit_log_filter`.`FILTER`\nFROM `mysql`.`audit_log_filter`;\n\nSELECT `audit_log_user`.`USER`,\n   `audit_log_user`.`HOST`,\n   `audit_log_user`.`FILTERNAME`\nFROM `mysql`.`audit_log_user`;\n\nAll currently defined audits for the MySQL server instance will be listed. If no audits are returned, this is a finding.\n\nConnect and run commands as a low-privilege user. For example attempt to change system variables, user name, or another user's password, all of which should fail:\nset persist wait_timeout=28000; \nrename user passme to cantchange;\nSET PASSWORD FOR passme = 'sfsdfsdf';\n\nReview the audit log and inspect event data containing identity and user subject details by running the Linux command:\nsudo cat  <directory where audit log files are located>/audit.log\n\nFor example, if the values returned by \"select @@datadir, @@audit_log_file; \" are  /usr/local/mysql/data/,  audit.log \nsudo cat  /usr/local/mysql/data/audit.log\n\n{ \"timestamp\": \"2020-08-31 20:10:21\", \"id\": 1, \"class\": \"general\", \"event\": \"status\", \"connection_id\": 38, \"account\": { \"user\": \"fewconnects\", \"host\": \"localhost\" }, \"login\": { \"user\": \"fewconnects\", \"os\": \"\", \"ip\": \"127.0.0.1\", \"proxy\": \"\" }, \"general_data\": { \"command\": \"Query\", \"sql_command\": \"set_option\", \"query\": \"set persist wait_timeout=28000\", \"status\": 1227 } },\n{ \"timestamp\": \"2020-08-31 20:10:48\", \"id\": 1, \"class\": \"general\", \"event\": \"status\", \"connection_id\": 38, \"account\": { \"user\": \"fewconnects\", \"host\": \"localhost\" }, \"login\": { \"user\": \"fewconnects\", \"os\": \"\", \"ip\": \"127.0.0.1\", \"proxy\": \"\" }, \"general_data\": { \"command\": \"Query\", \"sql_command\": \"rename_user\", \"query\": \"rename user passme to cantchange\", \"status\": 1227 } },\n, \"host\": \"localhost\" }, \"login\": { \"user\": \"fewconnects\", \"os\": \"\", \"ip\": \"127.0.0.1\", \"proxy\": \"\" }, \"general_data\": { \"command\": \"Query\", \"sql_command\": \"set_password\", \"query\": \"SET PASSWORD FOR `passme`@`%`=<secret>\", \"status\": 1044 } },\n\nNote each has a non-zero status, 1227, 1227, and 1044 respectively.\n\nIf the audit log does not contain records of its enforcement of access restrictions associated with changes to the configuration of the DBMS or database(s), this is a finding."
          },
          "fix": {
            "__old": "If currently required, configure the MySQL Database Server to produce audit\nrecords when enforcement of access restrictions is associated with changes to\nthe configuration of the DBMS or database(s).\n\n    See the supplemental file \"MySQL80Audit.sql\".",
            "__new": "If currently required, configure the MySQL Database Server to produce audit records when enforcement of access restrictions is associated with changes to the configuration of the DBMS or database(s).\n\nRefer to the supplemental file \"MySQL80Audit.sql\"."
          }
        }
      },
      "SV-235173": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  query_audit_configurations = %(\n  SELECT\n     VARIABLE_NAME,\n     VARIABLE_VALUE \n  FROM\n     performance_schema.global_variables \n  WHERE\n     VARIABLE_NAME = 'audit_log_file' \n     OR VARIABLE_NAME = 'datadir' \n     OR VARIABLE_NAME = 'audit_log_rotate_on_size';\n  )\n\n  describe \"Manually review audit record storage\ncapacity in accordance with organization-defined audit record storage\nrequirements.\\n#{sql_session.query(query_audit_configurations).output}\" do\n    skip \"Manually review audit record storage\n    capacity in accordance with organization-defined audit record storage\n    requirements.\\n#{sql_session.query(query_audit_configurations).output}\"\n  end",
        "tags": {
          "check_id__added": "C-38392r623639_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235173r638812_rule",
            "__new": "SV-235173r961392_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must allocate audit record storage\ncapacity in accordance with organization-defined audit record storage\nrequirements.",
          "__new": "The MySQL Database Server 8.0 must allocate audit record storage capacity in accordance with organization-defined audit record storage requirements."
        },
        "desc": {
          "__old": "To ensure sufficient storage capacity for the audit logs, the Database\nManagement System (DBMS) must be able to allocate audit record storage\ncapacity. Although another requirement (SRG-APP-000515-DB-000318) mandates that\naudit data be off-loaded to a centralized log management system, it remains\nnecessary to provide space on the database server to serve as a buffer against\noutages and capacity limits of the off-loading mechanism.\n\n    The task of allocating audit record storage capacity is usually performed\nduring initial installation of the DBMS and is closely associated with the DBA\nand system administrator roles. The DBA or system administrator will usually\ncoordinate the allocation of physical drive space with the application\nowner/installer and the application will prompt the installer to provide the\ncapacity information, the physical location of the disk, or both.\n\n    In determining the capacity requirements, consider such factors as: total\nnumber of users; expected number of concurrent users during busy periods;\nnumber and type of events being monitored; types and amounts of data being\ncaptured; the frequency/speed with which audit records are off-loaded to the\ncentral log management system; and any limitations that exist on the DBMS's\nability to reuse the space formerly occupied by off-loaded records.",
          "__new": "To ensure sufficient storage capacity for the audit logs, the Database Management System (DBMS) must be able to allocate audit record storage capacity. Although another requirement (SRG-APP-000515-DB-000318) mandates that audit data be off-loaded to a centralized log management system, it remains necessary to provide space on the database server to serve as a buffer against outages and capacity limits of the off-loading mechanism.\n\nThe task of allocating audit record storage capacity is usually performed during initial installation of the DBMS and is closely associated with the DBA and system administrator roles. The DBA or system administrator will usually coordinate the allocation of physical drive space with the application owner/installer and the application will prompt the installer to provide the capacity information, the physical location of the disk, or both.\n\nIn determining the capacity requirements, consider such factors as: total number of users; expected number of concurrent users during busy periods; number and type of events being monitored; types and amounts of data being captured; the frequency/speed with which audit records are off-loaded to the central log management system; and any limitations that exist on the DBMS's ability to reuse the space formerly occupied by off-loaded records."
        },
        "descs": {
          "default__deleted": "To ensure sufficient storage capacity for the audit logs, the Database\nManagement System (DBMS) must be able to allocate audit record storage\ncapacity. Although another requirement (SRG-APP-000515-DB-000318) mandates that\naudit data be off-loaded to a centralized log management system, it remains\nnecessary to provide space on the database server to serve as a buffer against\noutages and capacity limits of the off-loading mechanism.\n\n    The task of allocating audit record storage capacity is usually performed\nduring initial installation of the DBMS and is closely associated with the DBA\nand system administrator roles. The DBA or system administrator will usually\ncoordinate the allocation of physical drive space with the application\nowner/installer and the application will prompt the installer to provide the\ncapacity information, the physical location of the disk, or both.\n\n    In determining the capacity requirements, consider such factors as: total\nnumber of users; expected number of concurrent users during busy periods;\nnumber and type of events being monitored; types and amounts of data being\ncaptured; the frequency/speed with which audit records are off-loaded to the\ncentral log management system; and any limitations that exist on the DBMS's\nability to reuse the space formerly occupied by off-loaded records.",
          "rationale__deleted": "",
          "check": {
            "__old": "Check the server documentation for the SQL Audit file size configurations.\nLocate the Audit file path and drive.\n\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables\n    WHERE VARIABLE_NAME = 'audit_log_file'\n     OR VARIABLE_NAME= 'datadir'\n     OR VARIABLE_NAME = 'audit_log_rotate_on_size';\n\n    If the value of audit_log_file contains a path, for example:\n    /var/log/mysql/audit.log\n    This is the location of the audit log, and the location to assess the\nstorage capacity.\n\n    If the value of audit_log_file is the filename alone, for example:\n    audit.log\n    The audit logs are located in the path returned by datadir.\n\n    Calculate the space needed based on the audit file size and number of audit\nfiles to be stored simultaneously.\n\n    Note that MySQL does not delete log files; that requires third-party tools\nor custom scripts.\n\n    If the calculated product of the \"audit_log_rotate_on_size\" times the\nnumber of audit files allowed will exceed the size of the storage location,\nthis is a finding.",
            "__new": "Check the server documentation for the SQL Audit file size configurations. Locate the Audit file path and drive. \n\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables\nWHERE VARIABLE_NAME = 'audit_log_file'\n OR VARIABLE_NAME= 'datadir'\n OR VARIABLE_NAME = 'audit_log_rotate_on_size';\n\nIf the value of audit_log_file contains a path, for example:\n/var/log/mysql/audit.log\nThis is the location of the audit log, and the location to assess the storage capacity.\n\nIf the value of audit_log_file is the filename alone, for example:\naudit.log\nThe audit logs are located in the path returned by datadir.\n\nCalculate the space needed based on the audit file size and number of audit files to be stored simultaneously. \n\nNote that MySQL does not delete log files; that requires third-party tools or custom scripts.\n\nIf the calculated product of the \"audit_log_rotate_on_size\" times the number of audit files allowed will exceed the size of the storage location, this is a finding."
          },
          "fix": {
            "__old": "Review the MySQL Audit file location, ensure the destination has enough\nspace available to accommodate the maximum total size of all files that could\nbe written.\n\n    Use a script or third-party tool to manage the maximum number of audit log\nfiles that are to be stored, staying within the number of logs the system was\nsized to support.\n\n    Use compression and JSON format to reduce file growth.\n\n    Update the location for audit_log_file in the MySQL configuration file, for\nexample:\n    [mysqld]\n    audit-log-file=/var/log/mysql/audit.log\n    audit-log-format=JSON\n    audit-log-compression=GZIP",
            "__new": "Review the MySQL Audit file location, ensure the destination has enough space available to accommodate the maximum total size of all files that could be written. \n\nUse a script or third-party tool to manage the maximum number of audit log files that are to be stored, staying within the number of logs the system was sized to support. \n\nUse compression and JSON format to reduce file growth.\n\nUpdate the location for audit_log_file in the MySQL configuration file, for example:\n[mysqld]\naudit-log-file=/var/log/mysql/audit.log\naudit-log-format=JSON\naudit-log-compression=GZIP"
          }
        }
      },
      "SV-235174": {
        "describe__deleted": "  describe 'Manually review the system documentation for a description of how audit records are\noff-loaded and how local audit log space is managed.' do\n    skip 'Manually review the system documentation for a description of how audit records are\n    off-loaded and how local audit log space is managed.'\n  end",
        "tags": {
          "check_id__added": "C-38393r623642_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235174r638812_rule",
            "__new": "SV-235174r961860_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must off-load audit data to a separate\nlog management facility; this must be continuous and in near real time for\nsystems with a network connection to the storage facility and weekly or more\noften for stand-alone systems.",
          "__new": "The MySQL Database Server 8.0 must off-load audit data to a separate log management facility; this must be continuous and in near real time for systems with a network connection to the storage facility and weekly or more often for stand-alone systems."
        },
        "desc": {
          "__old": "Information stored in one location is vulnerable to accidental or\nincidental deletion or alteration.\n\n    Off-loading is a common process in information systems with limited audit\nstorage capacity.\n\n    The DBMS may write audit records to database tables, to files in the file\nsystem, to other kinds of local repository, or directly to a centralized log\nmanagement system. Whatever the method used, it must be compatible with\noff-loading the records to the centralized system.",
          "__new": "Information stored in one location is vulnerable to accidental or incidental deletion or alteration.\n\nOff-loading is a common process in information systems with limited audit storage capacity. \n\nThe DBMS may write audit records to database tables, to files in the file system, to other kinds of local repository, or directly to a centralized log management system. Whatever the method used, it must be compatible with off-loading the records to the centralized system."
        },
        "descs": {
          "default__deleted": "Information stored in one location is vulnerable to accidental or\nincidental deletion or alteration.\n\n    Off-loading is a common process in information systems with limited audit\nstorage capacity.\n\n    The DBMS may write audit records to database tables, to files in the file\nsystem, to other kinds of local repository, or directly to a centralized log\nmanagement system. Whatever the method used, it must be compatible with\noff-loading the records to the centralized system.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the system documentation for a description of how audit records are\noff-loaded.\n\n    Check that the OS or software is in place to copy or transfer the specified\naudit record content to a centralized audit log repository. If it is not, this\nis a finding.\n\n    Check that permissions are set on the either the MySQL audit log read\nfunctions (users granted AUDIT_ADMIN or MySQL Audit Files and on the target\nrepository to enable the required transfer of audit data. If not, this is a\nfinding.\n\n    Verify that the specified audit record content is indeed copied or\ntransferred to the central repository. If it is not, this is a finding.",
            "__new": "Review the system documentation for a description of how audit records are off-loaded.\n\nCheck that the OS or software is in place to copy or transfer the specified audit record content to a centralized audit log repository. If it is not, this is a finding.\n\nCheck that permissions are set on the either the MySQL audit log read functions (users granted AUDIT_ADMIN or MySQL Audit Files and on the target repository to enable the required transfer of audit data. If not, this is a finding.\n\nVerify that the specified audit record content is indeed copied or transferred to the central repository. If it is not, this is a finding."
          },
          "fix": {
            "__old": "If necessary, employ SQL code calls to the audit log read functions or\nother software to copy or transfer the specified audit record content to the\nrepository.\n\n    Ensure that permissions are set to enable transfer of the data. Some SQL\nmay require the AUDIT_ADMIN permission be granted to the MySQL user account\nused for transferring the data.\n\n    Based on the setup, allocate sufficient audit file/table space to support\npeak demand.\n\n    For example to set to 1 GB:\n    set persist audit_log_rotate_on_size=1024*1024*1024;\n\n    If using file copies to move audit logs, only audit.<timestamp>.log*\nformatted files should be copied as audit.log* are still being written to.\n\n    If audit data is copied using a SQL function, the audit files still require\nremoval using some alternative method on the OS filesystem, for example a\nthird-party tool or a scheduled script.\n\n    If, after the preceding steps, the transfer is not succeeding, diagnose and\nrepair the problem.",
            "__new": "If necessary, employ SQL code calls to the audit log read functions or other software to copy or transfer the specified audit record content to the repository.\n\nEnsure that permissions are set to enable transfer of the data. Some SQL may require the AUDIT_ADMIN permission be granted to the MySQL user account used for transferring the data.\n\nBased on the setup, allocate sufficient audit file/table space to support peak demand.\n\nFor example to set to 1 GB:\nset persist audit_log_rotate_on_size=1024*1024*1024;\n\nIf using file copies to move audit logs, only audit.<timestamp>.log* formatted files should be copied as audit.log* are still being written to.\n\nIf audit data is copied using a SQL function, the audit files still require removal using some alternative method on the OS filesystem, for example a third-party tool or a scheduled script.\n\nIf, after the preceding steps, the transfer is not succeeding, diagnose and repair the problem."
          }
        }
      },
      "SV-235175": {
        "describe__deleted": "  describe \"Manually review OS, or third-party logging application settings to determine whether\na warning will be provided when #{input('max_audit_record_storage')} percent of DBMS audit log storage capacity\nis reached.\" do\n    skip \"Manually review OS, or third-party logging application settings to determine whether\n    a warning will be provided when #{input('max_audit_record_storage')} percent of DBMS audit log storage capacity\n    is reached.\"\n  end",
        "tags": {
          "check_id__added": "C-38394r623645_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235175r638812_rule",
            "__new": "SV-235175r961398_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must provide a warning to appropriate\nsupport staff when allocated audit record storage volume reaches 75 percent of\nmaximum audit record storage capacity.",
          "__new": "The MySQL Database Server 8.0 must provide a warning to appropriate support staff when allocated audit record storage volume reaches 75 percent of maximum audit record storage capacity."
        },
        "desc": {
          "__old": "Organizations are required to use a central log management system, so,\nunder normal conditions, the audit space allocated to the DBMS on its own\nserver will not be an issue. However, space will still be required on the\nDatabase Management System's (DBMS) server for audit records in transit, and,\nunder abnormal conditions, this could fill up. Since a requirement exists to\nhalt processing upon audit failure, a service outage would result.\n\n    If support personnel are not notified immediately upon storage volume\nutilization reaching 75 percent, they are unable to plan for storage capacity\nexpansion.\n\n    The appropriate support staff include, at a minimum, the Information System\nSecurity Officer (ISSO) and the database administrator (DBA)/system\nadministrator (SA).",
          "__new": "Organizations are required to use a central log management system, so, under normal conditions, the audit space allocated to the DBMS on its own server will not be an issue. However, space will still be required on the Database Management System's (DBMS) server for audit records in transit, and, under abnormal conditions, this could fill up. Since a requirement exists to halt processing upon audit failure, a service outage would result.\n\nIf support personnel are not notified immediately upon storage volume utilization reaching 75 percent, they are unable to plan for storage capacity expansion. \n\nThe appropriate support staff include, at a minimum, the Information System Security Officer (ISSO) and the database administrator (DBA)/system administrator (SA)."
        },
        "descs": {
          "default__deleted": "Organizations are required to use a central log management system, so,\nunder normal conditions, the audit space allocated to the DBMS on its own\nserver will not be an issue. However, space will still be required on the\nDatabase Management System's (DBMS) server for audit records in transit, and,\nunder abnormal conditions, this could fill up. Since a requirement exists to\nhalt processing upon audit failure, a service outage would result.\n\n    If support personnel are not notified immediately upon storage volume\nutilization reaching 75 percent, they are unable to plan for storage capacity\nexpansion.\n\n    The appropriate support staff include, at a minimum, the Information System\nSecurity Officer (ISSO) and the database administrator (DBA)/system\nadministrator (SA).",
          "rationale__deleted": "",
          "check": {
            "__old": "Review OS, or third-party logging application settings to determine whether\na warning will be provided when 75 percent of DBMS audit log storage capacity\nis reached.\n\n    If no warning will be provided, this is a finding.",
            "__new": "Review OS, or third-party logging application settings to determine whether a warning will be provided when 75 percent of DBMS audit log storage capacity is reached.\n\nIf no warning will be provided, this is a finding."
          },
          "fix": {
            "__old": "Modify OS, or third-party logging application settings to alert\nappropriate personnel when 75 percent of audit log storage capacity is reached.",
            "__new": "Modify OS, or third-party logging application settings to alert appropriate personnel when 75 percent of audit log storage capacity is reached."
          }
        }
      },
      "SV-235176": {
        "describe__deleted": "  describe 'Manually review MySQL Server settings, OS, or third-party logging software settings\nto determine whether a real-time alert will be sent to the appropriate\npersonnel when auditing fails for any reason.' do\n    skip 'Manually review MySQL Server settings, OS, or third-party logging software settings\n    to determine whether a real-time alert will be sent to the appropriate\n    personnel when auditing fails for any reason.'\n  end",
        "tags": {
          "check_id__added": "C-38395r623648_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235176r638812_rule",
            "__new": "SV-235176r961401_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must provide an immediate real-time\nalert to appropriate support staff of all audit log failures.",
          "__new": "The MySQL Database Server 8.0 must provide an immediate real-time alert to appropriate support staff of all audit log failures."
        },
        "desc": {
          "__old": "It is critical for the appropriate personnel to be aware if a system\nis at risk of failing to process audit logs as required. Without a real-time\nalert, security personnel may be unaware of an impending failure of the audit\ncapability, and system operation may be adversely affected.\n\n    The appropriate support staff include, at a minimum, the Information System\nSecurity Officer (ISSO) and the database administrator (DBA)/system\nadministrator (SA).\n\n    A failure of database auditing will result in either the database\ncontinuing to function without auditing or in a complete halt to database\noperations. When audit processing fails, appropriate personnel must be alerted\nimmediately to avoid further downtime or unaudited transactions.\n\n    Alerts provide organizations with urgent messages. Real-time alerts provide\nthese messages immediately (i.e., the time from event detection to alert occurs\nin seconds or less).",
          "__new": "It is critical for the appropriate personnel to be aware if a system is at risk of failing to process audit logs as required. Without a real-time alert, security personnel may be unaware of an impending failure of the audit capability, and system operation may be adversely affected. \n\nThe appropriate support staff include, at a minimum, the Information System Security Officer (ISSO) and the database administrator (DBA)/system administrator (SA).\n\nA failure of database auditing will result in either the database continuing to function without auditing or in a complete halt to database operations. When audit processing fails, appropriate personnel must be alerted immediately to avoid further downtime or unaudited transactions.\n\nAlerts provide organizations with urgent messages. Real-time alerts provide these messages immediately (i.e., the time from event detection to alert occurs in seconds or less)."
        },
        "descs": {
          "default__deleted": "It is critical for the appropriate personnel to be aware if a system\nis at risk of failing to process audit logs as required. Without a real-time\nalert, security personnel may be unaware of an impending failure of the audit\ncapability, and system operation may be adversely affected.\n\n    The appropriate support staff include, at a minimum, the Information System\nSecurity Officer (ISSO) and the database administrator (DBA)/system\nadministrator (SA).\n\n    A failure of database auditing will result in either the database\ncontinuing to function without auditing or in a complete halt to database\noperations. When audit processing fails, appropriate personnel must be alerted\nimmediately to avoid further downtime or unaudited transactions.\n\n    Alerts provide organizations with urgent messages. Real-time alerts provide\nthese messages immediately (i.e., the time from event detection to alert occurs\nin seconds or less).",
          "rationale__deleted": "",
          "check": {
            "__old": "Review MySQL Server settings, OS, or third-party logging software settings\nto determine whether a real-time alert will be sent to the appropriate\npersonnel when auditing fails for any reason.\n\n    If real-time alerts are not sent upon auditing failure, this is a finding.",
            "__new": "Review MySQL Server settings, OS, or third-party logging software settings to determine whether a real-time alert will be sent to the appropriate personnel when auditing fails for any reason.\n\nIf real-time alerts are not sent upon auditing failure, this is a finding."
          },
          "fix": {
            "__old": "Configure the system to provide immediate real-time alerts to\nappropriate support staff when an audit log failure occurs.",
            "__new": "Configure the system to provide immediate real-time alerts to appropriate support staff when an audit log failure occurs."
          }
        }
      },
      "SV-235177": {
        "describe__deleted": "  describe 'Manually review the LDAP server for the maximum lifetime of the\nKerberos service Tickets expiration policy meets organization-defined time period.' do\n    skip 'Manually review the LDAP server for the maximum lifetime of the\n    Kerberos service Tickets expiration policy meets organization-defined time period.'\n  end",
        "tags": {
          "check_id__added": "C-38396r623651_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235177r638812_rule",
            "__new": "SV-235177r961521_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must prohibit the use of cached\nauthenticators after an organization-defined time period.",
          "__new": "The MySQL Database Server 8.0 must prohibit the use of cached authenticators after an organization-defined time period."
        },
        "desc": {
          "__old": "If cached authentication information is out-of-date, the validity of\nthe authentication information may be questionable.",
          "__new": "If cached authentication information is out-of-date, the validity of the authentication information may be questionable."
        },
        "descs": {
          "default__deleted": "If cached authentication information is out-of-date, the validity of\nthe authentication information may be questionable.",
          "rationale__deleted": "",
          "check": {
            "__old": "Verify that the MySQL is using Kerberos Authentication.\n\n    On the server:\n    SELECT PLUGIN_NAME, PLUGIN_STATUS\n           FROM INFORMATION_SCHEMA.PLUGINS\n           WHERE PLUGIN_NAME LIKE '%ldap%';\n\n    On the client(s) where Kerberos will authenticate, check how long the\nticket is cached.\n\n    First check whether Kerberos authentication works correctly:\n    Use kinit to authenticate to Kerberos, for example.\n    kinit bredon@MYSQL.LOCAL\n\n    The command authenticates for the Kerberos principal named\nbredon@MYSQL.LOCAL. Enter the principal's password when the command prompts for\nit. The KDC returns a TGT that is cached on the client side for use by other\nKerberos-aware applications.\n    Use klist to check whether the TGT was obtained correctly.\n\n    The output should be similar to this:\n    Ticket cache: FILE:/tmp/krb5cc_244306\n    Default principal: bredon@MYSQL.LOCAL\n    Valid starting                 Expires                           Service\nprincipal\n    03/23/2020 08:18:33  03/23/2020 18:18:33  krbtgt/MYSQL.LOCAL@MYSQL.LOCAL\n\n    If the ticket expiration time exceeds the desired maximum expiration, and\nKerberos is enabled, check the LDAP server for the maximum lifetime of the\nKerberos service Tickets expiration policy.\n\n    If the lifetime exceeds the desired expiration time, this is a finding.",
            "__new": "Verify that the MySQL is using Kerberos Authentication.  \n\nOn the server:\nSELECT PLUGIN_NAME, PLUGIN_STATUS\n       FROM INFORMATION_SCHEMA.PLUGINS\n       WHERE PLUGIN_NAME LIKE '%ldap%';\n\nOn the client(s) where Kerberos will authenticate, check how long the ticket is cached.\n\nFirst check whether Kerberos authentication works correctly:\nUse kinit to authenticate to Kerberos, for example.\nkinit bredon@MYSQL.LOCAL\n\nThe command authenticates for the Kerberos principal named bredon@MYSQL.LOCAL. Enter the principal's password when the command prompts for it. The KDC returns a TGT that is cached on the client side for use by other Kerberos-aware applications.\nUse klist to check whether the TGT was obtained correctly. \n\nThe output should be similar to this:\nTicket cache: FILE:/tmp/krb5cc_244306\nDefault principal: bredon@MYSQL.LOCAL\nValid starting                 Expires                           Service principal\n03/23/2020 08:18:33  03/23/2020 18:18:33  krbtgt/MYSQL.LOCAL@MYSQL.LOCAL\n\nIf the ticket expiration time exceeds the desired maximum expiration, and Kerberos is enabled, check the LDAP server for the maximum lifetime of the Kerberos service Tickets expiration policy.  \n\nIf the lifetime exceeds the desired expiration time, this is a finding."
          },
          "fix": {
            "__old": "Modify system settings to implement the organization-defined limit on the\nlifetime of cached authenticators.\n\n    Configure the MySQL server for GSSAPI/Kerberos LDAP authentication plugin\nto use the GSSAPI/Kerberos authentication method.\n\n    Following is an example of plugin-related settings the server my.cnf file\nmight contain:\n    [mysqld]\n    plugin-load-add=authentication_ldap_sasl.so\n    authentication_ldap_sasl_auth_method_name=\"GSSAPI\"\n    authentication_ldap_sasl_server_host=198.51.100.10\n    authentication_ldap_sasl_server_port=389\n\nauthentication_ldap_sasl_bind_root_dn=\"cn=admin,cn=users,dc=MYSQL,dc=LOCAL\"\n    authentication_ldap_sasl_bind_root_pwd=\"password\"\n    authentication_ldap_sasl_bind_base_dn=\"cn=users,dc=MYSQL,dc=LOCAL\"\n    authentication_ldap_sasl_user_search_attr=\"sAMAccountName\"\n\n    Create account(s) using Kerberos Authentication.\n    For example:\n    CREATE USER 'bredon@MYSQL.LOCAL'\n      IDENTIFIED WITH authentication_ldap_sasl\n      BY '#krb_grp=proxied_krb_user';\n\n    CREATE USER 'proxied_krb_user'\n      IDENTIFIED WITH mysql_no_login;\n    GRANT ALL\n      ON krb_user_db.*\n      TO 'proxied_krb_user';\n\n    GRANT PROXY\n      ON 'proxied_krb_user'\n      TO 'bredon@MYSQL.LOCAL’;",
            "__new": "Modify system settings to implement the organization-defined limit on the lifetime of cached authenticators.\n\nConfigure the MySQL server for GSSAPI/Kerberos LDAP authentication plugin to use the GSSAPI/Kerberos authentication method.\n\nFollowing is an example of plugin-related settings the server my.cnf file might contain:\n[mysqld]\nplugin-load-add=authentication_ldap_sasl.so\nauthentication_ldap_sasl_auth_method_name=\"GSSAPI\"\nauthentication_ldap_sasl_server_host=198.51.100.10\nauthentication_ldap_sasl_server_port=389\nauthentication_ldap_sasl_bind_root_dn=\"cn=admin,cn=users,dc=MYSQL,dc=LOCAL\"\nauthentication_ldap_sasl_bind_root_pwd=\"password\"\nauthentication_ldap_sasl_bind_base_dn=\"cn=users,dc=MYSQL,dc=LOCAL\"\nauthentication_ldap_sasl_user_search_attr=\"sAMAccountName\"\n\nCreate account(s) using Kerberos Authentication.\nFor example:\nCREATE USER 'bredon@MYSQL.LOCAL'\n  IDENTIFIED WITH authentication_ldap_sasl\n  BY '#krb_grp=proxied_krb_user';\n\nCREATE USER 'proxied_krb_user'\n  IDENTIFIED WITH mysql_no_login;\nGRANT ALL\n  ON krb_user_db.*\n  TO 'proxied_krb_user';\n\nGRANT PROXY\n  ON 'proxied_krb_user'\n  TO 'bredon@MYSQL.LOCAL’;"
          }
        }
      },
      "SV-235178": {
        "describe__deleted": "  describe 'Manually review MySql requires users to reauthenticate\nwhen organization-defined circumstances or situations require reauthentication.' do\n    skip 'Manually review MySql requires users to reauthenticate\n  when organization-defined circumstances or situations require reauthentication.'\n  end",
        "tags": {
          "check_id__added": "C-38397r623654_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235178r638812_rule",
            "__new": "SV-235178r998297_rule"
          },
          "cci": [
            [
              "-",
              "CCI-002038"
            ],
            [
              "+",
              "CCI-004895"
            ]
          ],
          "nist": [
            [
              "-",
              "IA-11"
            ],
            [
              "+",
              "SC-11 b"
            ]
          ]
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must require users to reauthenticate\nwhen organization-defined circumstances or situations require reauthentication.",
          "__new": "The MySQL Database Server 8.0 must require users to reauthenticate when organization-defined circumstances or situations require reauthentication."
        },
        "desc": {
          "__old": "The DoD standard for authentication of an interactive user is the\npresentation of a Common Access Card (CAC) or other physical token bearing a\nvalid, current, DoD-issued Public Key Infrastructure (PKI) certificate, coupled\nwith a Personal Identification Number (PIN) to be entered by the user at the\nbeginning of each session and whenever reauthentication is required.\n\n    Without reauthentication, users may access resources or perform tasks for\nwhich they do not have authorization.\n\n    When applications provide the capability to change security roles or\nescalate the functional capability of the application, it is critical the user\nreauthenticate.\n\n    In addition to the reauthentication requirements associated with session\nlocks, organizations may require reauthentication of individuals and/or devices\nin other situations, including (but not limited to) the following circumstances:\n\n    (i) When authenticators change;\n    (ii) When roles change;\n    (iii) When security categories of information systems change;\n    (iv) When the execution of privileged functions occurs;\n    (v) After a fixed period of time; or\n    (vi) Periodically.\n\n    Within the DoD, the minimum circumstances requiring reauthentication are\nprivilege escalation and role changes.",
          "__new": "The DOD standard for authentication of an interactive user is the presentation of a Common Access Card (CAC) or other physical token bearing a valid, current, DOD-issued Public Key Infrastructure (PKI) certificate, coupled with a Personal Identification Number (PIN) to be entered by the user at the beginning of each session and whenever reauthentication is required.\n\nWithout reauthentication, users may access resources or perform tasks for which they do not have authorization. \n\nWhen applications provide the capability to change security roles or escalate the functional capability of the application, it is critical the user reauthenticate.\n\nIn addition to the reauthentication requirements associated with session locks, organizations may require reauthentication of individuals and/or devices in other situations, including (but not limited to) the following circumstances:\n\n(i) When authenticators change; \n(ii) When roles change; \n(iii) When security categories of information systems change; \n(iv) When the execution of privileged functions occurs; \n(v) After a fixed period of time; or\n(vi) Periodically.\n\nWithin the DOD, the minimum circumstances requiring reauthentication are privilege escalation and role changes."
        },
        "descs": {
          "default__deleted": "The DoD standard for authentication of an interactive user is the\npresentation of a Common Access Card (CAC) or other physical token bearing a\nvalid, current, DoD-issued Public Key Infrastructure (PKI) certificate, coupled\nwith a Personal Identification Number (PIN) to be entered by the user at the\nbeginning of each session and whenever reauthentication is required.\n\n    Without reauthentication, users may access resources or perform tasks for\nwhich they do not have authorization.\n\n    When applications provide the capability to change security roles or\nescalate the functional capability of the application, it is critical the user\nreauthenticate.\n\n    In addition to the reauthentication requirements associated with session\nlocks, organizations may require reauthentication of individuals and/or devices\nin other situations, including (but not limited to) the following circumstances:\n\n    (i) When authenticators change;\n    (ii) When roles change;\n    (iii) When security categories of information systems change;\n    (iv) When the execution of privileged functions occurs;\n    (v) After a fixed period of time; or\n    (vi) Periodically.\n\n    Within the DoD, the minimum circumstances requiring reauthentication are\nprivilege escalation and role changes.",
          "rationale__deleted": "",
          "check": {
            "__old": "Determine all situations where a user must reauthenticate. Check if the\nmechanisms that handle such situations use the following SQL:\n\n    To make a single user reauthenticate, an existing connection must be\npresent:\n\n    To search for a specific user:\n    SELECT * FROM information_schema.PROCESSLIST where user ='<name> and host\nlike '%';\n\n    To review all  connections:\n    SELECT * FROM INFORMATION_SCHEMA.PROCESSLIST;\n\n    Note the ID(s) (processlist_id) of the connection(s) for the user that must\nreauthenticate.\n\n    To make a user reauthenticate, run the following for each ID returned above\n(as they can have multiple connections):\n\n    KILL CONNECTION processslist_id;\n\n    If the provided SQL does not force reauthentication, this is a finding.",
            "__new": "Determine all situations where a user must reauthenticate. Check if the mechanisms that handle such situations use the following SQL:\n\nTo make a single user reauthenticate, an existing connection must be present:\n\nTo search for a specific user:\nSELECT * FROM information_schema.PROCESSLIST where user ='<name> and host like '%';\n\nTo review all  connections:\nSELECT * FROM INFORMATION_SCHEMA.PROCESSLIST;\n\nNote the ID(s) (processlist_id) of the connection(s) for the user that must reauthenticate.\n\nTo make a user reauthenticate, run the following for each ID returned above (as they can have multiple connections):\n\nKILL CONNECTION processslist_id;\n\nIf the provided SQL does not force reauthentication, this is a finding."
          },
          "fix": {
            "__old": "Modify and/or configure MySQL and related applications and tools so that\nusers are always required to reauthenticate when changing role or escalating\nprivileges.\n\n    To make a single user reauthenticate, the following must be present:\n\n    KILL CONNECTION processslist_id;",
            "__new": "Modify and/or configure MySQL and related applications and tools so that users are always required to reauthenticate when changing role or escalating privileges.\n\nTo make a single user reauthenticate, the following must be present:\n\nKILL CONNECTION processslist_id;"
          }
        }
      },
      "SV-235179": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n   mysql_administrative_users = input('mysql_administrative_users')\n  else\n   mysql_administrative_users = input('mysql_administrative_users') + ['rdsadmin']\n  end\n\n  if !input('aws_rds')\n   mysql_administrative_grantees = input('mysql_administrative_grantees')\n  else\n   mysql_administrative_grantees = input('mysql_administrative_grantees') + [\"'rdsadmin'@'localhost'\"]\n  end\n\n  query_admins = %(\n  SELECT\n     * \n  FROM\n     mysql.user \n  WHERE\n     (\n        mysql.user.user not like 'mysql.%'\n     )\n     AND \n     (\n        user.Create_priv = 'Y' \n        OR user.Drop_priv = 'Y' \n        OR user.Grant_priv = 'Y' \n        OR user.References_priv = 'Y' \n        OR user.Index_priv = 'Y' \n        OR user.Alter_priv = 'Y' \n        OR user.Super_priv = 'Y' \n        OR user.Execute_priv = 'Y' \n        OR user.Create_view_priv = 'Y' \n        OR user.Create_routine_priv = 'Y' \n        OR user.Alter_routine_priv = 'Y' \n        OR user.Create_user_priv = 'Y' \n        OR user.Event_priv = 'Y' \n        OR user.Trigger_priv = 'Y' \n        OR user.Create_role_priv = 'Y' \n        OR user.Drop_role_priv = 'Y'\n     );\n  )\n\n  query_users_db_admins = %(\n  SELECT\n     * \n  FROM\n     mysql.db \n  where\n     (\n        db.Grant_priv = 'Y' \n        OR db.References_priv = 'Y' \n        OR db.Index_priv = 'Y' \n        OR db.Alter_priv = 'Y' \n        OR db.Create_tmp_table_priv = 'Y' \n        OR db.Lock_tables_priv = 'Y' \n        OR db.Create_view_priv = 'Y' \n        OR db.Show_view_priv = 'Y' \n        OR db.Create_routine_priv = 'Y' \n        OR db.Alter_routine_priv = 'Y' \n        OR db.Execute_priv = 'Y' \n        OR db.Event_priv = 'Y' \n        OR db.Trigger_priv\n     )\n     and user not like 'mysql.%';\n  )\n\n\n  query_admin_grantees = %(\n  SELECT\n     USER_PRIVILEGES.GRANTEE,\n     USER_PRIVILEGES.TABLE_CATALOG,\n     USER_PRIVILEGES.PRIVILEGE_TYPE,\n     USER_PRIVILEGES.IS_GRANTABLE \n  FROM\n     information_schema.USER_PRIVILEGES \n  where\n     USER_PRIVILEGES.IS_GRANTABLE = 'YES';\n  )\n\n  describe 'List of Users with DDL rights on database objects' do\n    subject { sql_session.query(query_admins).results.column('user') }\n    it { should be_in mysql_administrative_users }\n  end\n\n  describe 'At DB/Schema Level - List of Users with DDL rights on database objects' do\n    subject { sql_session.query(query_users_db_admins).results.column('user') }\n    it { should be_in mysql_administrative_users }\n  end\n\n  describe 'List of users who have been delegated the right to grant permissions to other users' do\n    subject { sql_session.query(query_admin_grantees).results.column('grantee') }\n    it { should be_in mysql_administrative_grantees }\n  end",
        "tags": {
          "check_id__added": "C-38398r623657_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235179r638812_rule",
            "__new": "SV-235179r961317_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must enforce discretionary access\ncontrol policies, as defined by the data owner, over defined subjects and\nobjects.",
          "__new": "The MySQL Database Server 8.0 must enforce discretionary access control policies, as defined by the data owner, over defined subjects and objects."
        },
        "desc": {
          "__old": "Discretionary Access Control (DAC) is based on the notion that\nindividual users are \"owners\" of objects and therefore have discretion over\nwho should be authorized to access the object and in which mode (e.g., read or\nwrite). Ownership is usually acquired as a consequence of creating the object\nor via specified ownership assignment. DAC allows the owner to determine who\nwill have access to objects they control. An example of DAC includes\nuser-controlled table permissions.\n\n    When discretionary access control policies are implemented, subjects are\nnot constrained with regard to what actions they can take with information for\nwhich they have already been granted access. Thus, subjects that have been\ngranted access to information are not prevented from passing (i.e., the\nsubjects have the discretion to pass) the information to other subjects or\nobjects.\n\n    A subject that is constrained in its operation by Mandatory Access Control\npolicies is still able to operate under the less rigorous constraints of this\nrequirement. Thus, while Mandatory Access Control imposes constraints\npreventing a subject from passing information to another subject operating at a\ndifferent sensitivity level, this requirement permits the subject to pass the\ninformation to any subject at the same sensitivity level.\n\n    The policy is bounded by the information system boundary. Once the\ninformation is passed outside of the control of the information system,\nadditional means may be required to ensure the constraints remain in effect.\nWhile the older, more traditional definitions of discretionary access control\nrequire identity-based access control, that limitation is not required for this\nuse of discretionary access control.",
          "__new": "Discretionary Access Control (DAC) is based on the notion that individual users are \"owners\" of objects and therefore have discretion over who should be authorized to access the object and in which mode (e.g., read or write). Ownership is usually acquired as a consequence of creating the object or via specified ownership assignment. DAC allows the owner to determine who will have access to objects they control. An example of DAC includes user-controlled table permissions.\n\nWhen discretionary access control policies are implemented, subjects are not constrained with regard to what actions they can take with information for which they have already been granted access. Thus, subjects that have been granted access to information are not prevented from passing (i.e., the subjects have the discretion to pass) the information to other subjects or objects. \n\nA subject that is constrained in its operation by Mandatory Access Control policies is still able to operate under the less rigorous constraints of this requirement. Thus, while Mandatory Access Control imposes constraints preventing a subject from passing information to another subject operating at a different sensitivity level, this requirement permits the subject to pass the information to any subject at the same sensitivity level. \n\nThe policy is bounded by the information system boundary. Once the information is passed outside of the control of the information system, additional means may be required to ensure the constraints remain in effect. While the older, more traditional definitions of discretionary access control require identity-based access control, that limitation is not required for this use of discretionary access control."
        },
        "descs": {
          "default__deleted": "Discretionary Access Control (DAC) is based on the notion that\nindividual users are \"owners\" of objects and therefore have discretion over\nwho should be authorized to access the object and in which mode (e.g., read or\nwrite). Ownership is usually acquired as a consequence of creating the object\nor via specified ownership assignment. DAC allows the owner to determine who\nwill have access to objects they control. An example of DAC includes\nuser-controlled table permissions.\n\n    When discretionary access control policies are implemented, subjects are\nnot constrained with regard to what actions they can take with information for\nwhich they have already been granted access. Thus, subjects that have been\ngranted access to information are not prevented from passing (i.e., the\nsubjects have the discretion to pass) the information to other subjects or\nobjects.\n\n    A subject that is constrained in its operation by Mandatory Access Control\npolicies is still able to operate under the less rigorous constraints of this\nrequirement. Thus, while Mandatory Access Control imposes constraints\npreventing a subject from passing information to another subject operating at a\ndifferent sensitivity level, this requirement permits the subject to pass the\ninformation to any subject at the same sensitivity level.\n\n    The policy is bounded by the information system boundary. Once the\ninformation is passed outside of the control of the information system,\nadditional means may be required to ensure the constraints remain in effect.\nWhile the older, more traditional definitions of discretionary access control\nrequire identity-based access control, that limitation is not required for this\nuse of discretionary access control.",
          "rationale__deleted": "",
          "check": {
            "__old": "Use the following query to discover database object access rights:\n\n    Users with DDL rights on database objects\n    At Instance Level\n    SELECT *\n    FROM `mysql`.`user`\n    WHERE  (`mysql`.`user`.`user` not like 'mysql.%')  AND (\n        `user`.`Create_priv` = 'Y' OR\n        `user`.`Drop_priv` = 'Y' OR\n        `user`.`Grant_priv` = 'Y' OR\n        `user`.`References_priv` = 'Y' OR\n        `user`.`Index_priv` = 'Y' OR\n        `user`.`Alter_priv` = 'Y' OR\n        `user`.`Super_priv` = 'Y' OR\n        `user`.`Execute_priv` = 'Y' OR\n        `user`.`Create_view_priv` = 'Y' OR\n        `user`.`Create_routine_priv` = 'Y' OR\n        `user`.`Alter_routine_priv` = 'Y' OR\n        `user`.`Create_user_priv` = 'Y' OR\n        `user`.`Event_priv` = 'Y' OR\n        `user`.`Trigger_priv` = 'Y' OR\n        `user`.`Create_role_priv` = 'Y' OR\n        `user`.`Drop_role_priv` = 'Y') ;\n\n    At DB/Schema Level - Users with DDL rights on database objects\n    Ensure only administrative users are returned in the result set.\n    SELECT * FROM mysql.db where\n        (`db`.`Grant_priv` = 'Y' OR\n        `db`.`References_priv`= 'Y' OR\n        `db`.`Index_priv`= 'Y' OR\n        `db`.`Alter_priv`= 'Y' OR\n        `db`.`Create_tmp_table_priv`= 'Y' OR\n        `db`.`Lock_tables_priv`= 'Y' OR\n        `db`.`Create_view_priv`= 'Y' OR\n        `db`.`Show_view_priv`= 'Y' OR\n        `db`.`Create_routine_priv`= 'Y' OR\n        `db`.`Alter_routine_priv`= 'Y' OR\n        `db`.`Execute_priv`= 'Y' OR\n        `db`.`Event_priv`= 'Y' OR\n        `db`.`Trigger_priv`) and user not like 'mysql.%';\n\n    Ensure only administrative users are returned in the result set.\n\n    Use the following query to discover database users who have been delegated\nthe right to grant permissions to other users:\n\n    Execute the following SQL statements to audit this setting:\n    SELECT `USER_PRIVILEGES`.`GRANTEE`,\n        `USER_PRIVILEGES`.`TABLE_CATALOG`,\n        `USER_PRIVILEGES`.`PRIVILEGE_TYPE`,\n        `USER_PRIVILEGES`.`IS_GRANTABLE`\n    FROM `information_schema`.`USER_PRIVILEGES`\n    where `USER_PRIVILEGES`.`IS_GRANTABLE`='YES';\n\n    Ensure only administrative users are returned in the result set.\n\n    If any of these rights are not documented and authorized, this is a finding.",
            "__new": "Use the following query to discover database object access rights:\n\nUsers with DDL rights on database objects\nAt Instance Level\nSELECT *\nFROM `mysql`.`user`\nWHERE  (`mysql`.`user`.`user` not like 'mysql.%')  AND (\n    `user`.`Create_priv` = 'Y' OR\n    `user`.`Drop_priv` = 'Y' OR\n    `user`.`Grant_priv` = 'Y' OR\n    `user`.`References_priv` = 'Y' OR\n    `user`.`Index_priv` = 'Y' OR\n    `user`.`Alter_priv` = 'Y' OR\n    `user`.`Super_priv` = 'Y' OR\n    `user`.`Execute_priv` = 'Y' OR\n    `user`.`Create_view_priv` = 'Y' OR\n    `user`.`Create_routine_priv` = 'Y' OR\n    `user`.`Alter_routine_priv` = 'Y' OR\n    `user`.`Create_user_priv` = 'Y' OR\n    `user`.`Event_priv` = 'Y' OR\n    `user`.`Trigger_priv` = 'Y' OR\n    `user`.`Create_role_priv` = 'Y' OR\n    `user`.`Drop_role_priv` = 'Y') ;\n\nAt DB/Schema Level - Users with DDL rights on database objects\nEnsure only administrative users are returned in the result set.\nSELECT * FROM mysql.db where\n    (`db`.`Grant_priv` = 'Y' OR\n    `db`.`References_priv`= 'Y' OR\n    `db`.`Index_priv`= 'Y' OR\n    `db`.`Alter_priv`= 'Y' OR\n    `db`.`Create_tmp_table_priv`= 'Y' OR\n    `db`.`Lock_tables_priv`= 'Y' OR\n    `db`.`Create_view_priv`= 'Y' OR\n    `db`.`Show_view_priv`= 'Y' OR\n    `db`.`Create_routine_priv`= 'Y' OR\n    `db`.`Alter_routine_priv`= 'Y' OR\n    `db`.`Execute_priv`= 'Y' OR\n    `db`.`Event_priv`= 'Y' OR\n    `db`.`Trigger_priv`) and user not like 'mysql.%';\n\nEnsure only administrative users are returned in the result set.\n\nUse the following query to discover database users who have been delegated the right to grant permissions to other users:\n\nExecute the following SQL statements to audit this setting:\nSELECT `USER_PRIVILEGES`.`GRANTEE`,\n    `USER_PRIVILEGES`.`TABLE_CATALOG`,\n    `USER_PRIVILEGES`.`PRIVILEGE_TYPE`,\n    `USER_PRIVILEGES`.`IS_GRANTABLE`\nFROM `information_schema`.`USER_PRIVILEGES`\nwhere `USER_PRIVILEGES`.`IS_GRANTABLE`='YES';\n\nEnsure only administrative users are returned in the result set.\n\nIf any of these rights are not documented and authorized, this is a finding."
          }
        }
      },
      "SV-235180": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  query_procedures = %(SHOW PROCEDURE STATUS where security_type <> 'INVOKER';)\n\n  query_functions = %(SHOW FUNCTION STATUS where security_type <> 'INVOKER';)\n\n  authorized_functions = input('authorized_functions')\n\n  if !input('aws_rds')\n    authorized_procedures = input('authorized_procedures')\n  else\n    authorized_procedures = input('authorized_procedures') + ['rds_collect_global_status_history', 'rds_disable_gsh_collector', 'rds_disable_gsh_rotation', 'rds_enable_gsh_collector', 'rds_enable_gsh_rotation', 'rds_external_master', 'rds_innodb_buffer_pool_dump_now', 'rds_innodb_buffer_pool_load_abort', 'rds_innodb_buffer_pool_load_now', 'rds_kill', 'rds_kill_query', 'rds_next_master_log', 'rds_reset_external_master', 'rds_rotate_general_log', 'rds_rotate_global_status_history', 'rds_rotate_slow_log', 'rds_set_configuration', 'rds_set_external_master', 'rds_set_external_master_with_auto_position', 'rds_set_external_master_with_delay', 'rds_set_fk_checks_off', 'rds_set_fk_checks_on', 'rds_set_gsh_collector', 'rds_set_gsh_rotation', 'rds_set_master_auto_position', 'rds_set_source_delay', 'rds_show_configuration', 'rds_skip_repl_error', 'rds_skip_transaction_with_gtid', 'rds_start_replication', 'rds_start_replication_until', 'rds_start_replication_until_gtid', 'rds_stop_replication']\n  end\n\n  describe \"List of PROCEDUREs defined\" do\n    subject { sql_session.query(query_procedures).results.column('name') }\n    it { should be_in authorized_procedures }\n  end\n\n  describe \"List of FUNCTIONs defined\" do\n    subject { sql_session.query(query_functions).results.column('name') }\n    it { should be_in authorized_functions }\n  end",
        "tags": {
          "check_id__added": "C-38399r623660_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235180r638812_rule",
            "__new": "SV-235180r961359_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "Execution of software modules (to include stored procedures,\nfunctions, and triggers) with elevated privileges must be restricted to\nnecessary cases only.",
          "__new": "Execution of software modules (to include stored procedures, functions, and triggers) with elevated privileges must be restricted to necessary cases only."
        },
        "desc": {
          "__old": "In certain situations, to provide required functionality, a Database\nManagement System (DBMS) needs to execute internal logic (stored procedures,\nfunctions, triggers, etc.) and/or external code modules with elevated\nprivileges. However, if the privileges required for execution are at a higher\nlevel than the privileges assigned to organizational users invoking the\nfunctionality applications/programs, those users are indirectly provided with\ngreater privileges than assigned by organizations.\n\n    Privilege elevation must be utilized only where necessary and protected\nfrom misuse.",
          "__new": "In certain situations, to provide required functionality, a Database Management System (DBMS) needs to execute internal logic (stored procedures, functions, triggers, etc.) and/or external code modules with elevated privileges. However, if the privileges required for execution are at a higher level than the privileges assigned to organizational users invoking the functionality applications/programs, those users are indirectly provided with greater privileges than assigned by organizations.\n\nPrivilege elevation must be utilized only where necessary and protected from misuse."
        },
        "descs": {
          "default__deleted": "In certain situations, to provide required functionality, a Database\nManagement System (DBMS) needs to execute internal logic (stored procedures,\nfunctions, triggers, etc.) and/or external code modules with elevated\nprivileges. However, if the privileges required for execution are at a higher\nlevel than the privileges assigned to organizational users invoking the\nfunctionality applications/programs, those users are indirectly provided with\ngreater privileges than assigned by organizations.\n\n    Privilege elevation must be utilized only where necessary and protected\nfrom misuse.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the server documentation to obtain a listing of accounts used for\nexecuting external processes. Execute the following query to obtain a listing\nof accounts currently configured for use by external processes.\n\n    SHOW PROCEDURE STATUS where security_type <> 'INVOKER';\n    SHOW FUNCTION STATUS where security_type <> 'INVOKER';\n\n    If DEFINER accounts are returned that are not documented and authorized,\nthis is a finding.\n\n    If elevation of MySQL privileges using DEFINER is documented, but not\nimplemented as described in the documentation, this is a finding.\n\n    If the privilege-elevation logic can be invoked in ways other than\nintended, or in contexts other than intended, or by subjects/principals other\nthan intended, this is a finding.",
            "__new": "Review the server documentation to obtain a listing of accounts used for executing external processes. Execute the following query to obtain a listing of accounts currently configured for use by external processes. \n\nSHOW PROCEDURE STATUS where security_type <> 'INVOKER';\nSHOW FUNCTION STATUS where security_type <> 'INVOKER';\n\nIf DEFINER accounts are returned that are not documented and authorized, this is a finding.\n\nIf elevation of MySQL privileges using DEFINER is documented, but not implemented as described in the documentation, this is a finding.\n\nIf the privilege-elevation logic can be invoked in ways other than intended, or in contexts other than intended, or by subjects/principals other than intended, this is a finding."
          },
          "fix": {
            "__old": "Remove any procedures that are not authorized.\n\nDrop the procedure or function using\nDROP PROCEDURE <proc_name>;\nDROP FUNCTION <function_name>;",
            "__new": "Remove any procedures that are not authorized.\n\nDrop the procedure or function using \nDROP PROCEDURE <proc_name>;\nDROP FUNCTION <function_name>;"
          }
        }
      },
      "SV-235181": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  query_procedures = %(SHOW PROCEDURE STATUS where security_type <> 'INVOKER';)\n\n  query_functions = %(SHOW FUNCTION STATUS where security_type <> 'INVOKER';)\n\n  if !input('aws_rds')\n    authorized_procedures = input('authorized_procedures')\n  else\n    authorized_procedures = input('authorized_procedures') + ['rds_collect_global_status_history', 'rds_disable_gsh_collector', 'rds_disable_gsh_rotation', 'rds_enable_gsh_collector', 'rds_enable_gsh_rotation', 'rds_external_master', 'rds_innodb_buffer_pool_dump_now', 'rds_innodb_buffer_pool_load_abort', 'rds_innodb_buffer_pool_load_now', 'rds_kill', 'rds_kill_query', 'rds_next_master_log', 'rds_reset_external_master', 'rds_rotate_general_log', 'rds_rotate_global_status_history', 'rds_rotate_slow_log', 'rds_set_configuration', 'rds_set_external_master', 'rds_set_external_master_with_auto_position', 'rds_set_external_master_with_delay', 'rds_set_fk_checks_off', 'rds_set_fk_checks_on', 'rds_set_gsh_collector', 'rds_set_gsh_rotation', 'rds_set_master_auto_position', 'rds_set_source_delay', 'rds_show_configuration', 'rds_skip_repl_error', 'rds_skip_transaction_with_gtid', 'rds_start_replication', 'rds_start_replication_until', 'rds_start_replication_until_gtid', 'rds_stop_replication']\n  end\n\n  authorized_functions = input('authorized_functions')\n\n  describe \"List of PROCEDUREs defined\" do\n    subject { sql_session.query(query_procedures).results.column('name') }\n    it { should be_in authorized_procedures }\n  end\n\n  describe \"List of FUNCTIONs defined\" do\n    subject { sql_session.query(query_functions).results.column('name') }\n    it { should be_in authorized_functions }\n  end",
        "tags": {
          "check_id__added": "C-38400r623663_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235181r638812_rule",
            "__new": "SV-235181r961353_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must prevent non-privileged users from\nexecuting privileged functions, to include disabling, circumventing, or\naltering implemented security safeguards/countermeasures.",
          "__new": "The MySQL Database Server 8.0 must prevent non-privileged users from executing privileged functions, to include disabling, circumventing, or altering implemented security safeguards/countermeasures."
        },
        "desc": {
          "__old": "Preventing non-privileged users from executing privileged functions\nmitigates the risk that unauthorized individuals or processes may gain\nunnecessary access to information or privileges.\n\n    System documentation should include a definition of the functionality\nconsidered privileged.\n\n    Depending on circumstances, privileged functions can include, for example,\nestablishing accounts, performing system integrity checks, or administering\ncryptographic key management activities. Non-privileged users are individuals\nthat do not possess appropriate authorizations. Circumventing intrusion\ndetection and prevention mechanisms or malicious code protection mechanisms are\nexamples of privileged functions that require protection from non-privileged\nusers.\n\n    A privileged function in the Database Management System (DBMS)/database\ncontext is any operation that modifies the structure of the database, its\nbuilt-in logic, or its security settings. This would include all Data\nDefinition Language (DDL) statements and all security-related statements. In a\nSQL environment, it encompasses, but is not necessarily limited to:\n    CREATE\n    ALTER\n    DROP\n    GRANT\n    REVOKE\n    DENY\n\n    There may also be Data Manipulation Language (DML) statements that, subject\nto context, should be regarded as privileged. Possible examples include:\n\n    TRUNCATE TABLE;\n    DELETE, or\n    DELETE affecting more than n rows, for some n, or\n    DELETE without a WHERE clause;\n\n    UPDATE or\n    UPDATE affecting more than n rows, for some n, or\n    UPDATE without a WHERE clause;\n\n    any SELECT, INSERT, UPDATE, or DELETE to an application-defined security\ntable executed by other than a security principal.\n\n    Depending on the capabilities of the DBMS and the design of the database\nand associated applications, the prevention of unauthorized use of privileged\nfunctions may be achieved by means of DBMS security features, database\ntriggers, other mechanisms, or a combination of these.",
          "__new": "Preventing non-privileged users from executing privileged functions mitigates the risk that unauthorized individuals or processes may gain unnecessary access to information or privileges. \n\nSystem documentation should include a definition of the functionality considered privileged.\n\nDepending on circumstances, privileged functions can include, for example, establishing accounts, performing system integrity checks, or administering cryptographic key management activities. Non-privileged users are individuals that do not possess appropriate authorizations. Circumventing intrusion detection and prevention mechanisms or malicious code protection mechanisms are examples of privileged functions that require protection from non-privileged users.\n\nA privileged function in the Database Management System (DBMS)/database context is any operation that modifies the structure of the database, its built-in logic, or its security settings. This would include all Data Definition Language (DDL) statements and all security-related statements. In a SQL environment, it encompasses, but is not necessarily limited to: \nCREATE\nALTER\nDROP\nGRANT\nREVOKE\nDENY\n\nThere may also be Data Manipulation Language (DML) statements that, subject to context, should be regarded as privileged. Possible examples include:\n\nTRUNCATE TABLE;\nDELETE, or\nDELETE affecting more than n rows, for some n, or\nDELETE without a WHERE clause;\n\nUPDATE or\nUPDATE affecting more than n rows, for some n, or\nUPDATE without a WHERE clause;\n\nany SELECT, INSERT, UPDATE, or DELETE to an application-defined security table executed by other than a security principal.\n\nDepending on the capabilities of the DBMS and the design of the database and associated applications, the prevention of unauthorized use of privileged functions may be achieved by means of DBMS security features, database triggers, other mechanisms, or a combination of these."
        },
        "descs": {
          "default__deleted": "Preventing non-privileged users from executing privileged functions\nmitigates the risk that unauthorized individuals or processes may gain\nunnecessary access to information or privileges.\n\n    System documentation should include a definition of the functionality\nconsidered privileged.\n\n    Depending on circumstances, privileged functions can include, for example,\nestablishing accounts, performing system integrity checks, or administering\ncryptographic key management activities. Non-privileged users are individuals\nthat do not possess appropriate authorizations. Circumventing intrusion\ndetection and prevention mechanisms or malicious code protection mechanisms are\nexamples of privileged functions that require protection from non-privileged\nusers.\n\n    A privileged function in the Database Management System (DBMS)/database\ncontext is any operation that modifies the structure of the database, its\nbuilt-in logic, or its security settings. This would include all Data\nDefinition Language (DDL) statements and all security-related statements. In a\nSQL environment, it encompasses, but is not necessarily limited to:\n    CREATE\n    ALTER\n    DROP\n    GRANT\n    REVOKE\n    DENY\n\n    There may also be Data Manipulation Language (DML) statements that, subject\nto context, should be regarded as privileged. Possible examples include:\n\n    TRUNCATE TABLE;\n    DELETE, or\n    DELETE affecting more than n rows, for some n, or\n    DELETE without a WHERE clause;\n\n    UPDATE or\n    UPDATE affecting more than n rows, for some n, or\n    UPDATE without a WHERE clause;\n\n    any SELECT, INSERT, UPDATE, or DELETE to an application-defined security\ntable executed by other than a security principal.\n\n    Depending on the capabilities of the DBMS and the design of the database\nand associated applications, the prevention of unauthorized use of privileged\nfunctions may be achieved by means of DBMS security features, database\ntriggers, other mechanisms, or a combination of these.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the server documentation to obtain a listing of accounts used for\nexecuting external processes. Execute the following query to obtain a listing\nof accounts currently configured for use by external processes.\n\n    SHOW PROCEDURE STATUS where security_type <> 'INVOKER';\n    SHOW FUNCTION STATUS where security_type <> 'INVOKER';\n\n    If DEFINER accounts are returned that are not documented and authorized,\nthis is a finding.\n    If elevation of MySQL privileges using DEFINER is documented, but not\nimplemented as described in the documentation, this is a finding.\n    If the privilege-elevation logic can be invoked in ways other than\nintended, or in contexts other than intended, or by subjects/principals other\nthan intended, this is a finding.",
            "__new": "Review the server documentation to obtain a listing of accounts used for executing external processes. Execute the following query to obtain a listing of accounts currently configured for use by external processes. \n\nSHOW PROCEDURE STATUS where security_type <> 'INVOKER';\nSHOW FUNCTION STATUS where security_type <> 'INVOKER';\n\nIf DEFINER accounts are returned that are not documented and authorized, this is a finding.\nIf elevation of MySQL privileges using DEFINER is documented, but not implemented as described in the documentation, this is a finding.\nIf the privilege-elevation logic can be invoked in ways other than intended, or in contexts other than intended, or by subjects/principals other than intended, this is a finding."
          },
          "fix": {
            "__old": "Remove any procedures that are not authorized.\n\nDrop the procedure or function using\nDROP PROCEDURE <proc_name>;\nDROP FUNCTION <function_name>;",
            "__new": "Remove any procedures that are not authorized.\n\nDrop the procedure or function using \nDROP PROCEDURE <proc_name>;\nDROP FUNCTION <function_name>;"
          }
        }
      },
      "SV-235182": {
        "describe__deleted": "  describe 'Manually review organization-defined security labeling of information in storage are satisfied.' do\n    skip 'Manually review organization-defined security labeling of information in storage are satisfied.'\n  end",
        "tags": {
          "check_id__added": "C-38401r623666_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235182r638812_rule",
            "__new": "SV-235182r961269_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must associate organization-defined\ntypes of security labels having organization-defined security label values with\ninformation in storage.",
          "__new": "The MySQL Database Server 8.0 must associate organization-defined types of security labels having organization-defined security label values with information in storage."
        },
        "desc": {
          "__old": "Without the association of security labels to information, there is no\nbasis for the DBMS to make security-related access-control decisions.\n\n    Security labels are abstractions representing the basic properties or\ncharacteristics of an entity (e.g., subjects and objects) with respect to\nsafeguarding information.\n\n    These labels are typically associated with internal data structures (e.g.,\ntables, rows) within the database and are used to enable the implementation of\naccess control and flow control policies, reflect special dissemination,\nhandling or distribution instructions, or support other aspects of the\ninformation security policy.\n\n    One example includes marking data as classified or FOUO. These security\nlabels may be assigned manually or during data processing, but, either way, it\nis imperative these assignments are maintained while the data is in storage. If\nthe security labels are lost when the data is stored, there is the risk of a\ndata compromise.\n\n    The mechanism used to support security labeling may be a feature of the\nDBMS product, a third-party product, or custom application code.\n\n    For MySQL, a view or stored procedures can limit access to only selected\ncolumns of the base table. A view can provide value-based security for the\ninformation in a table. To use a view requires appropriate privileges only for\nthe view itself. The user need not be given privileges on base objects\nunderlying the view.",
          "__new": "Without the association of security labels to information, there is no basis for the DBMS to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information. \n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy. \n\nOne example includes marking data as classified or FOUO. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling may be a feature of the DBMS product, a third-party product, or custom application code.\n\nFor MySQL, a view or stored procedures can limit access to only selected columns of the base table. A view can provide value-based security for the information in a table. To use a view requires appropriate privileges only for the view itself. The user need not be given privileges on base objects underlying the view."
        },
        "descs": {
          "default__deleted": "Without the association of security labels to information, there is no\nbasis for the DBMS to make security-related access-control decisions.\n\n    Security labels are abstractions representing the basic properties or\ncharacteristics of an entity (e.g., subjects and objects) with respect to\nsafeguarding information.\n\n    These labels are typically associated with internal data structures (e.g.,\ntables, rows) within the database and are used to enable the implementation of\naccess control and flow control policies, reflect special dissemination,\nhandling or distribution instructions, or support other aspects of the\ninformation security policy.\n\n    One example includes marking data as classified or FOUO. These security\nlabels may be assigned manually or during data processing, but, either way, it\nis imperative these assignments are maintained while the data is in storage. If\nthe security labels are lost when the data is stored, there is the risk of a\ndata compromise.\n\n    The mechanism used to support security labeling may be a feature of the\nDBMS product, a third-party product, or custom application code.\n\n    For MySQL, a view or stored procedures can limit access to only selected\ncolumns of the base table. A view can provide value-based security for the\ninformation in a table. To use a view requires appropriate privileges only for\nthe view itself. The user need not be given privileges on base objects\nunderlying the view.",
          "rationale__deleted": "",
          "check": {
            "__old": "If security labeling is not required, this is not a finding.\n\n    For data that have been labeled with a column indicating data is classified\nread-only views can be created and secured via access privileges such that a\nuser can only view the data that have a specific tag or tags (e.g., user [x]\ncan only view records that are labeled with the tag of classified).\n\n    If security labeling requirements have been specified, but neither a\nthird-party solution nor a MySQL Views and Stored Procedures are used to\nimplement row level security solution is implemented that reliably maintains\nlabels on information in storage, this is a finding.",
            "__new": "If security labeling is not required, this is not a finding.\n\nFor data that have been labeled with a column indicating data is classified read-only views can be created and secured via access privileges such that a user can only view the data that have a specific tag or tags (e.g., user [x] can only view records that are labeled with the tag of classified). \n\nIf security labeling requirements have been specified, but neither a third-party solution nor a MySQL Views and Stored Procedures are used to implement row level security solution is implemented that reliably maintains labels on information in storage, this is a finding."
          },
          "fix": {
            "__old": "Deploy MySQL Views and Stored Procedures or a third-party\nsoftware, or add custom data structures, data elements, and application code,\nto provide reliable security labeling of information in storage.",
            "__new": "Deploy MySQL Views and Stored Procedures or a third-party software, or add custom data structures, data elements, and application code, to provide reliable security labeling of information in storage."
          }
        }
      },
      "SV-235183": {
        "describe__deleted": "  describe 'Manually review organization-defined security labeling of information in storage are satisfied.' do\n    skip 'Manually review organization-defined security labeling of information in storage are satisfied.'\n  end",
        "tags": {
          "check_id__added": "C-38402r623669_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235183r638812_rule",
            "__new": "SV-235183r961272_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must associate organization-defined\ntypes of security labels having organization-defined security label values with\ninformation in process.",
          "__new": "The MySQL Database Server 8.0 must associate organization-defined types of security labels having organization-defined security label values with information in process."
        },
        "desc": {
          "__old": "Without the association of security labels to information, there is no\nbasis for the Database Management System (DBMS) to make security-related\naccess-control decisions.\n\n    Security labels are abstractions representing the basic properties or\ncharacteristics of an entity (e.g., subjects and objects) with respect to\nsafeguarding information.\n\n    These labels are typically associated with internal data structures (e.g.,\ntables, rows) within the database and are used to enable the implementation of\naccess control and flow control policies, reflect special dissemination,\nhandling or distribution instructions, or support other aspects of the\ninformation security policy.\n\n    One example includes marking data as classified or FOUO. These security\nlabels may be assigned manually or during data processing, but, either way, it\nis imperative these assignments are maintained while the data is in storage. If\nthe security labels are lost when the data is stored, there is the risk of a\ndata compromise.\n\n    The mechanism used to support security labeling may be a feature of the\nDBMS product, a third-party product, or custom application code.\n\n    For MySQL, a view or stored procedures can limit access to only selected\ncolumns of the base table. A view can provide value-based security for the\ninformation in a table. To use a view requires appropriate privileges only for\nthe view itself. The user need not be given privileges on base objects\nunderlying the view.",
          "__new": "Without the association of security labels to information, there is no basis for the Database Management System (DBMS) to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information. \n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy. \n\nOne example includes marking data as classified or FOUO. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling may be a feature of the DBMS product, a third-party product, or custom application code.\n\nFor MySQL, a view or stored procedures can limit access to only selected columns of the base table. A view can provide value-based security for the information in a table. To use a view requires appropriate privileges only for the view itself. The user need not be given privileges on base objects underlying the view."
        },
        "descs": {
          "default__deleted": "Without the association of security labels to information, there is no\nbasis for the Database Management System (DBMS) to make security-related\naccess-control decisions.\n\n    Security labels are abstractions representing the basic properties or\ncharacteristics of an entity (e.g., subjects and objects) with respect to\nsafeguarding information.\n\n    These labels are typically associated with internal data structures (e.g.,\ntables, rows) within the database and are used to enable the implementation of\naccess control and flow control policies, reflect special dissemination,\nhandling or distribution instructions, or support other aspects of the\ninformation security policy.\n\n    One example includes marking data as classified or FOUO. These security\nlabels may be assigned manually or during data processing, but, either way, it\nis imperative these assignments are maintained while the data is in storage. If\nthe security labels are lost when the data is stored, there is the risk of a\ndata compromise.\n\n    The mechanism used to support security labeling may be a feature of the\nDBMS product, a third-party product, or custom application code.\n\n    For MySQL, a view or stored procedures can limit access to only selected\ncolumns of the base table. A view can provide value-based security for the\ninformation in a table. To use a view requires appropriate privileges only for\nthe view itself. The user need not be given privileges on base objects\nunderlying the view.",
          "rationale__deleted": "",
          "check": {
            "__old": "If security labeling is not required, this is not a finding.\n\n    If security labeling requirements have been specified, check for a MySQL\nsolution using views and Stored Procedures to implement a row-level security\nsolution that reliably maintains labels on information in storage.\n\n    For data that have been labeled with a column indicating data is classified\nread-only, views can be created and secured via access privileges such that a\nuser should only be able to view the data that have a specific tag or tags\n(e.g., user [x] can only view records that are labeled with the tag of\nclassified).\n\n    If a MySQL solution through the use of views and stored procedures or a\nthird party solution does not exist, this is a finding.",
            "__new": "If security labeling is not required, this is not a finding.\n\nIf security labeling requirements have been specified, check for a MySQL solution using views and Stored Procedures to implement a row-level security solution that reliably maintains labels on information in storage. \n\nFor data that have been labeled with a column indicating data is classified read-only, views can be created and secured via access privileges such that a user should only be able to view the data that have a specific tag or tags (e.g., user [x] can only view records that are labeled with the tag of classified). \n\nIf a MySQL solution through the use of views and stored procedures or a third party solution does not exist, this is a finding."
          },
          "fix": {
            "__old": "Deploy MySQL Views and Stored Procedures or a third-party\nsoftware, or add custom data structures, data elements and application code, to\nprovide reliable security labeling of information in storage.",
            "__new": "Deploy MySQL Views and Stored Procedures or a third-party software, or add custom data structures, data elements and application code, to provide reliable security labeling of information in storage."
          }
        }
      },
      "SV-235184": {
        "describe__deleted": "  describe 'Manually review organization-defined security labeling of information in storage are satisfied.' do\n    skip 'Manually review organization-defined security labeling of information in storage are satisfied.'\n  end",
        "tags": {
          "check_id__added": "C-38403r623672_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235184r638812_rule",
            "__new": "SV-235184r961275_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must associate organization-defined\ntypes of security labels having organization-defined security label values with\ninformation in transmission.",
          "__new": "The MySQL Database Server 8.0 must associate organization-defined types of security labels having organization-defined security label values with information in transmission."
        },
        "desc": {
          "__old": "Without the association of security labels to information, there is no\nbasis for the DBMS to make security-related access-control decisions.\n\n    Security labels are abstractions representing the basic properties or\ncharacteristics of an entity (e.g., subjects and objects) with respect to\nsafeguarding information.\n\n    These labels are typically associated with internal data structures (e.g.,\ntables, rows) within the database and are used to enable the implementation of\naccess control and flow control policies, reflect special dissemination,\nhandling or distribution instructions, or support other aspects of the\ninformation security policy.\n\n    One example includes marking data as classified or FOUO. These security\nlabels may be assigned manually or during data processing, but, either way, it\nis imperative these assignments are maintained while the data is in storage. If\nthe security labels are lost when the data is stored, there is the risk of a\ndata compromise.\n\n    The mechanism used to support security labeling may be a feature of the\nDBMS product, a third-party product, or custom application code.\n\n    For MySQL, a view or stored procedures can limit access to only selected\ncolumns of the base table. A view can provide value-based security for the\ninformation in a table. To use a view requires appropriate privileges only for\nthe view itself. The user need not be given privileges on base objects\nunderlying the view.",
          "__new": "Without the association of security labels to information, there is no basis for the DBMS to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information. \n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy. \n\nOne example includes marking data as classified or FOUO. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling may be a feature of the DBMS product, a third-party product, or custom application code.\n\nFor MySQL, a view or stored procedures can limit access to only selected columns of the base table. A view can provide value-based security for the information in a table. To use a view requires appropriate privileges only for the view itself. The user need not be given privileges on base objects underlying the view."
        },
        "descs": {
          "default__deleted": "Without the association of security labels to information, there is no\nbasis for the DBMS to make security-related access-control decisions.\n\n    Security labels are abstractions representing the basic properties or\ncharacteristics of an entity (e.g., subjects and objects) with respect to\nsafeguarding information.\n\n    These labels are typically associated with internal data structures (e.g.,\ntables, rows) within the database and are used to enable the implementation of\naccess control and flow control policies, reflect special dissemination,\nhandling or distribution instructions, or support other aspects of the\ninformation security policy.\n\n    One example includes marking data as classified or FOUO. These security\nlabels may be assigned manually or during data processing, but, either way, it\nis imperative these assignments are maintained while the data is in storage. If\nthe security labels are lost when the data is stored, there is the risk of a\ndata compromise.\n\n    The mechanism used to support security labeling may be a feature of the\nDBMS product, a third-party product, or custom application code.\n\n    For MySQL, a view or stored procedures can limit access to only selected\ncolumns of the base table. A view can provide value-based security for the\ninformation in a table. To use a view requires appropriate privileges only for\nthe view itself. The user need not be given privileges on base objects\nunderlying the view.",
          "rationale__deleted": "",
          "check": {
            "__old": "If security labeling is not required, this is not a finding.\n\n    If security labeling requirements have been specified, check for a MySQL\nsolution using views and Stored Procedures to implement a row-level security\nsolution that reliably maintains labels on information in storage.\n\n    For data that have been labeled with a column indicating data is classified\nread-only, views can be created and secured via access privileges such that a\nuser can only view the data that have a specific tag or tags (e.g., user [x]\ncan only view records that are labeled with the tag of classified).\n\n    If a MySQL solution through the use of views and stored procedures or a\nthird party solution does not exist, this is a finding.",
            "__new": "If security labeling is not required, this is not a finding.\n\nIf security labeling requirements have been specified, check for a MySQL solution using views and Stored Procedures to implement a row-level security solution that reliably maintains labels on information in storage. \n\nFor data that have been labeled with a column indicating data is classified read-only, views can be created and secured via access privileges such that a user can only view the data that have a specific tag or tags (e.g., user [x] can only view records that are labeled with the tag of classified). \n\nIf a MySQL solution through the use of views and stored procedures or a third party solution does not exist, this is a finding."
          },
          "fix": {
            "__old": "Deploy MySQL Views and Stored Procedures or a third-party\nsoftware, or add custom data structures, data elements and application code, to\nprovide reliable security labeling of information in storage.",
            "__new": "Deploy MySQL Views and Stored Procedures or a third-party software, or add custom data structures, data elements and application code, to provide reliable security labeling of information in storage."
          }
        }
      },
      "SV-235185": {
        "describe__deleted": "  describe 'Manually review MySql requires users to reauthenticate\nwhen organization-defined circumstances or situations require reauthentication.' do\n    skip 'Manually review MySql requires users to reauthenticate\nwhen organization-defined circumstances or situations require reauthentication.'\n  end",
        "tags": {
          "check_id__added": "C-38404r623675_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235185r638812_rule",
            "__new": "SV-235185r961221_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must automatically terminate a user\nsession after organization-defined conditions or trigger events requiring\nsession disconnect.",
          "__new": "The MySQL Database Server 8.0 must automatically terminate a user session after organization-defined conditions or trigger events requiring session disconnect."
        },
        "desc": {
          "__old": "This addresses the termination of user-initiated logical sessions in\ncontrast to the termination of network connections associated with\ncommunications sessions (i.e., network disconnect). A logical session (for\nlocal, network, and remote access) is initiated whenever a user (or process\nacting on behalf of a user) accesses an organizational information system. Such\nuser sessions can be terminated (and thus terminate user access) without\nterminating network sessions.\n\n    Session termination ends all processes associated with a user's logical\nsession except those batch processes/jobs that are specifically created by the\nuser (i.e., session owner) to continue after the session is terminated.\n\n    Conditions or trigger events requiring automatic session termination can\ninclude, for example, organization-defined periods of user inactivity, targeted\nresponses to certain types of incidents, and time-of-day restrictions on\ninformation system use.\n\n    This capability is typically reserved for specific cases where the system\nowner, data owner, or organization requires additional assurance.\n\n    Each connection to mysqld runs in a separate thread. Kill a connection by\nkilling the connections thread with the KILL processlist_id statement.\n\n    Thread processlist identifiers can be determined from the ID column of the\nINFORMATION_SCHEMA PROCESSLIST table, the Id column of SHOW PROCESSLIST output,\nand the PROCESSLIST_ID column of the Performance Schema threads table.",
          "__new": "This addresses the termination of user-initiated logical sessions in contrast to the termination of network connections associated with communications sessions (i.e., network disconnect). A logical session (for local, network, and remote access) is initiated whenever a user (or process acting on behalf of a user) accesses an organizational information system. Such user sessions can be terminated (and thus terminate user access) without terminating network sessions. \n\nSession termination ends all processes associated with a user's logical session except those batch processes/jobs that are specifically created by the user (i.e., session owner) to continue after the session is terminated. \n\nConditions or trigger events requiring automatic session termination can include, for example, organization-defined periods of user inactivity, targeted responses to certain types of incidents, and time-of-day restrictions on information system use.\n\nThis capability is typically reserved for specific cases where the system owner, data owner, or organization requires additional assurance.\n\nEach connection to mysqld runs in a separate thread. Kill a connection by killing the connections thread with the KILL processlist_id statement.\n\nThread processlist identifiers can be determined from the ID column of the INFORMATION_SCHEMA PROCESSLIST table, the Id column of SHOW PROCESSLIST output, and the PROCESSLIST_ID column of the Performance Schema threads table."
        },
        "descs": {
          "default__deleted": "This addresses the termination of user-initiated logical sessions in\ncontrast to the termination of network connections associated with\ncommunications sessions (i.e., network disconnect). A logical session (for\nlocal, network, and remote access) is initiated whenever a user (or process\nacting on behalf of a user) accesses an organizational information system. Such\nuser sessions can be terminated (and thus terminate user access) without\nterminating network sessions.\n\n    Session termination ends all processes associated with a user's logical\nsession except those batch processes/jobs that are specifically created by the\nuser (i.e., session owner) to continue after the session is terminated.\n\n    Conditions or trigger events requiring automatic session termination can\ninclude, for example, organization-defined periods of user inactivity, targeted\nresponses to certain types of incidents, and time-of-day restrictions on\ninformation system use.\n\n    This capability is typically reserved for specific cases where the system\nowner, data owner, or organization requires additional assurance.\n\n    Each connection to mysqld runs in a separate thread. Kill a connection by\nkilling the connections thread with the KILL processlist_id statement.\n\n    Thread processlist identifiers can be determined from the ID column of the\nINFORMATION_SCHEMA PROCESSLIST table, the Id column of SHOW PROCESSLIST output,\nand the PROCESSLIST_ID column of the Performance Schema threads table.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review system documentation to obtain the organization's definition of\ncircumstances requiring automatic session termination. If the documentation\nexplicitly states that such termination is not required or is prohibited, this\nis not a finding.\n\n    Determine the situations where a user must reauthenticate. Check if the\nmechanisms that handle such situations use the following SQL:\n\n    To make a single user reauthenticate, an existing connection must be\npresent:\n\n    To search for a specific user:\n    SELECT * FROM information_schema.PROCESSLIST where user ='<name> and host\nlike '%';\n\n    To review all connections:\n    SELECT * FROM INFORMATION_SCHEMA.PROCESSLIST;\n\n    Note the ID(s) (processlist_id) of the connection(s) for the user that must\nreauthenticate.\n\n    To make a user reauthenticate, run the following for each ID returned above\n(as they can have multiple connections).\n\n    KILL CONNECTION processslist_id;\n\n    If the provided SQL does not force reauthentication, this is a finding.",
            "__new": "Review system documentation to obtain the organization's definition of circumstances requiring automatic session termination. If the documentation explicitly states that such termination is not required or is prohibited, this is not a finding.\n\nDetermine the situations where a user must reauthenticate. Check if the mechanisms that handle such situations use the following SQL:\n\nTo make a single user reauthenticate, an existing connection must be present:\n\nTo search for a specific user:\nSELECT * FROM information_schema.PROCESSLIST where user ='<name> and host like '%';\n\nTo review all connections:\nSELECT * FROM INFORMATION_SCHEMA.PROCESSLIST;\n\nNote the ID(s) (processlist_id) of the connection(s) for the user that must reauthenticate.\n\nTo make a user reauthenticate, run the following for each ID returned above (as they can have multiple connections).\n\nKILL CONNECTION processslist_id;\n\nIf the provided SQL does not force reauthentication, this is a finding."
          },
          "fix": {
            "__old": "Modify and/or configure MySQL and related applications and tools so that\nusers are always required to reauthenticate when changing role or escalating\nprivileges.\n\n    To make a single user reauthenticate, the following must be present:\n\n    KILL CONNECTION processslist_id;",
            "__new": "Modify and/or configure MySQL and related applications and tools so that users are always required to reauthenticate when changing role or escalating privileges.\n\nTo make a single user reauthenticate, the following must be present:\n\nKILL CONNECTION processslist_id;"
          }
        }
      },
      "SV-235186": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  query_ssl_params = %(\n  SELECT @@require_secure_transport;\n  )\n\n  ssl_params = sql_session.query(query_ssl_params).results\n\n  require_secure_transport = ssl_params.column('@@require_secure_transport').join\n  describe '@@require_secure_transport' do\n    it \"should be 1 or ON. Got #{require_secure_transport}\" do\n      expect(require_secure_transport).to be_in(['1', 'ON'])\n    end\n  end",
        "tags": {
          "check_id__added": "C-38405r623678_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235186r638812_rule",
            "__new": "SV-235186r961638_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must maintain the confidentiality and\nintegrity of information during preparation for transmission.",
          "__new": "The MySQL Database Server 8.0 must maintain the confidentiality and integrity of information during preparation for transmission."
        },
        "desc": {
          "__old": "Information can be either unintentionally or maliciously disclosed or\nmodified during preparation for transmission, including, for example, during\naggregation, at protocol transformation points, and during packing/unpacking.\nThese unauthorized disclosures or modifications compromise the confidentiality\nor integrity of the information.\n\n    Use of this requirement will be limited to situations where the data owner\nhas a strict requirement for ensuring data integrity and confidentiality is\nmaintained at every step of the data transfer and handling process.\n\n    When transmitting data, the DBMS, associated applications, and\ninfrastructure must leverage transmission protection mechanisms.",
          "__new": "Information can be either unintentionally or maliciously disclosed or modified during preparation for transmission, including, for example, during aggregation, at protocol transformation points, and during packing/unpacking. These unauthorized disclosures or modifications compromise the confidentiality or integrity of the information.\n\nUse of this requirement will be limited to situations where the data owner has a strict requirement for ensuring data integrity and confidentiality is maintained at every step of the data transfer and handling process. \n\nWhen transmitting data, the DBMS, associated applications, and infrastructure must leverage transmission protection mechanisms."
        },
        "descs": {
          "default__deleted": "Information can be either unintentionally or maliciously disclosed or\nmodified during preparation for transmission, including, for example, during\naggregation, at protocol transformation points, and during packing/unpacking.\nThese unauthorized disclosures or modifications compromise the confidentiality\nor integrity of the information.\n\n    Use of this requirement will be limited to situations where the data owner\nhas a strict requirement for ensuring data integrity and confidentiality is\nmaintained at every step of the data transfer and handling process.\n\n    When transmitting data, the DBMS, associated applications, and\ninfrastructure must leverage transmission protection mechanisms.",
          "rationale__deleted": "",
          "check": {
            "__old": "If the data owner does not have a strict requirement for ensuring data\nintegrity and confidentiality is maintained at every step of the data transfer\nand handling process, this is not a finding.\n\n    Run the following:\n    select @@require_secure_transport;\n\n    The value should be 1 (ON) versus 0 (OFF), if the value is 0 (OFF), this is\na finding.",
            "__new": "If the data owner does not have a strict requirement for ensuring data integrity and confidentiality is maintained at every step of the data transfer and handling process, this is not a finding.\n\nRun the following:\nselect @@require_secure_transport;\n\nThe value should be 1 (ON) versus 0 (OFF), if the value is 0 (OFF), this is a finding."
          },
          "fix": {
            "__old": "Turn on require_secure_transport. In this mode the server permits only\nTCP/IP connections encrypted using TLS/SSL, or connections that use a socket\nfile (on UNIX) or shared memory (on Windows).\n\n    The server rejects nonsecure connection attempts, which fail with an\nER_SECURE_TRANSPORT_REQUIRED error.\n\n    set persist require_secure_transport=ON;",
            "__new": "Turn on require_secure_transport. In this mode the server permits only TCP/IP connections encrypted using TLS/SSL, or connections that use a socket file (on UNIX) or shared memory (on Windows). \n\nThe server rejects nonsecure connection attempts, which fail with an ER_SECURE_TRANSPORT_REQUIRED error.\n\nset persist require_secure_transport=ON;"
          }
        }
      },
      "SV-235187": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n\n    query_ssl_params = %(\n    SELECT @@ssl_fips_mode,\n           @@datadir,\n           @@ssl_cert,\n           @@tls_version;\n    )\n\n    ssl_params = sql_session.query(query_ssl_params).results\n\n    ssl_fips_mode = ssl_params.column('@@ssl_fips_mode').join\n    describe '@@ssl_fips_mode' do\n      it \"should be 1 or ON. Got #{ssl_fips_mode}\" do\n        expect(ssl_fips_mode).to be_in(['1', 'ON'])\n      end\n    end\n\n    describe '@@tls_version' do\n      subject { ssl_params.column('@@tls_version').join.split(',') }\n      it { should_not be_empty }\n      it { should_not include 'TLSv1' }\n      it { should_not include 'TLSv1.1' }\n    end\n\n    query_ssl_cipher_list = %(\n    SELECT\n       * \n    FROM\n       performance_schema.global_status \n    WHERE\n       variable_name = 'Ssl_cipher_list';\n    )\n\n    approved_ssl_cipher_list = %w(\n      ECDHE-ECDSA-AES128-GCM-SHA256\n      ECDHE-ECDSA-AES256-GCM-SHA384\n      ECDHE-RSA-AES128-GCM-SHA256\n      ECDHE-RSA-AES256-GCM-SHA384\n      DHE-RSA-AES128-GCM-SHA256\n      DHE-DSS-AES128-GCM-SHA256\n      DHE-DSS-AES256-GCM-SHA384\n      DHE-RSA-AES256-GCM-SHA384\n      ECDHE-ECDSA-CHACHA20-POLY1305\n      ECDHE-RSA-CHACHA20-POLY1305\n    )\n\n    ssl_cipher_list = sql_session.query(query_ssl_cipher_list).results\n\n    describe 'Ssl_cipher_list' do\n      subject { ssl_cipher_list.column('variable_value').join.split(',') }\n      it { should_not be_empty }\n      it { should be_in approved_ssl_cipher_list }\n    end\n\n    query_tls_ciphersuites = %(\n    SELECT\n       VARIABLE_NAME,\n       VARIABLE_VALUE \n    FROM\n       performance_schema.global_variables \n    WHERE\n       VARIABLE_NAME = 'tls_ciphersuites';\n    )\n\n    approved_tls_ciphersuites = %w(\n      TLS_AES_128_GCM_SHA256\n      TLS_AES_256_GCM_SHA384\n      TLS_CHACHA20_POLY1305_SHA256\n      TLS_AES_128_CCM_SHA256\n      TLS_AES_128_CCM_8_SHA256\n    )\n\n    tls_ciphersuite_list = sql_session.query(query_tls_ciphersuites).results\n\n    describe 'tls_ciphersuites' do\n      subject { tls_ciphersuite_list.column('variable_value').join.split(',') }\n      it { should_not be_empty }\n      it { should be_in approved_tls_ciphersuites }\n    end\n\n      org_approved_cert_issuer = input('org_approved_cert_issuer')\n\n      full_cert_path = \"#{ssl_params.column('@@datadir').join}#{ssl_params.column('@@ssl_cert').join}\"\n      describe \"SSL Certificate file: #{full_cert_path}\" do\n        subject { file(full_cert_path) }\n        it { should exist }\n      end\n\n      describe x509_certificate(full_cert_path) do\n        its('issuer.CN') { should match org_approved_cert_issuer}\n      end\n    \n  else\n    \n    impact 0.0\n    describe 'Not applicable since ssl_fips_mode is set to 0 (OFF) and cannot be configured in AWS RDS' do\n      skip 'Not applicable since ssl_fips_mode is set to 0 (OFF) and cannot be configured in AWS RDS'\n    end\n    \n  end    \n    ",
        "tags": {
          "check_id__added": "C-38406r863353_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235187r638812_rule",
            "__new": "SV-235187r962034_rule"
          },
          "fix_id": {
            "__old": "F-38369r623682_fix",
            "__new": "F-38369r917658_fix"
          },
          "nist": [
            [
              "-",
              "SC-13"
            ],
            [
              "+",
              "SC-13 b"
            ]
          ]
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must use NSA-approved cryptography to\nprotect classified information in accordance with the data owner's\nrequirements.",
          "__new": "The MySQL Database Server 8.0 must use NSA-approved cryptography to protect classified information in accordance with the data owner's requirements."
        },
        "desc": {
          "__old": "Use of weak or untested encryption algorithms undermines the purposes\nof utilizing encryption to protect data. The application must implement\ncryptographic modules adhering to the higher standards approved by the federal\ngovernment since this provides assurance they have been tested and validated.\n\n    It is the responsibility of the data owner to assess the cryptography\nrequirements in light of applicable federal laws, Executive Orders, directives,\npolicies, regulations, and standards.\n\n    NSA-approved cryptography for classified networks is hardware based. This\nrequirement addresses the compatibility of a DBMS with the encryption devices.",
          "__new": "Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.\n\nIt is the responsibility of the data owner to assess the cryptography requirements in light of applicable federal laws, Executive Orders, directives, policies, regulations, and standards.\n\nNSA-approved cryptography for classified networks is hardware based. This requirement addresses the compatibility of a DBMS with the encryption devices."
        },
        "descs": {
          "default__deleted": "Use of weak or untested encryption algorithms undermines the purposes\nof utilizing encryption to protect data. The application must implement\ncryptographic modules adhering to the higher standards approved by the federal\ngovernment since this provides assurance they have been tested and validated.\n\n    It is the responsibility of the data owner to assess the cryptography\nrequirements in light of applicable federal laws, Executive Orders, directives,\npolicies, regulations, and standards.\n\n    NSA-approved cryptography for classified networks is hardware based. This\nrequirement addresses the compatibility of a DBMS with the encryption devices.",
          "rationale__deleted": "",
          "check": {
            "__old": "Detailed information on the NIST Cryptographic Module Validation Program\n(CMVP) is available at the following website:\nhttp://csrc.nist.gov/groups/STM/cmvp/index.html.\n\n    Review system documentation to determine whether cryptography for\nclassified or sensitive information is required by the information owner.\n\n    If the system documentation does not specify the type of information hosted\non MySQL: classified, sensitive, and/or unclassified, this is a finding.\n\n    If classified or sensitive information does not exist within MySQL Server,\nthis is not a finding.\n\n    Verify that the operating system provides the OpenSSL FIPS Object Module,\nand is configured to require the use of OpenSSL of FIPS compliant algorithms,\navailable at MySQL runtime.\n\n    If the Security Setting for FIPS mode option is \"Disabled\" on the\nserver's OS, this is a finding.\n\n    If cryptography is being used by MySQL, verify that the cryptography is\nNIST FIPS 140-2 certified by running the following SQL query:\n    Determine if MySQL is running in FIPS mode.\n    select @@ssl_fips_mode;\n\n    If ssl_fips_mode is not \"ON\" or \"STRICT\", this is a finding.\n\n    View the versions of TLS, then review the cipher suites in use for the\nversions returned by statement:\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables WHERE VARIABLE_NAME =\n'tls_version';\n\n    If the results include less than version TLS 1.2, for example TLS 1.0 or\n1.1, this is a finding.\n\n    If the results include TLS 1.2 view the supported ciphers on the MySQL\nServer, run\n    select * from performance_schema.global_status where variable_name=\n'Ssl_cipher_list';\n\n    If the results include TLS 1.3 view the supported ciphers on the MySQL\nServer, run\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables WHERE VARIABLE_NAME =\n'tls_ciphersuites';\n\n    If any results list show an uncertified NIST FIPS 140-2 algorithm type,\nthis is a finding.\n\n    Check MySQL certificate PEM file(s) for compliance with DoD requirements by\nrunning this command:\n    openssl x509 -in server-cert.pem -text -noout\n\n    If any PEM file is not in compliance, this is a finding.",
            "__new": "Detailed information on the NIST Cryptographic Module Validation Program (CMVP) is available at the following website: http://csrc.nist.gov/groups/STM/cmvp/index.html.\n\nReview system documentation to determine whether cryptography for classified or sensitive information is required by the information owner.\n\nIf the system documentation does not specify the type of information hosted on MySQL: classified, sensitive, and/or unclassified, this is a finding.\n\nIf classified or sensitive information does not exist within MySQL Server, this is not a finding.\n\nVerify that the operating system provides the OpenSSL FIPS Object Module, and is configured to require the use of OpenSSL of FIPS compliant algorithms, available at MySQL runtime.\n\nIf the Security Setting for FIPS mode option is \"Disabled\" on the server's OS, this is a finding.\n\nIf cryptography is being used by MySQL, verify that the cryptography is NIST FIPS certified by running the following SQL query:\nDetermine if MySQL is running in FIPS mode.\nselect @@ssl_fips_mode;\n\nIf ssl_fips_mode is not \"ON\" or \"STRICT\", this is a finding.\n\nView the versions of TLS, then review the cipher suites in use for the versions returned by statement:\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables WHERE VARIABLE_NAME = 'tls_version';\n\nIf the results include less than version TLS 1.2, for example TLS 1.0 or 1.1, this is a finding. \n\nIf the results include TLS 1.2 view the supported ciphers on the MySQL Server, run\nselect * from performance_schema.global_status where variable_name= 'Ssl_cipher_list';\n\nIf the results include TLS 1.3 view the supported ciphers on the MySQL Server, run\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables WHERE VARIABLE_NAME = 'tls_ciphersuites';\n\nIf any results list show an uncertified NIST FIPS 140-2 algorithm type, this is a finding.\n\nCheck MySQL certificate PEM file(s) for compliance with DoD requirements by running this command: \nopenssl x509 -in server-cert.pem -text -noout\n\nIf any PEM file is not in compliance, this is a finding."
          },
          "fix": {
            "__old": "Configure cryptographic functions to use NSA-approved\ncryptography-compliant algorithms.\n\n    Turn on MySQL FIPS mode.\n    Edit my.cnf\n    [mysqld]\n    ssl_fips_mode=ON\n\n    or\n    [mysqld]\n    ssl_fips_mode=STRICT\n\n    To restrict TLS versions:\n\n     [mysqld]\n     tls_version='TLSv1.2,TLSv1.3'\n\n     Example to define ciphers for TLSv1.2:\n\n     [mysqld]\n\nssl_ciphers='ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-RSA-AES256-GCM-SHA384,DHE-RSA-AES128-GCM-SHA256,DHE-DSS-AES128-GCM-SHA256,DHE-DSS-AES256-GCM-SHA384,DHE-RSA-AES256-GCM-SHA384,ECDHE-ECDSA-CHACHA20-POLY1305,ECDHE-RSA-CHACHA20-POLY1305'\n\n    If TLSv1.3 is enabled, the \"tls_ciphersuites\" setting must contain all or\na subset of following ciphers based on certificates being used by server and\nclient. Enabling FIPS mode will limit the OpenSSL library to operate within the\nFIPS object module.\n\n     Example to define TLS ciphers for TLSv1.3:\n\n     [mysqld]\n\ntls_ciphersuites='TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,TLS_AES_128_CCM_SHA256,TLS_AES_128_CCM_8_SHA256'\n\n    After adding any entries to the my.cnf file, restart mysqld.\n\n    Create and use DoD-approved certificates for asymmetric keys used by the\ndatabase.",
            "__new": "Configure cryptographic functions to use NSA-approved cryptography-compliant algorithms.\n\nTurn on MySQL FIPS mode.\nEdit my.cnf\n[mysqld]\nssl_fips_mode=ON\n\nor\n[mysqld]\nssl_fips_mode=STRICT\n\nTo restrict TLS versions:\n\n[mysqld]\ntls_version='TLSv1.2,TLSv1.3'\n\nExample to define ciphers for TLSv1.2:\n\n[mysqld]\nssl_ciphers='ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:DHE-DSS-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305'\n\nIf TLSv1.3 is enabled, the \"tls_ciphersuites\" setting must contain all or a subset of the following ciphers based on certificates being used by server and client. Enabling FIPS mode will limit the OpenSSL library to operate within the FIPS object module.\n\nExample to define TLS ciphers for TLSv1.3:\n\n[mysqld]\ntls_ciphersuites='TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_CCM_SHA256:TLS_AES_128_CCM_8_SHA256'\n\nAfter adding any entries to the my.cnf file, restart mysqld.\n\nCreate and use DOD-approved certificates for asymmetric keys used by the database."
          }
        }
      },
      "SV-235188": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  query_ssl_params = %(\n  SELECT @@ssl_fips_mode;\n  )\n\n  ssl_params = sql_session.query(query_ssl_params).results\n\n  if !input('aws_rds')\n\n    ssl_fips_mode = ssl_params.column('@@ssl_fips_mode').join\n    describe '@@ssl_fips_mode' do\n      it \"should be 1 or ON. Got #{ssl_fips_mode}\" do\n        expect(ssl_fips_mode).to be_in(['1', 'ON'])\n      end\n    end\n    \n  else\n    \n    impact 0.0\n    describe 'Not applicable since ssl_fips_mode is set to 0 (OFF) and cannot be configured in AWS RDS' do\n      skip 'Not applicable since ssl_fips_mode is set to 0 (OFF) and cannot be configured in AWS RDS'\n    end\n    \n  end    \n    ",
        "tags": {
          "check_id__added": "C-38407r623684_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235188r638812_rule",
            "__new": "SV-235188r961857_rule"
          },
          "fix_id": {
            "__old": "F-38370r623685_fix",
            "__new": "F-38370r863355_fix"
          },
          "nist": [
            [
              "-",
              "SC-13"
            ],
            [
              "+",
              "SC-13 b"
            ]
          ]
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must implement NIST FIPS 140-2 validated\ncryptographic modules to provision digital signatures.",
          "__new": "The MySQL Database Server 8.0 must implement NIST FIPS 140-2 or 140-3 validated cryptographic modules to provision digital signatures."
        },
        "desc": {
          "__old": "Use of weak or untested encryption algorithms undermines the purposes\nof utilizing encryption to protect data. The application must implement\ncryptographic modules adhering to the higher standards approved by the federal\ngovernment since this provides assurance they have been tested and validated.\n\n    For detailed information, refer to NIST FIPS Publication 140-2, Security\nRequirements For Cryptographic Modules.  Note that the product's cryptographic\nmodules must be validated and certified by NIST as FIPS-compliant.",
          "__new": "Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.\n\nFor detailed information, refer to NIST FIPS Publication 140-2 or Publication 140-3, Security Requirements For Cryptographic Modules.  Note that the product's cryptographic modules must be validated and certified by NIST as FIPS-compliant."
        },
        "descs": {
          "default__deleted": "Use of weak or untested encryption algorithms undermines the purposes\nof utilizing encryption to protect data. The application must implement\ncryptographic modules adhering to the higher standards approved by the federal\ngovernment since this provides assurance they have been tested and validated.\n\n    For detailed information, refer to NIST FIPS Publication 140-2, Security\nRequirements For Cryptographic Modules.  Note that the product's cryptographic\nmodules must be validated and certified by NIST as FIPS-compliant.",
          "rationale__deleted": "",
          "check": {
            "__old": "ALL cryptography is provided via OpenSSL and can be verified in FIPS mode.\n\n    Run this command:\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables where variable_name =\n'ssl_fips_mode';\n\n    If the VARIABLE_VALUE does not return \"ON\" or \"STRICT\", this is a\nfinding.\n\n    In general, STRICT imposes more restrictions than ON, but MySQL itself has\nno FIPS-specific code other than to specify to OpenSSL the FIPS mode value. The\nexact behavior of FIPS mode for ON or STRICT depends on the OpenSSL version.",
            "__new": "ALL cryptography is provided via OpenSSL and can be verified in FIPS mode. \n\nRun this command:\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables where variable_name = 'ssl_fips_mode';\n\nIf the VARIABLE_VALUE does not return \"ON\" or \"STRICT\", this is a finding.\n\nIn general, STRICT imposes more restrictions than ON, but MySQL itself has no FIPS-specific code other than to specify to OpenSSL the FIPS mode value. The exact behavior of FIPS mode for ON or STRICT depends on the OpenSSL version."
          },
          "fix": {
            "__old": "Implement NIST FIPS 140-2 validated cryptographic modules to provision\ndigital signatures.\n\n    Turn on MySQL FIPS mode and restart mysqld\n    Edit my.cnf\n    [mysqld]\n    ssl_fips_mode=ON\n\n    or\n    [mysqld]\n    ssl_fips_mode=STRICT\n\n    In general, STRICT imposes more restrictions than ON, but MySQL itself has\nno FIPS-specific code other than to specify to OpenSSL the FIPS mode value. The\nexact behavior of FIPS mode for ON or STRICT depends on the OpenSSL version.",
            "__new": "Implement NIST FIPS validated cryptographic modules to provision digital signatures.\n\nTurn on MySQL FIPS mode and restart mysqld\nEdit my.cnf\n[mysqld]\nssl_fips_mode=ON\n\nor\n[mysqld]\nssl_fips_mode=STRICT\n\nIn general, STRICT imposes more restrictions than ON, but MySQL itself has no FIPS-specific code other than to specify to OpenSSL the FIPS mode value. The exact behavior of FIPS mode for ON or STRICT depends on the OpenSSL version."
          }
        }
      },
      "SV-235189": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  query_ssl_params = %(\n  SELECT @@ssl_fips_mode;\n  )\n\n  ssl_params = sql_session.query(query_ssl_params).results\n\n  if !input('aws_rds')\n\n    ssl_fips_mode = ssl_params.column('@@ssl_fips_mode').join\n    describe '@@ssl_fips_mode' do\n      it \"should be 1 or ON. Got #{ssl_fips_mode}\" do\n        expect(ssl_fips_mode).to be_in(['1', 'ON'])\n      end\n    end\n    \n  else\n    \n    impact 0.0\n    describe 'Not applicable since ssl_fips_mode is set to 0 (OFF) and cannot be configured in AWS RDS' do\n      skip 'Not applicable since ssl_fips_mode is set to 0 (OFF) and cannot be configured in AWS RDS'\n    end\n    \n  end    \n    ",
        "tags": {
          "check_id__added": "C-38408r623687_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235189r638812_rule",
            "__new": "SV-235189r961857_rule"
          },
          "fix_id": {
            "__old": "F-38371r623688_fix",
            "__new": "F-38371r863357_fix"
          },
          "nist": [
            [
              "-",
              "SC-13"
            ],
            [
              "+",
              "SC-13 b"
            ]
          ]
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must implement NIST FIPS 140-2 validated\ncryptographic modules to generate and validate cryptographic hashes.",
          "__new": "The MySQL Database Server 8.0 must implement NIST FIPS 140-2 or 140-3 validated cryptographic modules to generate and validate cryptographic hashes."
        },
        "desc": {
          "__old": "Use of weak or untested encryption algorithms undermines the purposes\nof utilizing encryption to protect data. The application must implement\ncryptographic modules adhering to the higher standards approved by the federal\ngovernment since this provides assurance they have been tested and validated.\n\n    For detailed information, refer to NIST FIPS Publication 140-2, Security\nRequirements For Cryptographic Modules. Note that the product's cryptographic\nmodules must be validated and certified by NIST as FIPS-compliant.",
          "__new": "Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.\n \nFor detailed information, refer to NIST FIPS Publication 140-2 or Publication 140-3, Security Requirements For Cryptographic Modules. Note that the product's cryptographic modules must be validated and certified by NIST as FIPS-compliant."
        },
        "descs": {
          "default__deleted": "Use of weak or untested encryption algorithms undermines the purposes\nof utilizing encryption to protect data. The application must implement\ncryptographic modules adhering to the higher standards approved by the federal\ngovernment since this provides assurance they have been tested and validated.\n\n    For detailed information, refer to NIST FIPS Publication 140-2, Security\nRequirements For Cryptographic Modules. Note that the product's cryptographic\nmodules must be validated and certified by NIST as FIPS-compliant.",
          "rationale__deleted": "",
          "check": {
            "__old": "ALL cryptography is provided via OpenSSL and can be verified in FIPS mode.\n\n    Run this command:\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables where variable_name =\n'ssl_fips_mode';\n\n    If the VARIABLE_VALUE does not return \"ON\" or \"STRICT\", this is a\nfinding.\n\n    In general, STRICT imposes more restrictions than ON, but MySQL itself has\nno FIPS-specific code other than to specify to OpenSSL the FIPS mode value. The\nexact behavior of FIPS mode for ON or STRICT depends on the OpenSSL version.",
            "__new": "ALL cryptography is provided via OpenSSL and can be verified in FIPS mode. \n\nRun this command:\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables where variable_name = 'ssl_fips_mode';\n\nIf the VARIABLE_VALUE does not return \"ON\" or \"STRICT\", this is a finding.\n\nIn general, STRICT imposes more restrictions than ON, but MySQL itself has no FIPS-specific code other than to specify to OpenSSL the FIPS mode value. The exact behavior of FIPS mode for ON or STRICT depends on the OpenSSL version."
          },
          "fix": {
            "__old": "Implement NIST FIPS 140-2 validated cryptographic modules to provision\ndigital signatures.\n\n    Turn on MySQL FIPS mode and restart mysqld\n    Edit my.cnf\n    [mysqld]\n    ssl_fips_mode=ON\n\n    or\n    [mysqld]\n    ssl_fips_mode=STRICT\n\n    In general, STRICT imposes more restrictions than ON, but MySQL itself has\nno FIPS-specific code other than to specify to OpenSSL the FIPS mode value. The\nexact behavior of FIPS mode for ON or STRICT depends on the OpenSSL version.",
            "__new": "Implement NIST FIPS validated cryptographic modules to provision digital signatures.\n\nTurn on MySQL FIPS mode and restart mysqld\nEdit my.cnf\n[mysqld]\nssl_fips_mode=ON\n\nor\n[mysqld]\nssl_fips_mode=STRICT\n\nIn general, STRICT imposes more restrictions than ON, but MySQL itself has no FIPS-specific code other than to specify to OpenSSL the FIPS mode value. The exact behavior of FIPS mode for ON or STRICT depends on the OpenSSL version."
          }
        }
      },
      "SV-235190": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  query_ssl_params = %(\n  SELECT @@ssl_fips_mode;\n  )\n\n  ssl_params = sql_session.query(query_ssl_params).results\n\n  if !input('aws_rds')\n    \n    ssl_fips_mode = ssl_params.column('@@ssl_fips_mode').join\n    describe '@@ssl_fips_mode' do\n      it \"should be 1 or ON. Got #{ssl_fips_mode}\" do\n        expect(ssl_fips_mode).to be_in(['1', 'ON'])\n      end\n    end\n\n  else\n    \n    impact 0.0\n    describe 'Not applicable since ssl_fips_mode is set to 0 (OFF) and cannot be configured in AWS RDS' do\n      skip 'Not applicable since ssl_fips_mode is set to 0 (OFF) and cannot be configured in AWS RDS'\n    end\n    \n  end    \n    ",
        "tags": {
          "check_id__added": "C-38409r623690_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235190r638812_rule",
            "__new": "SV-235190r961857_rule"
          },
          "fix_id": {
            "__old": "F-38372r623691_fix",
            "__new": "F-38372r863359_fix"
          },
          "nist": [
            [
              "-",
              "SC-13"
            ],
            [
              "+",
              "SC-13 b"
            ]
          ]
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must implement NIST FIPS 140-2 validated\ncryptographic modules to protect unclassified information requiring\nconfidentiality and cryptographic protection, in accordance with the data\nowner's requirements.",
          "__new": "The MySQL Database Server 8.0 must implement NIST FIPS 140-2 or 140-3 validated cryptographic modules to protect unclassified information requiring confidentiality and cryptographic protection, in accordance with the data owner's requirements."
        },
        "desc": {
          "__old": "Use of weak or untested encryption algorithms undermines the purposes\nof utilizing encryption to protect data. The application must implement\ncryptographic modules adhering to the higher standards approved by the federal\ngovernment since this provides assurance they have been tested and validated.\n\n    It is the responsibility of the data owner to assess the cryptography\nrequirements in light of applicable federal laws, Executive Orders, directives,\npolicies, regulations, and standards.\n\n    For detailed information, refer to NIST FIPS Publication 140-2, Security\nRequirements For Cryptographic Modules. Note that the product's cryptographic\nmodules must be validated and certified by NIST as FIPS-compliant.",
          "__new": "Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.\n\nIt is the responsibility of the data owner to assess the cryptography requirements in light of applicable federal laws, Executive Orders, directives, policies, regulations, and standards.\n\nFor detailed information, refer to NIST FIPS Publication 140-2 or Publication 140-3, Security Requirements For Cryptographic Modules. Note that the product's cryptographic modules must be validated and certified by NIST as FIPS-compliant."
        },
        "descs": {
          "default__deleted": "Use of weak or untested encryption algorithms undermines the purposes\nof utilizing encryption to protect data. The application must implement\ncryptographic modules adhering to the higher standards approved by the federal\ngovernment since this provides assurance they have been tested and validated.\n\n    It is the responsibility of the data owner to assess the cryptography\nrequirements in light of applicable federal laws, Executive Orders, directives,\npolicies, regulations, and standards.\n\n    For detailed information, refer to NIST FIPS Publication 140-2, Security\nRequirements For Cryptographic Modules. Note that the product's cryptographic\nmodules must be validated and certified by NIST as FIPS-compliant.",
          "rationale__deleted": "",
          "check": {
            "__old": "ALL cryptography is provided via OpenSSL and can be verified in FIPS mode.\n\n    Run this command:\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables where variable_name =\n'ssl_fips_mode';\n\n    If the VARIABLE_VALUE does not return \"ON\" or \"STRICT\", this is a\nfinding.\n\n    In general, STRICT imposes more restrictions than ON, but MySQL itself has\nno FIPS-specific code other than to specify to OpenSSL the FIPS mode value. The\nexact behavior of FIPS mode for ON or STRICT depends on the OpenSSL version.",
            "__new": "ALL cryptography is provided via OpenSSL and can be verified in FIPS mode. \n\nRun this command:\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables where variable_name = 'ssl_fips_mode';\n\nIf the VARIABLE_VALUE does not return \"ON\" or \"STRICT\", this is a finding.\n\nIn general, STRICT imposes more restrictions than ON, but MySQL itself has no FIPS-specific code other than to specify to OpenSSL the FIPS mode value. The exact behavior of FIPS mode for ON or STRICT depends on the OpenSSL version."
          },
          "fix": {
            "__old": "Implement NIST FIPS 140-2 validated cryptographic modules to provision\ndigital signatures.\n\n    Turn on MySQL FIPS mode and restart mysqld\n    Edit my.cnf\n    [mysqld]\n    ssl_fips_mode=ON\n\n    or\n    [mysqld]\n    ssl_fips_mode=STRICT\n\n    In general, STRICT imposes more restrictions than ON, but MySQL itself has\nno FIPS-specific code other than to specify to OpenSSL the FIPS mode value. The\nexact behavior of FIPS mode for ON or STRICT depends on the OpenSSL version.",
            "__new": "Implement NIST FIPS validated cryptographic modules to provision digital signatures.\n\nTurn on MySQL FIPS mode and restart mysqld\nEdit my.cnf\n[mysqld]\nssl_fips_mode=ON\n\nor\n[mysqld]\nssl_fips_mode=STRICT\n\nIn general, STRICT imposes more restrictions than ON, but MySQL itself has no FIPS-specific code other than to specify to OpenSSL the FIPS mode value. The exact behavior of FIPS mode for ON or STRICT depends on the OpenSSL version."
          }
        }
      },
      "SV-235191": {
        "describe__deleted": "  if !input('aws_rds')\n\n    sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n    org_approved_cert_issuer = input('org_approved_cert_issuer')\n\n    query_ssl_params = %(\n    SELECT @@datadir,\n          @@ssl_cert;\n    )\n\n    ssl_params = sql_session.query(query_ssl_params).results\n\n    full_cert_path = \"#{ssl_params.column('@@datadir').join}#{ssl_params.column('@@ssl_cert').join}\"\n    describe \"SSL Certificate file: #{full_cert_path}\" do\n      subject { file(full_cert_path) }\n      it { should exist }\n    end\n\n    describe x509_certificate(full_cert_path) do\n      its('issuer.CN') { should match org_approved_cert_issuer }\n    end\n\n  else\n    impact 0.0\n    describe 'Not applicable since these requirements are handled within AWS RDS' do\n      skip 'Not applicable since these requirements are handled within AWS RDS'\n    end\n  end",
        "tags": {
          "check_id__added": "C-38410r623693_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235191r638812_rule",
            "__new": "SV-235191r961596_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must only accept end entity certificates\nissued by DoD PKI or DoD-approved PKI Certification Authorities (CAs) for the\nestablishment of all encrypted sessions.",
          "__new": "The MySQL Database Server 8.0 must only accept end entity certificates issued by DoD PKI or DoD-approved PKI Certification Authorities (CAs) for the establishment of all encrypted sessions."
        },
        "desc": {
          "__old": "Only DoD-approved external PKIs have been evaluated to ensure they\nhave security controls and identity vetting procedures in place that are\nsufficient for DoD systems to rely on the identity asserted in the certificate.\nPKIs lacking sufficient security controls and identity vetting procedures risk\nbeing compromised and issuing certificates that enable adversaries to\nimpersonate legitimate users.\n\n    The authoritative list of DoD-approved PKIs is published at\nhttps://cyber.mil/pki-pke/interoperability.\n\n    This requirement focuses on communications protection for the DBMS session\nrather than for the network packet.",
          "__new": "Only DoD-approved external PKIs have been evaluated to ensure they have security controls and identity vetting procedures in place that are sufficient for DoD systems to rely on the identity asserted in the certificate. PKIs lacking sufficient security controls and identity vetting procedures risk being compromised and issuing certificates that enable adversaries to impersonate legitimate users. \n\nThe authoritative list of DoD-approved PKIs is published at https://cyber.mil/pki-pke/interoperability.\n\nThis requirement focuses on communications protection for the DBMS session rather than for the network packet."
        },
        "descs": {
          "default__deleted": "Only DoD-approved external PKIs have been evaluated to ensure they\nhave security controls and identity vetting procedures in place that are\nsufficient for DoD systems to rely on the identity asserted in the certificate.\nPKIs lacking sufficient security controls and identity vetting procedures risk\nbeing compromised and issuing certificates that enable adversaries to\nimpersonate legitimate users.\n\n    The authoritative list of DoD-approved PKIs is published at\nhttps://cyber.mil/pki-pke/interoperability.\n\n    This requirement focuses on communications protection for the DBMS session\nrather than for the network packet.",
          "rationale__deleted": "",
          "check": {
            "__old": "To run MySQL in SSL mode, obtain a valid certificate signed by a single\ncertificate authority.\n\n    Before starting the MySQL database in SSL mode, verify the certificate used\nis issued by a valid DoD certificate authority.\n\n    Run this command:\n    openssl x509 -in <path_to_certificate_pem_file> -text | grep -i \"issuer\"\n\n    If there is any issuer present in the certificate that is not a\nDoD-approved certificate authority, this is a finding.",
            "__new": "To run MySQL in SSL mode, obtain a valid certificate signed by a single certificate authority. \n\nBefore starting the MySQL database in SSL mode, verify the certificate used is issued by a valid DoD certificate authority.\n\nRun this command:\nopenssl x509 -in <path_to_certificate_pem_file> -text | grep -i \"issuer\"\n\nIf there is any issuer present in the certificate that is not a DoD-approved certificate authority, this is a finding."
          },
          "fix": {
            "__old": "Remove any certificate that was not issued by a valid DoD certificate\nauthority.\n\n    Contact the organization's certificate issuer and request a new certificate\nthat is issued by a valid DoD certificate authorities.",
            "__new": "Remove any certificate that was not issued by a valid DoD certificate authority.\n\nContact the organization's certificate issuer and request a new certificate that is issued by a valid DoD certificate authorities."
          }
        }
      },
      "SV-235192": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n\n    query_encryption_params = %(\n    SELECT\n       VARIABLE_NAME,\n       VARIABLE_VALUE \n    FROM\n       performance_schema.global_variables \n    WHERE\n       VARIABLE_NAME like '%encrypt%';\n    )\n\n    encryption_params = sql_session.query(query_encryption_params).results.rows.map{|x| {x['variable_name']=> x['variable_value']}}.reduce({}, :merge)\n\n    describe \"Encryption Param:\" do\n      subject { encryption_params }\n      its(['audit_log_encryption']) { should cmp 'AES' }\n      its(['binlog_encryption']) { should cmp 'ON' }\n      its(['innodb_redo_log_encrypt']) { should cmp 'ON' }\n      its(['innodb_undo_log_encrypt']) { should cmp 'ON' }\n      its(['table_encryption_privilege_check']) { should cmp 'ON' }\n    end\n\n    query_general_log = %(\n    SELECT\n       VARIABLE_NAME,\n       VARIABLE_VALUE \n    FROM\n       performance_schema.global_variables \n    WHERE\n       VARIABLE_NAME like 'general_log';\n    )\n\n    describe \"general_log config\" do\n      subject { sql_session.query(query_general_log).results.column('variable_value').join }\n      it { should cmp 'OFF' }\n    end\n\n    query_tablespaces = %(\n    SELECT\n       INNODB_TABLESPACES.NAME,\n       INNODB_TABLESPACES.ENCRYPTION \n    FROM\n       information_schema.INNODB_TABLESPACES;\n    )\n\n    tablespaces = sql_session.query(query_tablespaces).results.rows\n\n    tablespaces.each do |tablespace|\n        describe \"Tablespace #{tablespace['name']} encryption\" do\n          subject { tablespace }\n          its(['encryption']) { should cmp 'Y' }\n        end\n    end\n\n  else\n    \n    impact 0.0\n    describe 'Not applicable since these features are not available in AWS RDS' do\n      skip 'Not applicable since these features are not available in AWS RDS'\n    end  \n    \n  end\n",
        "tags": {
          "check_id__added": "C-38411r623696_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235192r638812_rule",
            "__new": "SV-235192r961599_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must implement cryptographic mechanisms\nto prevent unauthorized modification of organization-defined information at\nrest (to include, at a minimum, PII and classified information) on\norganization-defined information system components.",
          "__new": "The MySQL Database Server 8.0 must implement cryptographic mechanisms to prevent unauthorized modification of organization-defined information at rest (to include, at a minimum, PII and classified information) on organization-defined information system components."
        },
        "desc": {
          "__old": "Database Management Systems (DBMSs) handling data requiring \"data at\nrest\" protections must employ cryptographic mechanisms to prevent unauthorized\ndisclosure and modification of the information at rest. These cryptographic\nmechanisms may be native to the DBMS or implemented via additional software or\noperating system/file system settings, as appropriate to the situation.\n\n    Selection of a cryptographic mechanism is based on the need to protect the\nintegrity of organizational information. The strength of the mechanism is\ncommensurate with the security category and/or classification of the\ninformation. Organizations have the flexibility to either encrypt all\ninformation on storage devices (i.e., full disk encryption) or encrypt specific\ndata structures (e.g., files, records, or fields).\n\n    The decision whether and what to encrypt rests with the data owner and is\nalso influenced by the physical measures taken to secure the equipment and\nmedia on which the information resides.",
          "__new": "Database Management Systems (DBMSs) handling data requiring \"data at rest\" protections must employ cryptographic mechanisms to prevent unauthorized disclosure and modification of the information at rest. These cryptographic mechanisms may be native to the DBMS or implemented via additional software or operating system/file system settings, as appropriate to the situation.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. The strength of the mechanism is commensurate with the security category and/or classification of the information. Organizations have the flexibility to either encrypt all information on storage devices (i.e., full disk encryption) or encrypt specific data structures (e.g., files, records, or fields).  \n\nThe decision whether and what to encrypt rests with the data owner and is also influenced by the physical measures taken to secure the equipment and media on which the information resides."
        },
        "descs": {
          "default__deleted": "Database Management Systems (DBMSs) handling data requiring \"data at\nrest\" protections must employ cryptographic mechanisms to prevent unauthorized\ndisclosure and modification of the information at rest. These cryptographic\nmechanisms may be native to the DBMS or implemented via additional software or\noperating system/file system settings, as appropriate to the situation.\n\n    Selection of a cryptographic mechanism is based on the need to protect the\nintegrity of organizational information. The strength of the mechanism is\ncommensurate with the security category and/or classification of the\ninformation. Organizations have the flexibility to either encrypt all\ninformation on storage devices (i.e., full disk encryption) or encrypt specific\ndata structures (e.g., files, records, or fields).\n\n    The decision whether and what to encrypt rests with the data owner and is\nalso influenced by the physical measures taken to secure the equipment and\nmedia on which the information resides.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the system documentation to determine whether the organization has\ndefined the information at rest that is to be protected from modification,\nwhich must include, at a minimum, PII and classified information.\n\n    If no information is identified as requiring such protection, this is not a\nfinding.\n\n    Review the configuration of the MySQL 8.0 Database Server, operating\nsystem/file system, and additional software as relevant.\n\n    If any of the information defined as requiring cryptographic protection\nfrom modification is not encrypted in a manner that provides the required level\nof protection, this is a finding.\n\n    To check for data encryption at rest settings in MySQL:\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables where variable_name =\n'audit_log_encryption';\n    If the value for audit_log_encryption is not AES, this is a finding.\n\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables where variable_name =\n'binlog_encryption';\n    If the value for binlog_encryption is not \"ON\", this is a finding.\n\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables where variable_name =\n'innodb_redo_log_encrypt';\n    If the value for binlog_innodb_redo_log_encrypt is not \"ON\", this is a\nfinding.\n\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables where variable_name =\n'innodb_undo_log_encrypt';\n    If the value for innodb_undo_log_encrypt is not \"ON\", this is a finding.\n\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables where variable_name =\n'table_encryption_privilege_check';\n    If the value for table_encryption_privilege_check is not \"ON\", this is a\nfinding.\n\n    SELECT\n        `INNODB_TABLESPACES`.`NAME`,\n        `INNODB_TABLESPACES`.`ENCRYPTION`\n    FROM `information_schema`.`INNODB_TABLESPACES`;\n    If tables or tablespaces are not encrypted and the value is not \"Y\", this\nis a finding.",
            "__new": "Review the system documentation to determine whether the organization has defined the information at rest that is to be protected from modification, which must include, at a minimum, PII and classified information.\n\nIf no information is identified as requiring such protection, this is not a finding.\n\nReview the configuration of the MySQL 8.0 Database Server, operating system/file system, and additional software as relevant.\n\nIf any of the information defined as requiring cryptographic protection from modification is not encrypted in a manner that provides the required level of protection, this is a finding.\n\nTo check for data encryption at rest settings in MySQL:\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables where variable_name = 'audit_log_encryption';\nIf the value for audit_log_encryption is not AES, this is a finding.\n\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables where variable_name = 'binlog_encryption'; \nIf the value for binlog_encryption is not \"ON\", this is a finding.\n\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables where variable_name = 'innodb_redo_log_encrypt';\nIf the value for binlog_innodb_redo_log_encrypt is not \"ON\", this is a finding.\n\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables where variable_name = 'innodb_undo_log_encrypt';\nIf the value for innodb_undo_log_encrypt is not \"ON\", this is a finding.\n\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables where variable_name = 'table_encryption_privilege_check';\nIf the value for table_encryption_privilege_check is not \"ON\", this is a finding.\n\nSELECT\n    `INNODB_TABLESPACES`.`NAME`,\n    `INNODB_TABLESPACES`.`ENCRYPTION`\nFROM `information_schema`.`INNODB_TABLESPACES`;\nIf tables or tablespaces are not encrypted and the value is not \"Y\", this is a finding."
          },
          "fix": {
            "__old": "Configure the MySQL Database Server 8.0, operating system/file system, and\nadditional software as relevant, to provide the required level of cryptographic\nprotection.\n\n    Enable the MySQL Key Ring for securely managing encryption keys with KMIP\nor other supported protocols.\n\n    Change TABLESPACES, TABLES to put in place encryption.\n\n    ALTER TABLESPACE <tablespacename> ENCRYPTION = 'Y';\n    ALTER TABLE <tablespacename> ENCRYPTION = 'Y';\n\n    Require all new tables and tablespaces to be encrypted.\n    set persist table_encryption_privilege_check=ON;\n\n    Require AUDIT LOG encryption\n    sudo vi /etc/my.cnf\n    [mysqld]\n    audit-log=FORCE_PLUS_PERMANENT\n    audit-log-format=JSON\n    audit-log-encryption=AES\n\n    Require BINLOG encryption\n    set persist binlog_encryption=ON;\n\n    Require REDO and UNDO log encryption\n    set persist innodb_redo_log_encrypt=ON;\n    set persist innodb_undo_log_encrypt=ON;\n\n    Turn off insecure logging (use the audit log above to track activity).\n    SET PERSIST general_log = 'OFF';",
            "__new": "Configure the MySQL Database Server 8.0, operating system/file system, and additional software as relevant, to provide the required level of cryptographic protection.\n\nEnable the MySQL Key Ring for securely managing encryption keys with KMIP or other supported protocols.\n\nChange TABLESPACES, TABLES to put in place encryption.\n\nALTER TABLESPACE <tablespacename> ENCRYPTION = 'Y';\nALTER TABLE <tablespacename> ENCRYPTION = 'Y';\n\nRequire all new tables and tablespaces to be encrypted.\nset persist table_encryption_privilege_check=ON;\n\nRequire AUDIT LOG encryption\nsudo vi /etc/my.cnf\n[mysqld]\naudit-log=FORCE_PLUS_PERMANENT\naudit-log-format=JSON\naudit-log-encryption=AES\n\nRequire BINLOG encryption\nset persist binlog_encryption=ON;\n\nRequire REDO and UNDO log encryption\nset persist innodb_redo_log_encrypt=ON;\nset persist innodb_undo_log_encrypt=ON;\n\nTurn off insecure logging (use the audit log above to track activity).\nSET PERSIST general_log = 'OFF';"
          }
        }
      },
      "SV-235193": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  if !input('aws_rds')\n\n    query_encryption_params = %(\n    SELECT\n       VARIABLE_NAME,\n       VARIABLE_VALUE \n    FROM\n       performance_schema.global_variables \n    WHERE\n       VARIABLE_NAME like '%encrypt%';\n    )\n\n    encryption_params = sql_session.query(query_encryption_params).results.rows.map{|x| {x['variable_name']=> x['variable_value']}}.reduce({}, :merge)\n\n    describe \"Encryption Param:\" do\n      subject { encryption_params }\n      its(['audit_log_encryption']) { should cmp 'AES' }\n      its(['binlog_encryption']) { should cmp 'ON' }\n      its(['innodb_redo_log_encrypt']) { should cmp 'ON' }\n      its(['innodb_undo_log_encrypt']) { should cmp 'ON' }\n      its(['table_encryption_privilege_check']) { should cmp 'ON' }\n    end\n\n    query_general_log = %(\n    SELECT\n       VARIABLE_NAME,\n       VARIABLE_VALUE \n    FROM\n       performance_schema.global_variables \n    WHERE\n       VARIABLE_NAME like 'general_log';\n    )\n\n    describe \"general_log config\" do\n      subject { sql_session.query(query_general_log).results.column('variable_value').join }\n      it { should cmp 'OFF' }\n    end\n\n    query_tablespaces = %(\n    SELECT\n       INNODB_TABLESPACES.NAME,\n       INNODB_TABLESPACES.ENCRYPTION \n    FROM\n       information_schema.INNODB_TABLESPACES;\n    )\n\n    tablespaces = sql_session.query(query_tablespaces).results.rows\n\n    tablespaces.each do |tablespace|\n        describe \"Tablespace #{tablespace['name']} encryption\" do\n          subject { tablespace }\n          its(['encryption']) { should cmp 'Y' }\n        end\n    end\n\n  else\n    \n    impact 0.0\n    describe 'Not applicable since these features are not available in AWS RDS' do\n      skip 'Not applicable since these features are not available in AWS RDS'\n    end  \n    \n  end\n",
        "tags": {
          "check_id__added": "C-38412r623699_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235193r638812_rule",
            "__new": "SV-235193r961602_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "The MySQL Database Server 8.0 must implement cryptographic mechanisms\npreventing the unauthorized disclosure of organization-defined information at\nrest on organization-defined information system components.",
          "__new": "The MySQL Database Server 8.0 must implement cryptographic mechanisms preventing the unauthorized disclosure of organization-defined information at rest on organization-defined information system components."
        },
        "desc": {
          "__old": "Database Management Systems (DBMSs) handling data requiring\ndata-at-rest protections must employ cryptographic mechanisms to prevent\nunauthorized disclosure and modification of the information at rest. These\ncryptographic mechanisms may be native to the DBMS or implemented via\nadditional software or operating system/file system settings, as appropriate to\nthe situation.\n\n    Selection of a cryptographic mechanism is based on the need to protect the\nintegrity of organizational information. The strength of the mechanism is\ncommensurate with the security category and/or classification of the\ninformation. Organizations have the flexibility to either encrypt all\ninformation on storage devices (i.e., full disk encryption) or encrypt specific\ndata structures (e.g., files, records, or fields).\n\n    The decision whether and what to encrypt rests with the data owner and is\nalso influenced by the physical measures taken to secure the equipment and\nmedia on which the information resides.",
          "__new": "Database Management Systems (DBMSs) handling data requiring data-at-rest protections must employ cryptographic mechanisms to prevent unauthorized disclosure and modification of the information at rest. These cryptographic mechanisms may be native to the DBMS or implemented via additional software or operating system/file system settings, as appropriate to the situation.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. The strength of the mechanism is commensurate with the security category and/or classification of the information. Organizations have the flexibility to either encrypt all information on storage devices (i.e., full disk encryption) or encrypt specific data structures (e.g., files, records, or fields). \n\nThe decision whether and what to encrypt rests with the data owner and is also influenced by the physical measures taken to secure the equipment and media on which the information resides."
        },
        "descs": {
          "default__deleted": "Database Management Systems (DBMSs) handling data requiring\ndata-at-rest protections must employ cryptographic mechanisms to prevent\nunauthorized disclosure and modification of the information at rest. These\ncryptographic mechanisms may be native to the DBMS or implemented via\nadditional software or operating system/file system settings, as appropriate to\nthe situation.\n\n    Selection of a cryptographic mechanism is based on the need to protect the\nintegrity of organizational information. The strength of the mechanism is\ncommensurate with the security category and/or classification of the\ninformation. Organizations have the flexibility to either encrypt all\ninformation on storage devices (i.e., full disk encryption) or encrypt specific\ndata structures (e.g., files, records, or fields).\n\n    The decision whether and what to encrypt rests with the data owner and is\nalso influenced by the physical measures taken to secure the equipment and\nmedia on which the information resides.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the system documentation to determine whether the organization has\ndefined the information at rest that is to be protected from modification,\nwhich must include, at a minimum, PII and classified information.\n\n    If no information is identified as requiring such protection, this is not a\nfinding.\n\n    Review the configuration of the MySQL 8.0 Database Server, operating\nsystem/file system, and additional software as relevant.\n\n    If any of the information defined as requiring cryptographic protection\nfrom modification is not encrypted in a manner that provides the required level\nof protection, this is a finding.\n\n    To check for data encryption at rest settings in MySQL:\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables where variable_name =\n'audit_log_encryption';\n    If the value for audit_log_encryption is not \"AES\", this is a finding.\n\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables where variable_name =\n'binlog_encryption';\n    If the value for binlog_encryption is not \"ON\", this is a finding.\n\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables where variable_name =\n'innodb_redo_log_encrypt';\n    If the value for binlog_innodb_redo_log_encrypt is not \"ON\", this is a\nfinding.\n\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables where variable_name =\n'innodb_undo_log_encrypt';\n    If the value for innodb_undo_log_encrypt is not \"ON\", this is a finding.\n\n    SELECT VARIABLE_NAME, VARIABLE_VALUE\n    FROM performance_schema.global_variables where variable_name =\n'table_encryption_privilege_check';\n    If the value for table_encryption_privilege_check is not \"ON\", this is a\nfinding.\n\n    SELECT\n        `INNODB_TABLESPACES`.`NAME`,\n        `INNODB_TABLESPACES`.`ENCRYPTION`\n    FROM `information_schema`.`INNODB_TABLESPACES`;\n    If tables or tablespaces are not encrypted and the value is not \"Y\", this\nis a finding.",
            "__new": "Review the system documentation to determine whether the organization has defined the information at rest that is to be protected from modification, which must include, at a minimum, PII and classified information.\n\nIf no information is identified as requiring such protection, this is not a finding.\n\nReview the configuration of the MySQL 8.0 Database Server, operating system/file system, and additional software as relevant.\n\nIf any of the information defined as requiring cryptographic protection from modification is not encrypted in a manner that provides the required level of protection, this is a finding.\n\nTo check for data encryption at rest settings in MySQL:\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables where variable_name = 'audit_log_encryption';\nIf the value for audit_log_encryption is not \"AES\", this is a finding.\n\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables where variable_name = 'binlog_encryption'; \nIf the value for binlog_encryption is not \"ON\", this is a finding.\n\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables where variable_name = 'innodb_redo_log_encrypt';\nIf the value for binlog_innodb_redo_log_encrypt is not \"ON\", this is a finding.\n\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables where variable_name = 'innodb_undo_log_encrypt';\nIf the value for innodb_undo_log_encrypt is not \"ON\", this is a finding.\n\nSELECT VARIABLE_NAME, VARIABLE_VALUE\nFROM performance_schema.global_variables where variable_name = 'table_encryption_privilege_check';\nIf the value for table_encryption_privilege_check is not \"ON\", this is a finding.\n\nSELECT\n    `INNODB_TABLESPACES`.`NAME`,\n    `INNODB_TABLESPACES`.`ENCRYPTION`\nFROM `information_schema`.`INNODB_TABLESPACES`;\nIf tables or tablespaces are not encrypted and the value is not \"Y\", this is a finding."
          },
          "fix": {
            "__old": "Configure the MySQL Database Server 8.0, operating system/file system, and\nadditional software as relevant, to provide the required level of cryptographic\nprotection.\n\n    Enable the MySQL Key Ring for securely managing encryption keys with KMIP\nor other supported protocols.\n\n    Change TABLESPACES, TABLES to put in place encryption.\n\n    ALTER TABLESPACE <tablespacename> ENCRYPTION = 'Y';\n    ALTER TABLE <tablespacename> ENCRYPTION = 'Y';\n\n    Require all new tables and tablespaces to be encrypted.\n    set persist table_encryption_privilege_check=ON;\n\n    Require AUDIT LOG encryption\n    sudo vi /etc/my.cnf\n    [mysqld]\n    audit-log=FORCE_PLUS_PERMANENT\n    audit-log-format=JSON\n    audit-log-encryption=AES\n\n    Require BINLOG encryption\n    set persist binlog_encryption=ON;\n\n    Require REDO and UNDO log encryption\n    set persist innodb_redo_log_encrypt=ON;\n    set persist innodb_undo_log_encrypt=ON;\n\n    Turn off insecure logging - (use the audit log above to track activity)\n    SET PERSIST general_log = 'OFF';",
            "__new": "Configure the MySQL Database Server 8.0, operating system/file system, and additional software as relevant, to provide the required level of cryptographic protection.\n\nEnable the MySQL Key Ring for securely managing encryption keys with KMIP or other supported protocols.\n\nChange TABLESPACES, TABLES to put in place encryption.\n\nALTER TABLESPACE <tablespacename> ENCRYPTION = 'Y';\nALTER TABLE <tablespacename> ENCRYPTION = 'Y';\n\nRequire all new tables and tablespaces to be encrypted.\nset persist table_encryption_privilege_check=ON;\n\nRequire AUDIT LOG encryption\nsudo vi /etc/my.cnf\n[mysqld]\naudit-log=FORCE_PLUS_PERMANENT\naudit-log-format=JSON\naudit-log-encryption=AES\n\nRequire BINLOG encryption\nset persist binlog_encryption=ON;\n\nRequire REDO and UNDO log encryption\nset persist innodb_redo_log_encrypt=ON;\nset persist innodb_undo_log_encrypt=ON;\n\nTurn off insecure logging - (use the audit log above to track activity)\nSET PERSIST general_log = 'OFF';"
          }
        }
      },
      "SV-235194": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  minimum_mysql_version = input('minimum_mysql_version')\n  \n  query_version = %(\n  SELECT @@version;\n  )\n\n  version = sql_session.query(query_version).results\n\n  describe '@@version' do\n    subject { version.column('@@version').join }\n    it { should cmp >= minimum_mysql_version }\n  end",
        "tags": {
          "check_id__added": "C-38413r623702_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235194r638812_rule",
            "__new": "SV-235194r961683_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "Security-relevant software updates to the MySQL Database Server 8.0\nmust be installed within the time period directed by an authoritative source\t\n(e.g., IAVM, CTOs, DTMs, and STIGs).",
          "__new": "Security-relevant software updates to the MySQL Database Server 8.0 must be installed within the time period directed by an authoritative source (e.g., IAVM, CTOs, DTMs, and STIGs)."
        },
        "desc": {
          "__old": "Security flaws with software applications, including database\nmanagement systems, are discovered daily. Vendors are constantly updating and\npatching their products to address newly discovered security vulnerabilities.\nOrganizations (including any contractor to the organization) are required to\npromptly install security-relevant software updates (e.g., patches, service\npacks, and hot fixes). Flaws discovered during security assessments, continuous\nmonitoring, incident response activities, or information system error handling\nmust also be addressed expeditiously.\n\n    Organization-defined time periods for updating security-relevant software\nmay vary based on a variety of factors including, for example, the security\ncategory of the information system or the criticality of the update (i.e.,\nseverity of the vulnerability related to the discovered flaw).\n\n    This requirement will apply to software patch management solutions that are\nused to install patches across the enclave and also to applications themselves\nthat are not part of that patch management solution. For example, many browsers\ntoday provide the capability to install their own patch software. Patch\ncriticality, as well as system criticality, will vary. Therefore, the tactical\nsituations regarding the patch management process will also vary. This means\nthat the time period utilized must be a configurable parameter. Time frames for\t\napplication of security-relevant software updates may be dependent upon the\t\nInformation Assurance Vulnerability Management (IAVM) process.\n\n    The application will be configured to check for and install\t\nsecurity-relevant software updates within an identified time period from the\t\navailability of the update. The specific time period will be defined by an\t\nauthoritative source (e.g., IAVM, CTOs, DTMs, and STIGs).",
          "__new": "Security flaws with software applications, including database management systems, are discovered daily. Vendors are constantly updating and patching their products to address newly discovered security vulnerabilities. Organizations (including any contractor to the organization) are required to promptly install security-relevant software updates (e.g., patches, service packs, and hot fixes). Flaws discovered during security assessments, continuous monitoring, incident response activities, or information system error handling must also be addressed expeditiously. \n\nOrganization-defined time periods for updating security-relevant software may vary based on a variety of factors including, for example, the security category of the information system or the criticality of the update (i.e., severity of the vulnerability related to the discovered flaw). \n\nThis requirement will apply to software patch management solutions that are used to install patches across the enclave and also to applications themselves that are not part of that patch management solution. For example, many browsers today provide the capability to install their own patch software. Patch criticality, as well as system criticality, will vary. Therefore, the tactical situations regarding the patch management process will also vary. This means that the time period utilized must be a configurable parameter. Time frames for application of security-relevant software updates may be dependent upon the Information Assurance Vulnerability Management (IAVM) process.\n\nThe application will be configured to check for and install security-relevant software updates within an identified time period from the availability of the update. The specific time period will be defined by an authoritative source (e.g., IAVM, CTOs, DTMs, and STIGs)."
        },
        "descs": {
          "default__deleted": "Security flaws with software applications, including database\nmanagement systems, are discovered daily. Vendors are constantly updating and\npatching their products to address newly discovered security vulnerabilities.\nOrganizations (including any contractor to the organization) are required to\npromptly install security-relevant software updates (e.g., patches, service\npacks, and hot fixes). Flaws discovered during security assessments, continuous\nmonitoring, incident response activities, or information system error handling\nmust also be addressed expeditiously.\n\n    Organization-defined time periods for updating security-relevant software\nmay vary based on a variety of factors including, for example, the security\ncategory of the information system or the criticality of the update (i.e.,\nseverity of the vulnerability related to the discovered flaw).\n\n    This requirement will apply to software patch management solutions that are\nused to install patches across the enclave and also to applications themselves\nthat are not part of that patch management solution. For example, many browsers\ntoday provide the capability to install their own patch software. Patch\ncriticality, as well as system criticality, will vary. Therefore, the tactical\nsituations regarding the patch management process will also vary. This means\nthat the time period utilized must be a configurable parameter. Time frames for\t\napplication of security-relevant software updates may be dependent upon the\t\nInformation Assurance Vulnerability Management (IAVM) process.\n\n    The application will be configured to check for and install\t\nsecurity-relevant software updates within an identified time period from the\t\navailability of the update. The specific time period will be defined by an\t\nauthoritative source (e.g., IAVM, CTOs, DTMs, and STIGs).",
          "rationale__deleted": "",
          "check": {
            "__old": "To check the version of the installed MySQL, run the following SQL\nstatement:\n\n    select @@version;\n\n    The result will show the version, for example:\n    8.0.22-commercial\n\n    Obtain evidence that software MRU updates are consistently applied to MySQL\nServer within the time frame defined for each update. To be considered\nsupported, Oracle must report that the version is supported by security patches\nto known vulnerability.\n\n    Review the MySQL Support dates at the following link:\n    https://www.oracle.com/support/lifetime-support/resources.html\n\n    Review the MySQL Release notes page:\n    https://dev.mysql.com/doc/relnotes/mysql/8.0/en/\n\n    If MySQL Enterprise Edition 8.0 is not at the latest version, this is a\nfinding.",
            "__new": "To check the version of the installed MySQL, run the following SQL statement:\n\nselect @@version;\n\nThe result will show the version, for example:\n8.0.22-commercial\n\nObtain evidence that software MRU updates are consistently applied to MySQL Server within the time frame defined for each update. To be considered supported, Oracle must report that the version is supported by security patches to known vulnerability.  \n\nReview the MySQL Support dates at the following link:\nhttps://www.oracle.com/support/lifetime-support/resources.html\n\nReview the MySQL Release notes page:\nhttps://dev.mysql.com/doc/relnotes/mysql/8.0/en/\n \nIf MySQL Enterprise Edition 8.0 is not at the latest version, this is a finding."
          },
          "fix": {
            "__old": "Institute and adhere to policies and procedures to ensure that\npatches are consistently applied to MySQL within the time allowed.",
            "__new": "Institute and adhere to policies and procedures to ensure that patches are consistently applied to MySQL within the time allowed."
          }
        }
      },
      "SV-235195": {
        "describe__deleted": "  sql_session = mysql_session(input('user'), input('password'), input('host'), input('port'))\n\n  query_constraints = %(\n  SELECT\n     * \n  FROM\n     INFORMATION_SCHEMA.TABLE_CONSTRAINTS;\n  )\n\n  constraints = sql_session.query(query_constraints).output\n\n  describe \"Manually review organizationally defined constraints that have been put in place.\\n#{constraints}\" do\n    skip \"Manually review organizationally defined constraints that have been put in place.\\n#{constraints}\"\n  end",
        "tags": {
          "check_id__added": "C-38414r623705_chk",
          "documentable__added": false,
          "rid": {
            "__old": "SV-235195r638812_rule",
            "__new": "SV-235195r961656_rule"
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target Oracle MySQL 8.0"
          ]
        ],
        "title": {
          "__old": "When invalid inputs are received, the MySQL Database Server 8.0 must\nbehave in a predictable and documented manner that reflects organizational and\nsystem objectives.",
          "__new": "When invalid inputs are received, the MySQL Database Server 8.0 must behave in a predictable and documented manner that reflects organizational and system objectives."
        },
        "desc": {
          "__old": "A common vulnerability is unplanned behavior when invalid inputs are\nreceived. This requirement guards against adverse or unintended system behavior\ncaused by invalid inputs, where information system responses to the invalid\ninput may be disruptive or cause the system to fail into an unsafe state.\n\n    The behavior will be derived from the organizational and system\nrequirements and includes, but is not limited to, notification of the\nappropriate personnel, creating an audit record, and rejecting invalid input.\n\n    This calls for inspection of application source code, which will require\ncollaboration with the application developers. It is recognized that in many\ncases, the database administrator (DBA) is organizationally separate from the\napplication developers, and may have limited, if any, access to source code.\nNevertheless, protections of this type are so important to the secure operation\nof databases that they must not be ignored. At a minimum, the DBA must attempt\nto obtain assurances from the development organization that this issue has been\naddressed, and must document what has been discovered.",
          "__new": "A common vulnerability is unplanned behavior when invalid inputs are received. This requirement guards against adverse or unintended system behavior caused by invalid inputs, where information system responses to the invalid input may be disruptive or cause the system to fail into an unsafe state.\n\nThe behavior will be derived from the organizational and system requirements and includes, but is not limited to, notification of the appropriate personnel, creating an audit record, and rejecting invalid input.\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered."
        },
        "descs": {
          "default__deleted": "A common vulnerability is unplanned behavior when invalid inputs are\nreceived. This requirement guards against adverse or unintended system behavior\ncaused by invalid inputs, where information system responses to the invalid\ninput may be disruptive or cause the system to fail into an unsafe state.\n\n    The behavior will be derived from the organizational and system\nrequirements and includes, but is not limited to, notification of the\nappropriate personnel, creating an audit record, and rejecting invalid input.\n\n    This calls for inspection of application source code, which will require\ncollaboration with the application developers. It is recognized that in many\ncases, the database administrator (DBA) is organizationally separate from the\napplication developers, and may have limited, if any, access to source code.\nNevertheless, protections of this type are so important to the secure operation\nof databases that they must not be ignored. At a minimum, the DBA must attempt\nto obtain assurances from the development organization that this issue has been\naddressed, and must document what has been discovered.",
          "rationale__deleted": "",
          "check": {
            "__old": "Review the MySQL Server to ensure it behaves in a predictable and\ndocumented manner that reflects organizational and system objectives when\ninvalid inputs are received.\n\n    To determine if table check constraints that have been put in place:\n    SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS;\n\n    If input validation is required beyond those enforced by the datatype and\nno constraints exist for data input, this is a finding.",
            "__new": "Review the MySQL Server to ensure it behaves in a predictable and documented manner that reflects organizational and system objectives when invalid inputs are received.\n\nTo determine if table check constraints that have been put in place:\nSELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS;\n\nIf input validation is required beyond those enforced by the datatype and no constraints exist for data input, this is a finding."
          },
          "fix": {
            "__old": "Configure the MySQL Server to behave in a predictable and documented manner\nthat reflects organizational and system objectives when invalid inputs are\nreceived.\n\n    To validate data at the database table level modify tables by adding\nconstraints CHECK constraint is a type of integrity constraint in SQL within\nthe create or alter table statement.\n\n    [CONSTRAINT [symbol]] CHECK (expr) [[NOT] ENFORCED]\n    For example\n    CREATE TABLE checker (i tinyint, CONSTRAINT i_must_be_between_7_and_12\nCHECK (i BETWEEN 7 AND 12 ) );\n    Adding a constraint to an existing table\n\n    ALTER TABLE <table_name>\n               ADD [CONSTRAINT [symbol]] CHECK (condition) [[NOT] ENFORCED]",
            "__new": "Configure the MySQL Server to behave in a predictable and documented manner that reflects organizational and system objectives when invalid inputs are received.\n\nTo validate data at the database table level modify tables by adding constraints CHECK constraint is a type of integrity constraint in SQL within the create or alter table statement.\n\n[CONSTRAINT [symbol]] CHECK (expr) [[NOT] ENFORCED]\nFor example\nCREATE TABLE checker (i tinyint, CONSTRAINT i_must_be_between_7_and_12 CHECK (i BETWEEN 7 AND 12 ) ); \nAdding a constraint to an existing table \n\nALTER TABLE <table_name> \n           ADD [CONSTRAINT [symbol]] CHECK (condition) [[NOT] ENFORCED]"
          }
        }
      }
    }
  }
}